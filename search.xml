<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux 常用命令</title>
      <link href="2022/07/05/Linux/linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2022/07/05/Linux/linux%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>Linux是一个操作系统（OS），我们比较熟悉的操作系统有Windows、苹果电脑上的macOS，而Linux 也是和他</p><p>们并驾齐驱的操作系统。</p><p>Linux内核最初只是由芬兰人林纳斯·托瓦兹(Linus Torvalds)在赫尔辛基大学上学时出于个人爱好而编写 的。Liux</p><p>是一套免费使用和自由传播的类Unix操作系统，是一个基于POSX和UNTX的多用户、多任务、 支持多线程和多</p><p>CPU的操作系统。Liux能运行主要的UNX工具软件、应用程序和网络协议。它支持32位 和64位硬件。Linux继承</p><p>Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><p><img src="/images/img/blog/image-20220725111535247.png" alt="image-20220725111535247"></p><p>目前用的最多的是CentOS和ubuntu。 CentOS：更稳定一些，适合做服务器使用 ubuntu：主打界面漂亮，更新比较激进，比较适合个人学习、测试使用。</p><p><img src="/images/img/blog/image-20220725111636551.png" alt="image-20220725111636551"></p><h1 id="2-Linux文件与目录结"><a href="#2-Linux文件与目录结" class="headerlink" title="2.Linux文件与目录结"></a>2.Linux文件与目录结</h1><p><img src="/images/img/blog/image-20220725112222425.png" alt="image-20220725112222425"></p><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>/bin</td><td>是Binary的缩写，这个目录存放着经常使用的命令</td></tr><tr><td>/sbin</td><td>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序</td></tr><tr><td>/home</td><td>存放着普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录是以用户的账户号命名的</td></tr><tr><td>/root</td><td>该目录为系统管理员，也称作超级权限管理者的用户主目录</td></tr><tr><td>/lib</td><td>系统开机所需要最基本的动态链接共享库，其作用类似于Windows里面的DLL文件，几乎所有的应用程序都需要用到这些共享库</td></tr><tr><td>/lost+found</td><td>这个目录一般情况下是空的，当系统非法关机后，这里就存放一些文件</td></tr><tr><td>/etc</td><td>所有的系统管理员所需要的配置文件和子目录</td></tr><tr><td>/usr</td><td>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下面的program files目录</td></tr><tr><td>/boot</td><td>这里存放的是启动Linux时使用的一些核心文件，包括一些链接文件以及镜像文件，自己安装的别放这里</td></tr><tr><td>/proc</td><td>这个目录是一个虚拟的目录，他是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</td></tr><tr><td>/srv</td><td>service缩写，该目录存放一些服务启动之后需要提取的数据</td></tr><tr><td>/sys</td><td>这是linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs</td></tr><tr><td>/tmp</td><td>这个目录是用来存放一些临时文件的</td></tr><tr><td>/dev</td><td>类似于windows的设备管理器，把所有的硬件用文件的形式存储</td></tr><tr><td>/media</td><td>linux系统会自动识别一些设备，例如U盘，光驱等等，当时识别后，linux会把识别的设备挂载到这个目录下</td></tr><tr><td>/mnt</td><td>系统提供该目录是为了让用户临时挂载别的文件系统，我们可以将外部的存储挂载在/mnt/上，然后进入该类目就可以查看里面的内容了</td></tr><tr><td>/opt</td><td>这个是给主机额外安装软件所摆放的目录，比如你安装一个MySQl数据库就可以放在这个目录，默认是空的</td></tr><tr><td>/var</td><td>这个目录存放不但扩充着的东西，我们习惯将那些经常修改的目录放在这个目录，比如：各种日志文件</td></tr></tbody></table><h1 id="3-命令"><a href="#3-命令" class="headerlink" title="3.命令"></a>3.命令</h1><h1 id="3-1-vi-vim编辑器"><a href="#3-1-vi-vim编辑器" class="headerlink" title="3.1. vi/vim编辑器"></a>3.1. vi/vim编辑器</h1><p>VI是Unix操作系统和类Unix操作系统中最强大的文本编辑器。</p><p>VIM编辑器是从VI编辑器发展出来的一个更强大的文本编辑器，可以主动以文字颜色辨别语法的正确性，方便程序</p><p>设计，VIM和VI编辑器完全兼容。</p><p>以vi打开一个档案就直接进入一般模式了（这是默认的模式），在这个模式中，你可以使用【上线左右】按键来移动光标，你可以使用【删除字符】或【删除整行】来处理档案内容，也可以使用【复制、粘贴】来处理你的文件数据。</p><h3 id="3-1-1常用语法表"><a href="#3-1-1常用语法表" class="headerlink" title="3.1.1常用语法表"></a>3.1.1常用语法表</h3><table><thead><tr><th>语法</th><th>功能描述</th></tr></thead><tbody><tr><td>yy</td><td>复制光标当前一行</td></tr><tr><td>y数字y</td><td>复制一段（从第几行到第几行）</td></tr><tr><td><code>y$</code></td><td>在当前行复制：行首到光标位置的内容</td></tr><tr><td><code>y^</code></td><td>在当前行复制：光标位置至行尾的内容</td></tr><tr><td>p</td><td>箭头移动到目的行粘贴，会粘贴在目的行的后面</td></tr><tr><td>u</td><td>撤销上一步</td></tr><tr><td>dd</td><td>删除光标当前行</td></tr><tr><td>d数字d</td><td>删除光标（含）后多少行</td></tr><tr><td><code>d$</code></td><td>在当前行删除：行首到光标位置的内容</td></tr><tr><td><code>d^</code></td><td>在当前行删除：光标位置至行尾的内容</td></tr><tr><td>x</td><td>剪切一个字母，相当于del</td></tr><tr><td>X</td><td>剪切一个字母，相当于Backspace</td></tr><tr><td>yw</td><td>复制一个词</td></tr><tr><td>dw</td><td>删除一个词</td></tr><tr><td>shift+6（^）</td><td>移动到行头</td></tr><tr><td>shift+4（$）</td><td>移动到行尾</td></tr><tr><td>1+G</td><td>移动到页头</td></tr><tr><td>G</td><td>移动到页尾</td></tr><tr><td><code>数字+G</code> 或 <code>数字+gg</code></td><td>移动到目的行</td></tr><tr><td><code>gg</code> 或 <code>H</code></td><td>移动到第一行</td></tr><tr><td>H</td><td>移动到屏幕顶行</td></tr><tr><td>L</td><td>移动到屏幕底行</td></tr></tbody></table><h3 id="3-1-2-vi-vim键盘图"><a href="#3-1-2-vi-vim键盘图" class="headerlink" title="3.1.2.vi/vim键盘图"></a>3.1.2.vi/vim键盘图</h3><p><img src="/images/img/blog/image-20220725112734289.png" alt="image-20220725112734289"></p><h3 id="3-1-3-编辑模式"><a href="#3-1-3-编辑模式" class="headerlink" title="3.1.3.编辑模式"></a>3.1.3.编辑模式</h3><p>在一般模式中可以进行删除、复制、粘贴等动作，但是却无法编辑文件内容，要等你按下【i，I，o，O，a，A】等任意一个字母之后才会进入编辑模式。</p><p>注意了，通常在Linux中，按下这些按键时，在画面的左下方会出现【INSERT或REPLACE】的字样，此时才可以进行编辑，而如果要回到一般模式时，则必须要按下【Esc】这个按键即可退出编辑模式。</p><h4 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h4><table><thead><tr><th>按键</th><th>功能</th></tr></thead><tbody><tr><td>i</td><td>当前光标前</td></tr><tr><td>I</td><td>光标所在行最前</td></tr><tr><td>a</td><td>当前光标后</td></tr><tr><td>A</td><td>光标所在行最后</td></tr><tr><td>o</td><td>当前光标行的下一行</td></tr><tr><td>O</td><td>当前光标行的上一行</td></tr></tbody></table><h4 id="退出编辑模式"><a href="#退出编辑模式" class="headerlink" title="退出编辑模式"></a>退出编辑模式</h4><p>按【ESC】键，便可退出编辑模式，会进入一般模式。</p><h3 id="3-1-4-指令模式"><a href="#3-1-4-指令模式" class="headerlink" title="3.1.4.指令模式"></a>3.1.4.指令模式</h3><p>在一般模式当中，输入【:/?】3个中的任何一个按钮，就可以将光标移动到最底下那一行。</p><p>在这个模式当中，可以提供你【搜索资料】的动作，而读取、存盘、大量取代支付、离开vi、显示行号等动作是在此模式中达成的！</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>:w</td><td>保存</td></tr><tr><td>:q</td><td>退出</td></tr><tr><td>:!</td><td>强制执行</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr><tr><td>/要查找的单词</td><td>n查找下一个，N往上查找</td></tr><tr><td>:noh</td><td>取消高亮显示</td></tr><tr><td>:set nu</td><td>显示行号</td></tr><tr><td>:set nonu</td><td>关闭行号</td></tr><tr><td>:s/old/new</td><td>替换当前行匹配到的第一个old为new</td></tr><tr><td>:s/old/new/g</td><td>替换当前行匹配到的所有old为new</td></tr><tr><td>:%s/old/new</td><td>替换文档汇总每一行匹配到的第一个old为new</td></tr><tr><td>:%s/old/new/g</td><td>替换内容，将old替换为new，/g替换匹配到的所有内容</td></tr></tbody></table><h3 id="3-1-5-模式转换"><a href="#3-1-5-模式转换" class="headerlink" title="3.1.5.模式转换"></a>3.1.5.模式转换</h3><p><img src="/images/img/blog/image-20220725113038101.png" alt="image-20220725113038101"></p><h1 id="3-2-ifconfig查看网络信息"><a href="#3-2-ifconfig查看网络信息" class="headerlink" title="3.2. ifconfig查看网络信息"></a>3.2. ifconfig查看网络信息</h1><p><img src="/images/img/blog/image-20220725113408469.png" alt="image-20220725113408469"></p><h1 id="3-3-ping测试主机之间的网络"><a href="#3-3-ping测试主机之间的网络" class="headerlink" title="3.3.ping测试主机之间的网络"></a>3.3.ping测试主机之间的网络</h1><p><img src="/images/img/blog/image-20220725113508160.png" alt="image-20220725113508160"></p><h2 id="ps修改IP地址为固定的"><a href="#ps修改IP地址为固定的" class="headerlink" title="ps修改IP地址为固定的"></a>ps修改IP地址为固定的</h2><p><img src="/images/img/blog/image-20220725113740813.png" alt="image-20220725113740813"></p><p><img src="/images/img/blog/image-20220725114216716.png" alt="image-20220725114216716"></p><h1 id="3-4-service-network-restart"><a href="#3-4-service-network-restart" class="headerlink" title="3.4 service network restart"></a>3.4 service network restart</h1><p>重启网络</p><p><img src="/images/img/blog/image-20220725114335371.png" alt="image-20220725114335371"></p><h1 id="3-5修改IP地址后可能遇到的问题"><a href="#3-5修改IP地址后可能遇到的问题" class="headerlink" title="3.5修改IP地址后可能遇到的问题"></a>3.5修改IP地址后可能遇到的问题</h1><p>（1）物理机器能ping通虚拟机，但是虚拟机ping不通物理机，一般都是因为物理机的防火墙问题，把物理机防火墙关闭就行</p><p>（2）虚拟机能ping通物理机，但是虚拟机ping不通外网，一般都是因为DNS的设置有问题</p><p>（3）虚拟机<code>ping www.baidu.com</code>显示域名未知等信息，一般查看GATEWAY和DNS设置是否正确</p><p>（4）如果以上全部设置完还是不行，需要关闭NetworkManager服务</p><ul><li>关闭：<code>systemctl stop NetworkManager</code></li><li>禁用：<code>systemctl disable NetworkManager</code></li></ul><p>（5）如果检查发现systemctl status network 有问题，需要检查ifcgf-ens33</p><h1 id="3-6-配置主机名"><a href="#3-6-配置主机名" class="headerlink" title="3.6 配置主机名"></a>3.6 配置主机名</h1><h2 id="3-6-1-hostname查案当前服务器主机名称"><a href="#3-6-1-hostname查案当前服务器主机名称" class="headerlink" title="3.6.1 hostname查案当前服务器主机名称"></a>3.6.1 hostname查案当前服务器主机名称</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 bin]# hostnametest1</span><br></pre></td></tr></table></figure><h2 id="3-6-2-修改主机名称"><a href="#3-6-2-修改主机名称" class="headerlink" title="3.6.2 修改主机名称"></a>3.6.2 修改主机名称</h2><h4 id="方式1：修改-etc-hostname文件，需重启"><a href="#方式1：修改-etc-hostname文件，需重启" class="headerlink" title="方式1：修改/etc/hostname文件，需重启"></a>方式1：修改/etc/hostname文件，需重启</h4><p>如果感觉主机名不合适，我们可以进行修改，通过编辑<code>/etc/hostname</code>文件进行修改，修改完毕之后重启生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@test1 bin]# vi &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure><h4 id="方式2：hostnamectl命令修改，无需重启"><a href="#方式2：hostnamectl命令修改，无需重启" class="headerlink" title="方式2：hostnamectl命令修改，无需重启"></a>方式2：hostnamectl命令修改，无需重启</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# cat &#x2F;etc&#x2F;hostname host2 bin[root@host2 bin]# hostnamectl set-hostname test1[root@host2 bin]# hostnametest1[root@host2 bin]# cat &#x2F;etc&#x2F;hostname test1</span><br></pre></td></tr></table></figure><h2 id="3-6-3-修改linux的主机映射文件（hosts文件）"><a href="#3-6-3-修改linux的主机映射文件（hosts文件）" class="headerlink" title="3.6.3 修改linux的主机映射文件（hosts文件）"></a>3.6.3 修改linux的主机映射文件（hosts文件）</h2><p>由于虚拟机比较多，配置时通常会采用主机名的方式配置，比较简单方便，不用刻意记ip地址。</p><p>编辑<code>/etc/hosts</code></p><blockquote><p>格式：ip 名称1 名称2 名称n</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.0.103 test103</span><br></pre></td></tr></table></figure><p>这样我们就可以通过<code>test103</code>来访问<code>192.168.0.103</code>这台机器了，比如<code>ping test103</code>效果如下，自动根据名称在<code>/etc/hosts</code>文件中找到对应的ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# ping test103PING test103 (192.168.0.103) 56(84) bytes of data.64 bytes from test103 (192.168.0.103): icmp_seq&#x3D;1 ttl&#x3D;128 time&#x3D;0.646 ms64 bytes from test103 (192.168.0.103): icmp_seq&#x3D;2 ttl&#x3D;128 time&#x3D;0.499 ms64 bytes from test103 (192.168.0.103): icmp_seq&#x3D;3 ttl&#x3D;128 time&#x3D;1.89 ms</span><br></pre></td></tr></table></figure><h1 id="3-7-Linux中的进程和服务"><a href="#3-7-Linux中的进程和服务" class="headerlink" title="3.7 Linux中的进程和服务"></a>3.7 Linux中的进程和服务</h1><p>计算机中，一个正在执行的程序或命令，被叫做“进程”（process）。</p><p>启动之后一直存在、常驻内存的进程，一般被称作“服务”（service）</p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start|stop|restart|status 服务名</span><br><span class="line"><span class="meta">#</span><span class="bash">centos6及以前的版本使用的是service命令做服务管理，而从7开始使用systemctl来做服务管理了</span></span><br><span class="line"><span class="meta">#</span><span class="bash">start：启动服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash">stop：停止服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash">restart：重启服务</span></span><br><span class="line"><span class="meta">#</span><span class="bash">status：查看服务状态</span></span><br></pre></td></tr></table></figure><p>systemctl能够操作的服务名称位于<code>/usr/lib/systemd/system</code>目录，如下图</p><h3 id="查看网络状态"><a href="#查看网络状态" class="headerlink" title="查看网络状态"></a>查看网络状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemclt status network</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220819104441666.png" alt="image-20220819104441666"></p><h3 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable 服务</span><br></pre></td></tr></table></figure><p>这命令会在<code>/etc/systemd/system/</code>目录下创建需要的符号链接，表示服务需要进行启动。通过stdout输出的信息可以看到，软连接实际指向的文件为<code>/usr/lib/systemd/system/</code>目录中的文件，实际起作用的也是这个目录中的文件。</p><h3 id="禁用服务"><a href="#禁用服务" class="headerlink" title="禁用服务"></a>禁用服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl mask和systemctl disable</span><br></pre></td></tr></table></figure><p>执行<code>systemctl disable xxx</code>后，会禁用这个服务。它实现的方法是将服务对应的软连接从<code>/etc/systemd/system</code>中删除。</p><p>执行 <code>systemctl mask xxx</code>会<code>屏蔽</code>这个服务。它和<code>systemctl disable xxx</code>的区别在于，前者只是删除了符号链接，后者会建立一个指向<code>/dev/null</code>的符号链接，这样，即使有其他服务要启动被<code>mask</code>的服务，仍然无法执行成功。</p><p>在执行过<code>mask</code>后，如果想要启动服务，那么会报错误,如果使用disable的话，可以正常启动服务。总体来看，disable和enable是一对操作，是用来启动、停止服务.</p><p>如果使用了mask，要想重新启动服务，必须先执行unmask将服务取消屏蔽。mask和unmask是一对操作，用来屏蔽和取消屏蔽服务。 <strong>systemctl unmask xxx取消屏蔽</strong></p><h2 id="systemctl设置后台服务的自启动配置"><a href="#systemctl设置后台服务的自启动配置" class="headerlink" title="systemctl设置后台服务的自启动配置"></a>systemctl设置后台服务的自启动配置</h2><h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>systemctl list-unit-files</td><td>查看服务开机启动状态</td></tr><tr><td>systemctl disable service_name</td><td>关掉指定服务的自动启动</td></tr><tr><td>systemctl enable service_name</td><td>开启指定服务的自动启动</td></tr></tbody></table><p><img src="/images/img/blog/image-20220819105953357.png" alt="image-20220819105953357"></p><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><h4 id="（1）multi-user-target：多用户有网，无图形界面"><a href="#（1）multi-user-target：多用户有网，无图形界面" class="headerlink" title="（1）multi-user.target：多用户有网，无图形界面"></a>（1）multi-user.target：多用户有网，无图形界面</h4><h4 id="（2）graphical-target：多用户有网，有图形界面"><a href="#（2）graphical-target：多用户有网，有图形界面" class="headerlink" title="（2）graphical.target：多用户有网，有图形界面"></a>（2）graphical.target：多用户有网，有图形界面</h4><h3 id="systemctl-get-default：查看当前运行级别"><a href="#systemctl-get-default：查看当前运行级别" class="headerlink" title="systemctl get-default：查看当前运行级别"></a>systemctl get-default：查看当前运行级别</h3><p><img src="/images/img/blog/image-20220819110342216.png" alt="image-20220819110342216"></p><h3 id="systemctl-set-default：修改当前运行级别"><a href="#systemctl-set-default：修改当前运行级别" class="headerlink" title="systemctl set-default：修改当前运行级别"></a>systemctl set-default：修改当前运行级别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default TARGET.target</span><br></pre></td></tr></table></figure><h3 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h3><h3 id="基本语法-2"><a href="#基本语法-2" class="headerlink" title="基本语法"></a>基本语法</h3><h4 id="（1）sync：将数据由内存同步到硬盘中"><a href="#（1）sync：将数据由内存同步到硬盘中" class="headerlink" title="（1）sync：将数据由内存同步到硬盘中"></a>（1）sync：将数据由内存同步到硬盘中</h4><p>linux中为提高效率，写磁盘的时候会先将数据写入缓冲器，缓冲区满了之后才会刷到磁盘，sync命令可以将缓冲区的数据立即写入磁盘。</p><h4 id="（2）half：停机，关闭系统，但不断电"><a href="#（2）half：停机，关闭系统，但不断电" class="headerlink" title="（2）half：停机，关闭系统，但不断电"></a>（2）half：停机，关闭系统，但不断电</h4><h4 id="（3）poweroff：关机，断电"><a href="#（3）poweroff：关机，断电" class="headerlink" title="（3）poweroff：关机，断电"></a>（3）poweroff：关机，断电</h4><h4 id="（4）reboot：重启，等同于shutdown-r-now"><a href="#（4）reboot：重启，等同于shutdown-r-now" class="headerlink" title="（4）reboot：重启，等同于shutdown -r now"></a>（4）reboot：重启，等同于shutdown -r now</h4><h4 id="（5）shutdown-选项-时间"><a href="#（5）shutdown-选项-时间" class="headerlink" title="（5）shutdown [选项] 时间"></a>（5）shutdown [选项] 时间</h4><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-H</td><td>相当于—half，停机</td></tr><tr><td>-r</td><td>-r=reboot 重启</td></tr></tbody></table><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>now</td><td>立刻关机</td></tr><tr><td>时间</td><td>等待多久后关机（单位是分钟）</td></tr></tbody></table><h1 id="3-8-命令帮助"><a href="#3-8-命令帮助" class="headerlink" title="3.8 命令帮助"></a>3.8 命令帮助</h1><p><strong>man 获得命令帮助信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man cd </span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220819111353431.png" alt="image-20220819111353431"></p><table><thead><tr><th>信息</th><th>功能</th></tr></thead><tbody><tr><td>NAME</td><td>命令的名称和单行描述</td></tr><tr><td>SYNOPSIS</td><td>怎样使用命令</td></tr><tr><td>DESCRIPTION</td><td>命令功能的深入讨论</td></tr><tr><td>EXAMPLES</td><td>怎样使用命令的例子</td></tr><tr><td>SEE ALSO</td><td>相关主题（通常是手册页）</td></tr></tbody></table><p><strong>type 查看命令类型</strong></p><p><img src="/images/img/blog/image-20220819111644819.png" alt="image-20220819111644819"></p><p><strong>man -f 命令：列出命令的帮助文档列表</strong></p><p><img src="/images/img/blog/image-20220819111744904.png" alt="image-20220819111744904"></p><p> <strong>help：获取shell内置命令帮助信息</strong></p><p><img src="/images/img/blog/image-20220819111908938.png" alt="image-20220819111908938"></p><p><strong>clear：清屏</strong></p><p>clear命令执行后，屏幕被清理干净了，对应的快捷键是<code>ctrl+l</code></p><p> <strong>reset：彻底清屏</strong></p><p>执行reset命令后，命令窗口会被重启，会彻底清屏</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><table><thead><tr><th>常用快捷键</th><th>功能</th></tr></thead><tbody><tr><td>ctrl+c</td><td>停止进程</td></tr><tr><td>ctrl+l</td><td>清屏，等同于clear；彻底清屏是：reset</td></tr><tr><td>善于用tab键</td><td>提示（更重要的是可以防止敲错）</td></tr><tr><td>上下键</td><td>查找执行过的命令</td></tr></tbody></table><h1 id="3-9-文件目录命令"><a href="#3-9-文件目录命令" class="headerlink" title="3.9 文件目录命令"></a>3.9 文件目录命令</h1><h2 id="pwd：显示当前工作目录的绝对路径"><a href="#pwd：显示当前工作目录的绝对路径" class="headerlink" title="pwd：显示当前工作目录的绝对路径"></a><strong>pwd：显示当前工作目录的绝对路径</strong></h2><p><img src="/images/img/blog/image-20220824161309114.png" alt="image-20220824161309114"></p><h2 id="ls：列出目录的内容"><a href="#ls：列出目录的内容" class="headerlink" title="ls：列出目录的内容"></a><strong>ls：列出目录的内容</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [选项] [目录或是文件]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>全部文件，连同隐藏文件（开头为.的文件）一起列出来（常用）</td></tr><tr><td>-l</td><td>长数据串列出，包含文件的属性与权限等数据（常用），等价于ll命令</td></tr><tr><td>目录参数非必须</td><td>命令后面的目录可以省略，省略时，查看的是当前目录</td></tr></tbody></table><p><img src="/images/img/blog/image-20220824161405236.png" alt="image-20220824161405236"></p><p><img src="/images/img/blog/image-20220824161558216.png" alt="image-20220824161558216"></p><h2 id="cd：切换目录"><a href="#cd：切换目录" class="headerlink" title="cd：切换目录"></a>cd：切换目录</h2><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td>切换路径</td></tr><tr><td>cd 相对路径</td><td>切换路径</td></tr><tr><td>cd bin或cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在目录，可以用来在2个目录来回跳转</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr></tbody></table><h2 id="mkdir：创建一个新的目录"><a href="#mkdir：创建一个新的目录" class="headerlink" title="mkdir：创建一个新的目录"></a>mkdir：创建一个新的目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir [-p] 要创建的目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir a # 创建a</span><br><span class="line">mkdir a/b/c/d  #mkdir: 无法创建目录&quot;a/b/c/d&quot;: 没有那个文件或目录</span><br><span class="line">mkdir -p a/b/c/d</span><br></pre></td></tr></table></figure><h2 id="rmdir：删除一个空目录"><a href="#rmdir：删除一个空目录" class="headerlink" title="rmdir：删除一个空目录"></a>rmdir：删除一个空目录</h2><p><strong>删除非空目录会失败</strong></p><h2 id="touch：创建空文件"><a href="#touch：创建空文件" class="headerlink" title="touch：创建空文件"></a>touch：创建空文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 1.txt</span><br></pre></td></tr></table></figure><h2 id="cp：复制文件或目录"><a href="#cp：复制文件或目录" class="headerlink" title="cp：复制文件或目录"></a>cp：复制文件或目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp [-r] source dest # -r 递归复制整个文件夹 </span><br></pre></td></tr></table></figure><p>强制覆盖不提示的方法：<code>/cp</code>，因为cp命令是<code>cp -i</code>的别名，<code>-i</code>选项的作用是当出现文件覆盖的时候需要提示用户选择是否覆盖，这也是为了安全起见，而<code>/命令</code>可以按照命令原始的方式运行。</p><p><strong>复制文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# touch 1.txt</span><br><span class="line">[root@host2 bin]# cp 1.txt &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><p><strong>（2）递归复制整个文件夹</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# mkdir a</span><br><span class="line">[root@host2 bin]# touch a&#x2F;1.txt</span><br><span class="line">[root@host2 bin]# touch a&#x2F;2.txt</span><br><span class="line">[root@host2 bin]# ls </span><br><span class="line">a1.txt  2.txt</span><br><span class="line">[root@host2 bin]# cp -r a b</span><br><span class="line">[root@host2 bin]# ls </span><br><span class="line">b1.txt  2.txt</span><br></pre></td></tr></table></figure><p><strong>（3）/cp：复制，覆盖不提示</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# touch 1.txt[root@host2 bin]# cp 1.txt &#x2F;tmp&#x2F;[root@host2 bin]# cp 1.txt &#x2F;tmp&#x2F;cp：是否覆盖&quot;&#x2F;tmp&#x2F;1.txt&quot;？ y[root@host2 bin]# &#x2F;cp 1.txt &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><h2 id="scp是在不同linux系统之间来回复制文件"><a href="#scp是在不同linux系统之间来回复制文件" class="headerlink" title="scp是在不同linux系统之间来回复制文件"></a>scp是在不同linux系统之间来回复制文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">scp [可选参数] file_source file_target </span><br><span class="line"><span class="meta">#</span><span class="bash">从本地复制到远程</span></span><br><span class="line"></span><br><span class="line">scp local_file remote_username@remote_ip:remote_folder </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_username@remote_ip:remote_file </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_ip:remote_folder </span><br><span class="line">或者 </span><br><span class="line">scp local_file remote_ip:remote_file </span><br><span class="line">scp [可选参数] file_source file_target </span><br><span class="line"><span class="meta">#</span><span class="bash">从远程复制到本地</span></span><br><span class="line">scp root@192.1.12.3:/home/root/others/music /home/space/music/1.mp3 </span><br><span class="line">scp -r 192.1.12.3:/home/root/others/ /home/space/music/</span><br><span class="line"><span class="meta">#</span><span class="bash">如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下</span></span><br><span class="line"><span class="meta">#</span><span class="bash">scp 命令使用端口号 4588</span>  </span><br><span class="line"><span class="meta">#</span><span class="bash">使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。</span></span><br><span class="line">scp -P 4588 remote@192.1.12.3:/usr/local/sin.sh /home/administrator</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-1</td><td>强制scp命令使用协议ssh1</td></tr><tr><td>-2</td><td>强制scp命令使用协议ssh2</td></tr><tr><td>-4</td><td>强制scp命令只使用IPv4寻址</td></tr><tr><td>-6</td><td>强制scp命令只使用IPv6寻址</td></tr><tr><td>-B</td><td>使用批处理模式（传输过程中不询问传输口令或短语）</td></tr><tr><td>-C</td><td>允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</td></tr><tr><td>-p</td><td>保留原文件的修改时间，访问时间和访问权限。</td></tr><tr><td>-q</td><td>不显示传输进度条。</td></tr><tr><td>-r</td><td>递归复制整个目录。</td></tr><tr><td>-v</td><td>详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证 和配置问题。</td></tr><tr><td>-c cipher</td><td>以cipher将数据传输进行加密，这个选项将直接传递给ssh。</td></tr><tr><td>-F ssh_config</td><td>指定一个替代的ssh配置文件，此参数直接传递给ssh。</td></tr><tr><td>-i identity_file</td><td>从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</td></tr><tr><td>-l limit</td><td>限定用户所能使用的带宽，以Kbit/s为单位。</td></tr><tr><td>-o ssh_option</td><td>如果习惯于使用ssh_config(5)中的参数传递方式，</td></tr><tr><td>-P port</td><td>注意是大写的P, port是指定数据传输用到的端口号</td></tr><tr><td>-S program</td><td>指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</td></tr></tbody></table><h2 id="rm：删除文件或目录"><a href="#rm：删除文件或目录" class="headerlink" title="rm：删除文件或目录"></a>rm：删除文件或目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件1 文件2 [文件N...]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录中所有内容</td></tr><tr><td>-f</td><td>强制执行删除操作，不会提示用户是否确认删除</td></tr><tr><td>-v</td><td>显示命令的详细执行过程</td></tr></tbody></table><p><strong>删某个文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# touch 1.txt 2.txt</span><br><span class="line">[root@host2 bin]# ls1.txt  2.txt  公共  模板  视频  图片  文档  下载  音乐  桌面</span><br><span class="line">[root@host2 bin]# rm 1.txtrm：是否删除普通空文件 &quot;1.txt&quot;？y</span><br><span class="line">[root@host2 bin]# rm 2.txtrm：是否删除普通空文件 &quot;2.txt&quot;？n</span><br><span class="line">[root@host2 bin]# rm -f 2.txt</span><br></pre></td></tr></table></figure><p><strong>（2）递归删除目录所有内容</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# mkdir -p a/b/c/d</span><br><span class="line">[root@host2 bin]# rm -rf a</span><br></pre></td></tr></table></figure><p><strong>（3）删除多个文件，且输出提示信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# mkdir a1 a2 a3</span><br><span class="line">[root@host2 bin]# rm -rfv a1 a2 a3</span><br><span class="line">已删除目录：&quot;a1&quot;</span><br><span class="line">已删除目录：&quot;a2&quot;</span><br><span class="line">已删除目录：&quot;a3&quot;</span><br></pre></td></tr></table></figure><p>*<em>（4）/<em>通配符删除</em></em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**rm -rf //***：此命令慎用，否则永无回头之日。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# mkdir a1 a2 a3</span><br><span class="line">[root@host2 bin]# lsa1  a2  a3  公共  模板  视频  图片  文档  下载  音乐  桌面</span><br><span class="line">[root@host2 bin]# rm -rf a*</span><br><span class="line">[root@host2 bin]# ls</span><br><span class="line">公共  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure><h2 id="mv：移动文件与目录或重命名"><a href="#mv：移动文件与目录或重命名" class="headerlink" title="mv：移动文件与目录或重命名"></a>mv：移动文件与目录或重命名</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv oldNameFile newNameFile（重命名文件）</span><br><span class="line">mv /temp/movefile /targetFolder (移动文件)</span><br></pre></td></tr></table></figure><p><strong>重命名</strong></p><p>将1.txt重命名为2.txt</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin ]# mv 1.txt 2.txt</span><br></pre></td></tr></table></figure><p><strong>（2）移动文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin ]# touch 1.txt</span><br><span class="line">[root@host2 bin a]# mkdir a</span><br><span class="line">[root@host2 bin ]# ls1.txt  a</span><br><span class="line">[root@host2 bin ]# mv 1.txt a</span><br><span class="line">[root@host2 bin ]# ls a1.txt</span><br></pre></td></tr></table></figure><p><strong>（3）mv a b</strong></p><ul><li>若a和b都是目录，b不存在时，相当于把a目录命令为b目录</li><li>若a和b都是目录，b存在的时，相当于把a目录移动到b目录中</li></ul><h2 id="cat：查看文件内容"><a href="#cat：查看文件内容" class="headerlink" title="cat：查看文件内容"></a>cat：查看文件内容</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat [-n] 要查看的文件 #显示所有行的行号，也包含空行</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220824164017245.png" alt="image-20220824164017245"></p><h2 id="more：文件内容分屏查看器"><a href="#more：文件内容分屏查看器" class="headerlink" title="more：文件内容分屏查看器"></a>more：文件内容分屏查看器</h2><p>适合查看内容超过一个屏幕的文件，支持上下翻页查看文件内容。</p><p>more命令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容，more命令中内置了若干快捷键，详见操作说明。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>空白键(space)</td><td>向下翻一页</td></tr><tr><td>b</td><td>向上翻一页</td></tr><tr><td>Enter</td><td>向下翻【一行】</td></tr><tr><td>q</td><td>代表立刻离开more，不再显示该文件内容</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table><h2 id="less：分屏显示文件内容"><a href="#less：分屏显示文件内容" class="headerlink" title="less：分屏显示文件内容"></a>less：分屏显示文件内容</h2><p>less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端，less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要去加载的内容，对于显示大型文件具有较高的效率。<strong>用SecureCRT时候[pagedown]和[pageup]可能会出现无法识别的问题</strong></p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>空白键（space）</td><td>向下翻动一页</td></tr><tr><td>[pagedown] 或 f</td><td>上下翻动一页</td></tr><tr><td>[pageup] 或 b</td><td>向上翻动一页</td></tr><tr><td>/字符串</td><td>向下搜寻【字符串】的功能；n：向下查找；N：向上查找</td></tr><tr><td>?字符串</td><td>向上搜索【字符串】的功能，n：向上查找，N：向下查找</td></tr><tr><td>q</td><td>离开less这个程序</td></tr></tbody></table><h2 id="echo：输出内容到控制台"><a href="#echo：输出内容到控制台" class="headerlink" title="echo：输出内容到控制台"></a>echo：输出内容到控制台</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo [选项] [输出内容]</span><br></pre></td></tr></table></figure><p>-e：支持反斜线的字符转换</p><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td><code>//</code></td><td>输出/本身</td></tr><tr><td>/n</td><td>换行符</td></tr><tr><td>/t</td><td>制表符，也就是Tab键</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;hello/tworld&quot;</span><br><span class="line">hello    world</span><br></pre></td></tr></table></figure><p><strong>显示结果定向至文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;It is a test&quot; &gt; myfile</span><br></pre></td></tr></table></figure><p><strong>显示命令执行结果</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#96;date&#96;</span><br></pre></td></tr></table></figure><p><img src="E:\work\wyl\hexo\myBlog\source\images\img\blog\image-20220825105812479.png" alt="image-20220825105812479"></p><p>显示变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim test.sh</span><br><span class="line"></span><br><span class="line">read name</span><br><span class="line">echo &quot;$name 测试echo输出变量name的值&quot;</span><br><span class="line"></span><br><span class="line">[root@host2 bin]$ sh test.sh </span><br><span class="line">ok #标准输出</span><br><span class="line">ok 测试echo输出变量name的值 #输出</span><br></pre></td></tr></table></figure><p><strong>echo输出带颜色</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;\e[1;31m 我爱中华人民共和国 \e[0m&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开始标识：\e[1;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 色号 31m</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 结束标识：\e[0m</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 30m=黑色</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 31m=红色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 32m=绿色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 33m=黄色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 34m=蓝色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 35m=洋红</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 36m=青色</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 37m=白色</span></span><br></pre></td></tr></table></figure><p><img src="E:\work\wyl\hexo\myBlog\source\images\img\blog\image-20220825105422560.png" alt="image-20220825105422560"></p><h2 id="head：显示文件头部内容"><a href="#head：显示文件头部内容" class="headerlink" title="head：显示文件头部内容"></a>head：显示文件头部内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">head 文件    （功能描述：查看文件头10行内容）</span><br><span class="line">head -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数）</span><br></pre></td></tr></table></figure><h2 id="tail：输出文件尾部内容"><a href="#tail：输出文件尾部内容" class="headerlink" title="tail：输出文件尾部内容"></a>tail：输出文件尾部内容</h2><table><thead><tr><th>tail 文件</th><th>查看文件尾部10行内容</th></tr></thead><tbody><tr><td>tail -n 5 文件</td><td>查看文件尾部5行内容，5可以是任意行数</td></tr><tr><td>tail -f 文件</td><td>实时追踪该文档的所有更新</td></tr></tbody></table><h2 id="gt-输出重定向-和-gt-gt-追加"><a href="#gt-输出重定向-和-gt-gt-追加" class="headerlink" title="&gt;输出重定向 和 &gt;&gt;追加"></a>&gt;输出重定向 和 &gt;&gt;追加</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>ls -l &gt; 目标文件</td><td>将ls -l命令的结果写入到目标文件中（会覆盖目标文件内容）</td></tr><tr><td>ls -al &gt;&gt; 目标文件</td><td>将ls -al命令的结果追加到目标文件中</td></tr><tr><td>cat 文件1 &gt; 文件2</td><td>将文件1的内容覆盖到文件2中</td></tr><tr><td>echo “内容” &gt;&gt; 目标文件</td><td>将一段文字追加到目标文件</td></tr></tbody></table><h2 id="ln：创建软连接"><a href="#ln：创建软连接" class="headerlink" title="ln：创建软连接"></a>ln：创建软连接</h2><p>软连接也称为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了连接其他文件的路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s [源文件或目录] [软连接名称]</span><br><span class="line">rm -rf 软连接名称 #删除软连接</span><br><span class="line">rm -rf 软连接名/ #会把软连接对应的真实目录下内容删除。</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin tmp]# cd /tmp/</span><br><span class="line">[root@host2 bin tmp]# ln -s /root/桌面 ./desktop</span><br><span class="line">[root@host2 bin tmp]# ll desktop</span><br><span class="line">lrwxrwxrwx. 1 root root 12 5月   2 14:53 desktop -&gt; /root/桌面</span><br><span class="line">[root@host2 bin tmp]# cd desktop/</span><br><span class="line">[root@host2 bin desktop]# pwd</span><br><span class="line">/tmp/desktop</span><br><span class="line">[root@host2 bin desktop]# pwd -P</span><br><span class="line">/root/桌面</span><br></pre></td></tr></table></figure><h2 id="history：查看已执行过的历史命令"><a href="#history：查看已执行过的历史命令" class="headerlink" title="history：查看已执行过的历史命令"></a>history：查看已执行过的历史命令</h2><p>history可以查看已执行过的历史命令，返回的结果：命令编号 命令</p><p><img src="/images/img/blog/image-20220824164857542.png" alt="image-20220824164857542"></p><p><strong><code>!命令编号</code>，可以执行对应编号的命令</strong></p><p><strong>history n：查看最近的n行历史命令</strong></p><p><strong>history n：查看最近的n行历史命令</strong></p><h2 id="tree：树形显示目录所有文件"><a href="#tree：树形显示目录所有文件" class="headerlink" title="tree：树形显示目录所有文件"></a>tree：树形显示目录所有文件</h2><p>tree命令在系统中默认是不存在的，所以使用前需要先安装，然后才可以使用。</p><p><code>tree [选项] [目录]</code></p><table><thead><tr><th>-h</th><th>以人容易理解的方式显示文件大小（GBytes、MBytes、KBytes）</th></tr></thead><tbody><tr><td>-L n</td><td>n用来指定显示的树的深度</td></tr></tbody></table><h1 id="3-10-时间日期"><a href="#3-10-时间日期" class="headerlink" title="3.10 时间日期"></a>3.10 时间日期</h1><table><thead><tr><th>date</th><th>显示当前时间</th></tr></thead><tbody><tr><td>date +%Y</td><td>显示当前年份</td></tr><tr><td>date +%m</td><td>显示当前月份</td></tr><tr><td>date +%d</td><td>显示当前是本月哪一天</td></tr><tr><td>date “+%Y-%m-%d %H:%M:%S”</td><td>显示年月日时分秒</td></tr></tbody></table><table><thead><tr><th>date -d ‘1 days ago’</th><th>显示前一天时间</th></tr></thead><tbody><tr><td>date -d ‘-1 days ago’</td><td>显示明天时间</td></tr></tbody></table><p><strong>今天、昨天、明天</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">date</span><br><span class="line">Wed Aug 24 16:54:36 CST 2022</span><br><span class="line">[root@host2 bin]# date -d &#x27;1 days ago&#x27;</span><br><span class="line">Tue Aug 23 16:54:48 CST 2022</span><br><span class="line">[root@host2 bin]#  date -d &#x27;-1 days ago&#x27;</span><br><span class="line">Thu Aug 25 16:54:58 CST 2022</span><br></pre></td></tr></table></figure><p><strong>（2）当前时间、一小时前、一小时后</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# date -d &#x27;1 hours ago&#x27;</span><br><span class="line">Wed Aug 24 15:56:12 CST 2022</span><br><span class="line">[root@host2 bin]# date -d &#x27;-1 hours ago&#x27;</span><br><span class="line">Wed Aug 24 17:56:24 CST 2022</span><br><span class="line">[root@host2 bin]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>date -s：设置系统时间</strong></p><p><strong>date -R 查看当前系统所在时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# date -R</span><br><span class="line">Wed, 24 Aug 2022 17:00:57 +0800</span><br></pre></td></tr></table></figure><p><strong>tzselect 选择时区</strong></p><p><img src="/images/img/blog/image-20220824170546628.png" alt="image-20220824170546628"></p><p><strong>timedatectl 设置时区</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><p><strong>cal：查看日历</strong></p><p><img src="/images/img/blog/image-20220824165903178.png" alt="image-20220824165903178"></p><h1 id="3-11-文件权限"><a href="#3-11-文件权限" class="headerlink" title="3.11  文件权限"></a>3.11  文件权限</h1><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全线，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定，在Linux中我们可以使用ll或者ls -l 命令来显示一个文件的属性以及文件所属的用户和组。</p><p><img src="/images/img/blog/image-20220824171914596.png" alt="image-20220824171914596"></p><ul><li>①：10个字符：文件类型与权限</li><li>②：如果是文件，这个数字表示硬链接的个数，如果是目录，这个数字表示目录中文件夹的个数</li><li>③：文件属主（文件拥有者）</li><li>④：文件所属组</li><li>⑤：文件大小</li><li>⑥：文件创建或者最后修改时间</li><li>⑦：文件名称</li></ul><p><strong>从左到右的10个字符表示文件类型与权限</strong></p><p><img src="/images/img/blog/image-20220824172022626.png" alt="image-20220824172022626"></p><ul><li>0位：表示文件类型，在Linux中第一个字符代表这个文件是目录、文件或链接文件等等<ul><li>-：代表文件</li><li>d：代表目录</li><li>l：表示连接文件</li></ul></li><li>第1-3位：文件所有者拥有的权限（User）</li><li>第4-6位：该文件所属组拥有的权限（Group）</li><li>第7-9位：其他用户对该文件拥有的权限（Other）</li></ul><p><strong>rwx作用文件和目录的不同解释</strong></p><p><strong>（1）作用到文件</strong></p><ul><li>r：代表可读（read）：可以读取、查看文件的内容</li><li>w：代表可写（write）：可以修改文件，但是不带表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件</li><li>x：带包可执行（execute）：可以被系统执行</li></ul><p><strong>（2）作用到目录</strong></p><ul><li>r：代表可读（read）：可以读取，即可以通过ls查看目录内容</li><li>w：代表可写（write）：可以修改，即可以在目录内创建+删除+重命名目录内的文件</li><li>x：代表可执行（execute）：可以进入该目录，即可以通过cd进去</li></ul><h2 id="chmod：改变文件或目录权限"><a href="#chmod：改变文件或目录权限" class="headerlink" title="chmod：改变文件或目录权限"></a>chmod：改变文件或目录权限</h2><p><img src="/images/img/blog/image-20220824172211417.png" alt="image-20220824172211417"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`chmod [选项] 模式[,模式] 文件或目录`</span><br></pre></td></tr></table></figure><ul><li><p>选项</p><ul><li>R：递归处理</li></ul></li><li><p>模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;ugoa&#125;&#123;+-&#x3D;&#125;&#123;rwx&#125;</span><br></pre></td></tr></table></figure><ul><li>u：所属者</li><li>g：所属组</li><li>o：其他人</li><li>a：所有人（u、g、o的总和）</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod [选项] [八进制模式] 文件或目录</span><br></pre></td></tr></table></figure><ul><li>选项<ul><li>R：递归处理</li></ul></li><li>八进制模式<ul><li>r=4</li><li>w=2</li><li>x=1</li><li>wx=2+1=3</li><li>rx=4+1=5</li><li>rw=4+2=6</li><li>rwx=4+2+1=7</li></ul></li></ul><p>为1.sh文件的所属者添加执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# chmod u+x 1.sh</span><br></pre></td></tr></table></figure><p>（2）为1.sh文件的所属组添加读取和执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod g+rx 1.sh</span><br></pre></td></tr></table></figure><p>（3）修改1.sh文件权限：拥有者去掉执行权限，其他用户添加执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# chmod u-x,o+x 1.sh</span><br></pre></td></tr></table></figure><p>（4）设置1.sh用户权限，所有者有rwx权限，所属组以及其他用户有wx曲线</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# chmod u&#x3D;rwx,g&#x3D;wx,o&#x3D;wx 1.sh</span><br></pre></td></tr></table></figure><p>（5）通过数字的方式设置权限，所有者、所属组、其他用户都具有可读可写可执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# chmod 777 1.sh</span><br></pre></td></tr></table></figure><p>（6）修改test文件夹及其内部所有文件的所有者、 所属组、 其他用户都具有可读可写可执行权限，需要用到-R参数，递归进行设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# chmod -R 777 test&#x2F;</span><br></pre></td></tr></table></figure><h2 id="chown：改变所有者"><a href="#chown：改变所有者" class="headerlink" title="chown：改变所有者"></a>chown：改变所有者</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown [-R] [所有者][:组] [文件或目录] #递归操作</span><br></pre></td></tr></table></figure><table><thead><tr><th><code>chown tom 1.sh</code></th><th>将1.sh的所有者改为tom</th></tr></thead><tbody><tr><td><code>chown :g1 1.sh</code></td><td>将1.sh的所属组改为g1</td></tr><tr><td><code>chrown -R tom:g1 test</code></td><td>递归将test目录及其所有子文件，所属者改为tom，所属组改为g1</td></tr></tbody></table><h2 id="chgrp：改变文件或目录所属组"><a href="#chgrp：改变文件或目录所属组" class="headerlink" title="chgrp：改变文件或目录所属组"></a>chgrp：改变文件或目录所属组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp [-R] [最终用户组] [文件或目录]</span><br></pre></td></tr></table></figure><table><thead><tr><th><code>chgrp g1 1.sh</code></th><th>将1.sh的所属组改为g1</th></tr></thead><tbody><tr><td><code>chgrp -R g1 test</code></td><td>递归将test目录及其所有子文件，所属组改为g1</td></tr></tbody></table><h1 id="3-12-查找"><a href="#3-12-查找" class="headerlink" title="3.12 查找"></a>3.12 查找</h1><h2 id="find：查找文件或者目录"><a href="#find：查找文件或者目录" class="headerlink" title="find：查找文件或者目录"></a>find：查找文件或者目录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [path...] [选项]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-name 文件名称</td><td>按文件名查找文件</td></tr><tr><td>-user 用户名</td><td>查找属于指定用户名的所有文件</td></tr><tr><td>-size [+-]n[bcwkMG]</td><td>按照指定多文件大小查找文件 n：数字，表示文件大小，n后面可以跟单位 单位为(区分大小写)： b：块（512字节） c：字节 w：字（2字节） k：千字节 M：兆字节 G：吉字节</td></tr></tbody></table><table><thead><tr><th><code>find -name 1.txt</code></th><th>在当前目录及其所有子目录中查询1.txt文件</th></tr></thead><tbody><tr><td><code>find / -name 1.txt</code></td><td>在/目录及其所有子目录中递归查找1.txt文件</td></tr><tr><td><code>find / -name *.txt</code></td><td>在/目录及其所有子目录中递归查找.txt结尾的文件</td></tr><tr><td><code>find /opt/ /home/ -name *.txt</code></td><td>在[/opt,/home]两个目录中递归查找.txt结尾的文件</td></tr><tr><td><code>find / -size 10M</code></td><td>在/目录递归查找文件大小为10M的文件</td></tr><tr><td><code>find / -size +10M</code></td><td>在/目录递归查找大于10M的文件</td></tr><tr><td><code>find / -size +10M -size -100M</code></td><td>在/目录递归查找大于10M且小于100M的文件</td></tr><tr><td><code>find / -name *.log -size +50M -size -100M</code></td><td>在/opt目录中查找名称以.log结尾的且大于50M小于100M的文件</td></tr></tbody></table><h2 id="locate：快速定位文件路径"><a href="#locate：快速定位文件路径" class="headerlink" title="locate：快速定位文件路径"></a>locate：快速定位文件路径</h2><p><code>locate</code> 命令和<code>find</code>命令一样都是用来在系统下查找文件或目录。但 locate命令要比find -name快得多，原因在于<code>locate</code>命令在查找文件时并不扫描具体目录，而是搜索一个已经创建好的数据库<code>/var/lib/mlocate/mlocate.db</code> 。这个数据库中含有本地几乎所有文件信息（一些被排除在外的目录或刚创建的目录可能不会包含在数据库中。Linux系统会自动创建这个数据库，并且通过定时任务每天自动更新一次，因此，我们在用whereis和locate 查找文件时，有时会找到已经被删除的数据，或者刚刚建立文件，却无法查找到，原因就是因为数据库文件没有被更新。为了避免这种情况，可以在使用<code>locate</code>之前，先使用<code>updatedb</code>命令，手动更新数据库,但这也需要一定的时间，时间长短和空间大小文件数量有关。整个locate工作其实是由四部分组成的:</p><ol><li><code>/usr/bin/updatedb</code> 主要用来更新数据库，通过crontab自动完成的</li><li><code>/usr/bin/locate</code> 查询文件位置</li><li><code>/etc/updatedb.conf</code> updatedb的配置文件</li><li><code>/var/lib/mlocate/mlocate.db</code> 存放文件索引信息的数据文件</li></ol><p>由于 locate 指令基于数据库进行查询， 所以第一次运行前， 必须使用 updatedb 指令创建 locate 数据库。</p><h2 id="grep：过滤查找即“-”管道符"><a href="#grep：过滤查找即“-”管道符" class="headerlink" title="grep：过滤查找即“|”管道符"></a>grep：过滤查找即“|”管道符</h2><p>管道符，“|”，表示将前一个命令的处理结果输出通过管道传递给后面的命令进行处理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 选项 查找内容 源文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配行及行号</td></tr><tr><td>-v</td><td>反向匹配</td></tr></tbody></table><p>下面先使用cat命令查看1.txt的内容。</p><p>然后后面有使用了2种方式检索ready位于1.txt中所在行号及内容。</p><p>第1种：<code>grep -n ready 1.txt</code></p><p>第2种：<code>cat 1.txt | grep -n ready</code>，这里使用到了管道命令，将cat 1.txt的结果通过管道命令传递给 grep，grep将传递过来的内容作为查找目标</p><h2 id="which：在PATH下查找命令位置"><a href="#which：在PATH下查找命令位置" class="headerlink" title="which：在PATH下查找命令位置"></a>which：在PATH下查找命令位置</h2><p>这条命令主要是用来查找系统***PATH目录下/***的可执行文件，说白了就是查找那些我们已经安装好的可以直接执行的命令</p><p><code>which</code> 查找的可执行文件，必须是要在 PATH 下的可执行文件，而不能是没有加入 PATH 的可执行文件，即使他就是可执行文件，但是没有加入到系统搜索路径，他仍然无法被 <code>which</code> 发现（好吧，有点啰嗦了）。</p><h2 id="whereis：查找可执行文件路径"><a href="#whereis：查找可执行文件路径" class="headerlink" title="whereis：查找可执行文件路径"></a>whereis：查找可执行文件路径</h2><p><code>which</code>和<code>whereis</code>命令都是Linux操作系统下查找可执行文件路径的命令。</p><p><code>whereis</code>这个命令可以用来查找二进制（命令）、源文件、man文件。与<code>which</code>不同的是这条命令可以是通过文件索引数据库而非PATH来查找的，所以查找的面比<code>which</code>要广</p><p><img src="/images/img/blog/image-20220824173346503.png" alt="image-20220824173346503"></p><h1 id="3-13-解压缩"><a href="#3-13-解压缩" class="headerlink" title="3.13 解压缩"></a>3.13 解压缩</h1><h2 id="gzip-gunzip：压缩、解压"><a href="#gzip-gunzip：压缩、解压" class="headerlink" title="gzip/gunzip：压缩、解压"></a>gzip/gunzip：压缩、解压</h2><table><thead><tr><th>gzip 文件</th><th>压缩文件，只能将文件压缩为*.gz文件</th></tr></thead><tbody><tr><td>gunzip 文件.gz</td><td>解压文件</td></tr></tbody></table><ul><li>只能压缩文件不能压缩目录</li><li>不保留原来的文件</li><li>同时多个文件会产生多个压缩包</li></ul><h2 id="zip-unzip：压缩、解压"><a href="#zip-unzip：压缩、解压" class="headerlink" title="zip/unzip：压缩、解压"></a>zip/unzip：压缩、解压</h2><table><thead><tr><th>zip [选项] xxx.zip 要压缩的文件列(可以有多个)</th><th>压缩文件和目录的命令</th></tr></thead><tbody><tr><td>unzip [选项] xxx.zip</td><td>解压文件</td></tr></tbody></table><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr><tr><td><strong>unzip选项</strong></td><td><strong>功能</strong></td></tr><tr><td>-d 目录</td><td>指定解压后文件的存放目录</td></tr></tbody></table><p>zip压缩命令在windows/linux都通用，可以压缩目录且保留源文件</p><h2 id="tar：打包、解压（常用）"><a href="#tar：打包、解压（常用）" class="headerlink" title="tar：打包、解压（常用）"></a>tar：打包、解压（常用）</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar [选项] xxx.tar.gz 需要打包的文件列表</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定文件名</td></tr><tr><td>-z</td><td>用gzip对文件进行压缩或者解压</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr><tr><td>-C</td><td>解压到指定目录</td></tr></tbody></table><p>tar -czvf 打包后的文件.tar.gz 被打包的文件列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  b]# ls</span><br><span class="line">1.log  2.log</span><br><span class="line">[root@host2  b]# tar -czvf log.tar.gz 1.log 2.log </span><br><span class="line">1.log</span><br><span class="line">2.log</span><br><span class="line">[root@host2  b]# ls</span><br><span class="line">1.log  2.log  log.tar.gz</span><br></pre></td></tr></table></figure><p>tar -czvf 打包后的文件.tar.gz 被打包的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  b]# ls</span><br><span class="line">logs</span><br><span class="line">[root@host2  b]# ls logs/</span><br><span class="line">1.log  2.log</span><br><span class="line">[root@host2  b]# tar -czvf log.tar.gz logs/</span><br><span class="line">logs/</span><br><span class="line">logs/1.log</span><br><span class="line">logs/2.log</span><br><span class="line">[root@host2  b]# ls</span><br><span class="line">logs  log.tar.gz</span><br></pre></td></tr></table></figure><p>tar -xzvf 被解压的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  b]# ls</span><br><span class="line">log.tar.gz</span><br><span class="line">[root@host2  b]# tar -xzvf log.tar.gz </span><br><span class="line">logs/</span><br><span class="line">logs/1.log</span><br><span class="line">logs/2.log</span><br><span class="line">[root@host2  b]# ls</span><br><span class="line">logs  log.tar.gz</span><br><span class="line">[root@host2  b]# ls logs/</span><br><span class="line">1.log  2.log</span><br></pre></td></tr></table></figure><p>tar -xzvf 被解压的文件 -C 解压后的目标目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  b]# ls</span><br><span class="line">log.tar.gz</span><br><span class="line">[root@host2  b]# mkdir target</span><br><span class="line">[root@host2  b]# tar -xzvf log.tar.gz -C target/</span><br><span class="line">logs/</span><br><span class="line">logs/1.log</span><br><span class="line">logs/2.log</span><br><span class="line">[root@host2  b]# ls</span><br><span class="line">log.tar.gz  target</span><br><span class="line">[root@host2  b]# ls target/</span><br><span class="line">logs</span><br><span class="line">[root@host2  b]# ls target/logs/</span><br><span class="line">1.log  2.log</span><br></pre></td></tr></table></figure><h1 id="3-14-磁盘查看和分区类"><a href="#3-14-磁盘查看和分区类" class="headerlink" title="3.14 磁盘查看和分区类"></a>3.14 磁盘查看和分区类</h1><h3 id="du：查看文件和目录占用的磁盘空间"><a href="#du：查看文件和目录占用的磁盘空间" class="headerlink" title="du：查看文件和目录占用的磁盘空间"></a>du：查看文件和目录占用的磁盘空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du 目录&#x2F;文件</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-h</td><td>以人们交易阅读的GBytes，MBytes，KBytes等格式自行显示</td></tr><tr><td>-a</td><td>不仅查看子目录大小，还包括文件</td></tr><tr><td>-c</td><td>显示所有的文件和子目录大小后，显示总和</td></tr><tr><td>-s</td><td>只显示总和</td></tr><tr><td>—max-depth=n 或 -d n</td><td>指定统计子目录的深度为第n层</td></tr></tbody></table><h3 id="df：查看磁盘空间使用情况"><a href="#df：查看磁盘空间使用情况" class="headerlink" title="df：查看磁盘空间使用情况"></a>df：查看磁盘空间使用情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df [-h] # 以人们较易阅读的GBytes、MBytes、KBytes等格式显示大小</span><br></pre></td></tr></table></figure><h3 id="lsblk：查看设备挂载情况"><a href="#lsblk：查看设备挂载情况" class="headerlink" title="lsblk：查看设备挂载情况"></a>lsblk：查看设备挂载情况</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk [-f] [&lt;设备&gt; ...] #查看详细的设备挂载情况，显示文件系统信息</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220824174247379.png" alt="image-20220824174247379"></p><ul><li>NAME：设备名</li><li>FSTYPE：文件系统类型</li><li>UUID：文件系统ID</li><li>MOUNTPOINT：设备挂载点</li></ul><p><strong>lsblk 设备：查看某个设备挂载信息</strong></p><h3 id="mount：挂载"><a href="#mount：挂载" class="headerlink" title="mount：挂载"></a>mount：挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 设备 目录</span><br></pre></td></tr></table></figure><h3 id="umount：卸载"><a href="#umount：卸载" class="headerlink" title="umount：卸载"></a>umount：卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount &lt;设备&gt; | &lt;目录&gt;</span><br></pre></td></tr></table></figure><h1 id="3-15-进程"><a href="#3-15-进程" class="headerlink" title="3.15 进程"></a>3.15 进程</h1><h2 id="ps：查看当前系统进程状态"><a href="#ps：查看当前系统进程状态" class="headerlink" title="ps：查看当前系统进程状态"></a>ps：查看当前系统进程状态</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>ps aux</td><td>查看系统中所有进程</td></tr><tr><td>ps -ef</td><td>可以查看父子进程之间的关系</td></tr></tbody></table><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>列出带有终端的所有用户的进程</td></tr><tr><td>x</td><td>列出当前用户的所有进程，包括没有终端的进程</td></tr><tr><td>u</td><td>面相用户友好的显示风格</td></tr><tr><td>-e</td><td>列出所有进程</td></tr><tr><td>-u</td><td>列出某个用户关联的所有进程</td></tr><tr><td>-f</td><td>显示完整格式的进程列表</td></tr></tbody></table><h3 id="ps-aux：查看进程CPU、内存占用率"><a href="#ps-aux：查看进程CPU、内存占用率" class="headerlink" title="ps aux：查看进程CPU、内存占用率"></a>ps aux：查看进程CPU、内存占用率</h3><p><img src="/images/img/blog/image-20220824174623979.png" alt="image-20220824174623979"></p><ul><li>USER： 该进程是由哪个用户产生的</li><li>PID： 进程的 ID 号</li><li>%CPU： 该进程占用 CPU 资源的百分比， 占用越高， 进程越耗费资源</li><li>%MEM： 该进程占用物理内存的百分比， 占用越高， 进程越耗费资源</li><li>VSZ： 该进程占用虚拟内存的大小， 单位 KB</li><li>RSS： 该进程占用实际物理内存的大小， 单位 KB</li><li>TTY： 该进程是在哪个终端中运行的。 对于 CentOS 来说， tty1 是图形化终端，tty2-tty6 是本地的字符界面终端。 pts/0-255 代表虚拟终端。</li><li>STAT： 进程状态，常见的状态有：<ul><li>R： 运行状态</li><li>S： 睡眠状态</li><li>T： 暂停状态</li><li>Z： 僵尸状态</li><li>s： 包含子进程</li><li>l： 多线程</li><li>+： 前台显示</li></ul></li><li>START： 该进程的启动时间</li><li>TIME： 该进程占用 CPU 的运算时间， 注意不是系统时间</li><li>COMMAND： 产生此进程的命令名</li></ul><h3 id="ps-ef：显示父子进程信息"><a href="#ps-ef：显示父子进程信息" class="headerlink" title="ps -ef：显示父子进程信息"></a>ps -ef：显示父子进程信息</h3><p>如果想查看进程的 CPU 占用率和内存占用率， 可以使用 <code>ps aux</code></p><p>如果想查看进程的父进程 ID 可以使用 <code>ps ef</code></p><p><img src="/images/img/blog/image-20220824174736344.png" alt="image-20220824174736344"></p><ul><li>UID： 用户 ID</li><li>PID： 进程 ID</li><li>PPID： 父进程 ID</li><li>C： CPU 用于计算执行优先级的因子。 数值越大， 表明进程是 CPU 密集型运算，执行优先级会降低； 数值越小， 表明进程是 I/O 密集型运算， 执行优先级会提高</li><li>STIME： 进程启动的时间</li><li>TTY： 完整的终端名称</li><li>TIME： CPU 时间</li><li>CMD： 启动进程所用的命令和参数</li></ul><h3 id="ps-Lf-pid：查看某个进程的所有内核线程"><a href="#ps-Lf-pid：查看某个进程的所有内核线程" class="headerlink" title="ps -Lf pid：查看某个进程的所有内核线程"></a>ps -Lf pid：查看某个进程的所有内核线程</h3><h2 id="kill：终止进程"><a href="#kill：终止进程" class="headerlink" title="kill：终止进程"></a>kill：终止进程</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>kill [-9] 进程号</td><td>通过进程号杀死进程  -9：表示强迫进程立即执行</td></tr><tr><td>killall 进程名称</td><td>通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用</td></tr></tbody></table><h2 id="pstree：查看树进程"><a href="#pstree：查看树进程" class="headerlink" title="pstree：查看树进程"></a>pstree：查看树进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree [选项] #-p 显示进程的PID -u 显示进程的所属用户</span><br></pre></td></tr></table></figure><h4 id="查看一个特定的进程-pstree-s-PID"><a href="#查看一个特定的进程-pstree-s-PID" class="headerlink" title="查看一个特定的进程 pstree -s [PID]"></a>查看一个特定的进程 pstree -s [PID]</h4><h2 id="top：实时监控系统状态"><a href="#top：实时监控系统状态" class="headerlink" title="top：实时监控系统状态"></a>top：实时监控系统状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [选项]</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-d 秒数</td><td>指定top命令每隔几秒刷新一下结果，默认是3秒在top命令的交互模式当中可以执行命令</td></tr><tr><td>-i</td><td>使top不显示任何闲置或者僵死进程</td></tr><tr><td>-p</td><td>通过指定监控进程ID来监控某个进程的状态</td></tr><tr><td>-c</td><td>显示整个命令行而不只是显示命令名</td></tr></tbody></table><p><img src="/images/img/blog/image-20220824175123761.png" alt="image-20220824175123761"></p><h4 id="第1行信息为任务队列信息"><a href="#第1行信息为任务队列信息" class="headerlink" title="第1行信息为任务队列信息"></a>第1行信息为任务队列信息</h4><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>12:26:46</td><td>系统当前时间</td></tr><tr><td>up 1 day, 13:32</td><td>系统的运行时间，本金以运行1天13小时32分</td></tr><tr><td>2 users</td><td>当前登录了2个用户</td></tr><tr><td>load average: 0.00, 0.00, 0.00</td><td>系统在之前 1 分钟， 5 分钟， 15 分钟的平均负 载。 一般认为小于 1 时， 负载较小。 如果大于 1， 系统已经超出负荷</td></tr></tbody></table><h4 id="（2）第2行为进程信息"><a href="#（2）第2行为进程信息" class="headerlink" title="（2）第2行为进程信息"></a>（2）第2行为进程信息</h4><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Tasks: 95 total</td><td>系统中的进程总数</td></tr><tr><td>1 running</td><td>正在运行的进程数</td></tr><tr><td>94 sleeping</td><td>睡眠的进程数</td></tr><tr><td>0 stopped</td><td>正在停止的进程数</td></tr><tr><td>0 zombie</td><td>僵尸进程。 如果不是 0， 需要手工检查僵尸进程</td></tr></tbody></table><h4 id="（3）第3行为CPU信息"><a href="#（3）第3行为CPU信息" class="headerlink" title="（3）第3行为CPU信息"></a>（3）第3行为CPU信息</h4><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>us</td><td>用户空间占用的 CPU 百分比</td></tr><tr><td>sy</td><td>内核空间占用的 CPU 百分比</td></tr><tr><td>ni</td><td>改变过优先级的用户进程占用的 CPU 百分比</td></tr><tr><td>id</td><td>空闲 CPU 百分比</td></tr><tr><td>wa</td><td>等待输入/输出的进程的占用 CPU 百分比</td></tr><tr><td>hi</td><td>硬中断请求服务占用的 CPU 百分比</td></tr><tr><td>si</td><td>软中断请求服务占用的 CPU 百分比</td></tr><tr><td>st</td><td>st（ Steal time） 虚拟时间百分比。 就是当有虚拟 机时， 虚拟 CPU 等待实际 CPU 的时间百分比。</td></tr></tbody></table><h4 id="（4）第4行为物理内存信息"><a href="#（4）第4行为物理内存信息" class="headerlink" title="（4）第4行为物理内存信息"></a>（4）第4行为物理内存信息</h4><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>物理内存的总量， 单位 KB</td></tr><tr><td>used</td><td>已经使用的物理内存数量</td></tr><tr><td>free</td><td>空闲的物理内存重量</td></tr><tr><td>buffers</td><td>作为缓冲的内存数量</td></tr></tbody></table><h4 id="（5）第5行为交换分区信息"><a href="#（5）第5行为交换分区信息" class="headerlink" title="（5）第5行为交换分区信息"></a>（5）第5行为交换分区信息</h4><table><thead><tr><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>Swap: 524280k total</td><td>交换分区（虚拟内存） 的总大小</td></tr><tr><td>0k used</td><td>已经使用的交换分区的大小</td></tr><tr><td>524280k free</td><td>空闲交换分区的大小</td></tr><tr><td>409280k cached</td><td>作为缓存的交换分区的大小</td></tr></tbody></table><h4 id="（6）进程信息区"><a href="#（6）进程信息区" class="headerlink" title="（6）进程信息区"></a>（6）进程信息区</h4><ul><li>PID 进程id</li><li>PPID 父进程id</li><li>USER Real user name</li><li>UID 进程所有者的用户id</li><li>USER 进程所有者的用户名</li><li>GROUP 进程所有者的组名</li><li>TTY 启动进程的终端名。不是从终端启动的进程则显示为 ?</li><li>PR 优先级</li><li>NI nice值。负值表示高优先级，正值表示低优先级</li><li>P 最后使用的CPU，仅在多CPU环境下有意义</li><li>%CPU 上次更新到现在的CPU时间占用百分比</li><li>TIME 进程使用的CPU时间总计，单位秒</li><li>TIME+ 进程使用的CPU时间总计，单位1/100秒</li><li>%MEM 进程使用的物理内存百分比</li><li>VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</li><li>SWAP 进程使用的虚拟内存中，被换出的大小，单位kb</li><li>RES 进程使用的、未被换出的物理内存大小，单位kb，RES=CODE+DATA</li><li>CODE 可执行代码占用的物理内存大小，单位kb</li><li>DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</li><li>SHR 共享内存大小，单位kb</li><li>nFLT 页面错误次数</li><li>nDRT 最后一次写入到现在，被修改过的页面数。</li><li>S 进程状态。<ul><li>D=不可中断的睡眠状态</li><li>R=运行</li><li>S=睡眠</li><li>T=跟踪/停止</li><li>Z=僵尸进程</li></ul></li><li>COMMAND 命令名/命令行</li></ul><p><strong>显示进程1的状态信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p 44712</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220824175553982.png" alt="image-20220824175553982"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -b -d 2.5 -n 5 &gt; top.txt #-b 批处理</span><br></pre></td></tr></table></figure><p><strong>2500 毫秒刷新一次 TOP 内容，总共 5 次，输出内容存放到 1.txt 文件中</strong></p><h2 id="netstat：显示网络状态和端口占用信息"><a href="#netstat：显示网络状态和端口占用信息" class="headerlink" title="netstat：显示网络状态和端口占用信息"></a>netstat：显示网络状态和端口占用信息</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>netstat -anp /| grep 进程号</td><td>查看该进程网络信息</td></tr><tr><td>netstat –nlp /| grep 端口号</td><td>查看网络端口号占用情况</td></tr></tbody></table><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>显示所有正在监听（listen） 和未监听的套接字（socket）</td></tr><tr><td>-n</td><td>拒绝显示别名， 能显示数字的全部转化成数字</td></tr><tr><td>-l</td><td>仅列出在监听的服务状态</td></tr><tr><td>-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><p><img src="/images/img/blog/image-20220824175839886.png" alt="image-20220824175839886"></p><ul><li><strong>LISTEN</strong>： 侦听来自远方的TCP端口的连接请求</li><li><strong>SYN-SENT</strong>： 再发送连接请求后等待匹配的连接请求</li><li><strong>SYN-RECEIVED</strong>：再收到和发送一个连接请求后等待对方对连接请求的确认</li><li><strong>ESTABLISHED</strong>： 代表一个打开的连接</li><li><strong>FIN-WAIT-1</strong>： 等待远程TCP连接中断请求，或先前的连接中断请求的确认</li><li><strong>FIN-WAIT-2</strong>： 从远程TCP等待连接中断请求</li><li><strong>CLOSE-WAIT</strong>： 等待从本地用户发来的连接中断请求</li><li><strong>CLOSING</strong>： 等待远程TCP对连接中断的确认</li><li><strong>LAST-ACK</strong>： 等待原来的发向远程TCP的连接中断请求的确认</li><li><strong>TIME-WAIT</strong>： 等待足够的时间以确保远程TCP接收到连接中断请求的确认</li><li><strong>CLOSED</strong>： 没有任何连接状态</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltp | grep 22</span><br></pre></td></tr></table></figure><h1 id="3-16-定时任务"><a href="#3-16-定时任务" class="headerlink" title="3.16 定时任务"></a>3.16 定时任务</h1><h2 id="需开启crond服务"><a href="#需开启crond服务" class="headerlink" title="需开启crond服务"></a>需开启crond服务</h2><p>Linux <strong>crontab</strong> 是用来定期执行程序的命令。</p><p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p><p><strong>crond</strong> 命令每分钟会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p><p>若crond服务没有启动，则执行下面命令启动下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  java]# systemctl restart crond</span><br></pre></td></tr></table></figure><h2 id="19-2、crontab：定时任务设置"><a href="#19-2、crontab：定时任务设置" class="headerlink" title="19.2、crontab：定时任务设置"></a>19.2、crontab：定时任务设置</h2><h3 id="1）基础语法"><a href="#1）基础语法" class="headerlink" title="1）基础语法"></a>1）基础语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab [选项]</span><br></pre></td></tr></table></figure><p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p><p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p><h3 id="2）选项说明"><a href="#2）选项说明" class="headerlink" title="2）选项说明"></a>2）选项说明</h3><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>编辑 crontab 定时任务</td></tr><tr><td>-l</td><td>查询 crontab 定时任务</td></tr><tr><td>-r</td><td>删除当前用户所有的crontab任务</td></tr></tbody></table><h3 id="3）添加任务"><a href="#3）添加任务" class="headerlink" title="3）添加任务"></a>3）添加任务</h3><h4 id="（1）编辑任务"><a href="#（1）编辑任务" class="headerlink" title="（1）编辑任务"></a>（1）编辑任务</h4><blockquote><p>执行<code>crontab -e</code>命令进入定时任务编辑界面，操作过程按照vim编辑文件的过程，每行为一个定时任务，保存之后，定时任务设置成功。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  java]# crontab -e* * * * * date &gt;&gt; &#x2F;root&#x2F;2.txt* * * * * date &gt;&gt; &#x2F;root&#x2F;4.txt</span><br></pre></td></tr></table></figure><h4 id="（2）任务格式"><a href="#（2）任务格式" class="headerlink" title="（2）任务格式"></a>（2）任务格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * 执行的任务</span><br></pre></td></tr></table></figure><table><thead><tr><th>项目</th><th>含义</th><th>范围</th></tr></thead><tbody><tr><td>第一个“*”</td><td>一小时当中的第几分钟</td><td>0-59</td></tr><tr><td>第二个“*”</td><td>一天当中的第几小时</td><td>0-23</td></tr><tr><td>第三个“*”</td><td>一个月当中的第几天</td><td>1-31</td></tr><tr><td>第四个“*”</td><td>一年当中的第几月</td><td>1-12</td></tr><tr><td>第五个“*”</td><td>一周当中的星期几</td><td>0-7 （ 0 和 7 都 代 表 星 期 日）</td></tr></tbody></table><h4 id="（3）特殊符号说明"><a href="#（3）特殊符号说明" class="headerlink" title="（3）特殊符号说明"></a>（3）特殊符号说明</h4><table><thead><tr><th>特殊符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任何时间。 比如第一个“ *” 就代表一小时中每分钟 都执行一次的意思。</td></tr><tr><td>，</td><td>代表不连续的时间。 比如“ 0 8,12,16 * 命令”， 就代表 在每天的 8 点 0 分， 12 点 0 分， 16 点 0 分都执行一次命令</td></tr><tr><td>-</td><td>代表连续的时间范围。 比如“0 5 1-6 命令”， 代表在 周一到周六的凌晨 5 点 0 分执行命令</td></tr><tr><td>*/n</td><td>代表每隔多久执行一次。 比如“*/10* * 命令”， 代 表每隔 10 分钟就执行一遍命令</td></tr></tbody></table><h4 id="（4）-特定时间执行命令"><a href="#（4）-特定时间执行命令" class="headerlink" title="（4） 特定时间执行命令"></a>（4） 特定时间执行命令</h4><table><thead><tr><th>时间</th><th>含义</th></tr></thead><tbody><tr><td>45 22 * 命令</td><td>每天 22 点 45 分执行命令</td></tr><tr><td>0 17 1 命令</td><td>每周 1 的 17 点 0 分执行命令</td></tr><tr><td>0 5 1,15 命令</td><td>每月 1 号和 15 号的凌晨 5 点 0 分执行命令</td></tr><tr><td>40 4 1-5 命令</td><td>每周一到周五的凌晨 4 点 40 分执行命令</td></tr><tr><td><em>/10 4</em> 命令</td><td>每天的凌晨 4 点， 每隔 10 分钟执行一次命令</td></tr><tr><td>0 0 1,15 * 1 命令</td><td>每月 1 号和 15 号， 每周 1 的 0 点 0 分都会执行命令。 注 意： 星期几和几号最好不要同时出现， 因为他们定义的都 是天。 非常容易让管理员混乱。</td></tr></tbody></table><h2 id="19-3、案例"><a href="#19-3、案例" class="headerlink" title="19.3、案例"></a>19.3、案例</h2><h3 id="（1）当前用户添加一个任务"><a href="#（1）当前用户添加一个任务" class="headerlink" title="（1）当前用户添加一个任务"></a>（1）当前用户添加一个任务</h3><blockquote><p>每隔一分钟将当前时间输出到/root/date.txt文件中</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * * date &gt;&gt; &#x2F;root&#x2F;date.txt</span><br></pre></td></tr></table></figure><h3 id="（2）参看当前用户任务列表"><a href="#（2）参看当前用户任务列表" class="headerlink" title="（2）参看当前用户任务列表"></a>（2）参看当前用户任务列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  java]# crontab -l* * * * * date &gt;&gt; &#x2F;root&#x2F;2.txt* * * * * date &gt;&gt; &#x2F;root&#x2F;4.txt</span><br></pre></td></tr></table></figure><h3 id="（3）删除当前用户所有任务"><a href="#（3）删除当前用户所有任务" class="headerlink" title="（3）删除当前用户所有任务"></a>（3）删除当前用户所有任务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# crontab -l* * * * * date &gt;&gt; &#x2F;root&#x2F;2.txt* * * * * date &gt;&gt; &#x2F;root&#x2F;4.txt[root@host2  bin]# crontab -r[root@host2  bin]# crontab -lno crontab for root</span><br></pre></td></tr></table></figure><h3 id="（4）如果想删除某个任务怎么办呢？"><a href="#（4）如果想删除某个任务怎么办呢？" class="headerlink" title="（4）如果想删除某个任务怎么办呢？"></a>（4）如果想删除某个任务怎么办呢？</h3><p>可以通过<code>crontab -e</code>编辑定时任务列表实现增删改。</p><h1 id="3-17-软件包管理"><a href="#3-17-软件包管理" class="headerlink" title="3.17 软件包管理"></a>3.17 软件包管理</h1><h3 id="RPM-概述"><a href="#RPM-概述" class="headerlink" title="RPM 概述"></a>RPM 概述</h3><p>RPM（RedHat Package Manager）， RedHat软件包管理工具， 类似windows里面的setup.exe，是Linux这系列操作系统里面的打包安装工具， 它虽然是RedHat的标志， 但理念是通用的。</p><p>RPM包的名称格式</p><p>Apache-1.3.23-11.i386.rpm</p><ul><li>“apache” 软件名称</li><li>“1.3.23-11”软件的版本号， 主版本和此版本</li><li>“i386”是软件所运行的硬件平台， Intel 32位处理器的统称</li><li>“rpm”文件扩展名， 代表RPM包</li></ul><h3 id="RPM-查询命令（rpm-qa）"><a href="#RPM-查询命令（rpm-qa）" class="headerlink" title="RPM 查询命令（rpm -qa）"></a>RPM 查询命令（rpm -qa）</h3><h4 id="基本语法-3"><a href="#基本语法-3" class="headerlink" title="基本语法"></a>基本语法</h4><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>rpm -q 程序包名称</td><td>查询指定程序包是否安装</td></tr><tr><td>rpm -qa</td><td>显示当前系统中所有rpm程序包列表</td></tr><tr><td>rpm -qi 程序包名称</td><td>查看指定程序包的名称、版本、许可协议、用途描述等详细信息</td></tr><tr><td>rpm -ql 程序包名称</td><td>显示指定的程序包在当前系统中安装的所有目录、文件列表</td></tr><tr><td>rpm -qf 文件名或目录</td><td>查看指定的文件或目录是由哪个程序包所安装的</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep docker</span><br></pre></td></tr></table></figure><p><img src="E:\work\wyl\hexo\myBlog\source\images\img\blog\image-20220825103657401.png" alt="image-20220825103657401"></p><p>由于软件包比较多，一般都会采取过滤，rpm -qa|grep rpm软件包</p><p><img src="/images/img/blog/image-20220824180237668.png" alt="image-20220824180237668"></p><h3 id="RPM-卸载命令（rpm-e）"><a href="#RPM-卸载命令（rpm-e）" class="headerlink" title="RPM 卸载命令（rpm -e）"></a>RPM 卸载命令（rpm -e）</h3><ul><li>rpm -e RPM软件包</li><li>rpm -e —nodeps 软件包</li></ul><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>—nodeps</td><td>卸载软件时，不检查依赖，这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -e docke docker-ce-19.03.4-3.el7.x86_64</span><br><span class="line">rpm -e docke docker-ce-cli-19.03.4-3.el7.x86_64</span><br></pre></td></tr></table></figure><h3 id="RPM-安装命令（rpm-ivh）"><a href="#RPM-安装命令（rpm-ivh）" class="headerlink" title="RPM 安装命令（rpm -ivh）"></a>RPM 安装命令（rpm -ivh）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh RPM包全名</span><br></pre></td></tr></table></figure><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-i</td><td>install， 安装</td></tr><tr><td>-v</td><td>—verbose， 显示详细信息</td></tr><tr><td>-h</td><td>—hash， 进度条</td></tr><tr><td>—nodeps</td><td>就是安装时不检查依赖关系，比如你这个rpm需要A，但是你没装A，这样你的包就装不上，用了—nodeps你就能装上了</td></tr><tr><td>—force</td><td>就是强制安装，比如你装过这个rpm的版本1，如果你想装这个rpm的版本2，就需要用—force强制安装</td></tr></tbody></table><p>安装dockers: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh *.rpm --force --nodeps</span><br></pre></td></tr></table></figure><p><img src="E:\work\wyl\hexo\myBlog\source\images\img\blog\image-20220825103953971.png" alt="image-20220825103953971"></p><h1 id="3-18-防火墙"><a href="#3-18-防火墙" class="headerlink" title="3.18 防火墙"></a>3.18 防火墙</h1><h2 id="1、查看防火墙状态"><a href="#1、查看防火墙状态" class="headerlink" title="1、查看防火墙状态"></a>1、查看防火墙状态</h2><ul><li>查看防火墙状态 systemctl status firewalld</li><li>开启防火墙 systemctl start firewalld</li><li>关闭防火墙 systemctl stop firewalld</li><li>若遇到无法开启<ul><li>先用：systemctl unmask firewalld.service</li><li>然后：systemctl start firewalld.service</li></ul></li></ul><h2 id="2、查看对外开放的端口状态"><a href="#2、查看对外开放的端口状态" class="headerlink" title="2、查看对外开放的端口状态"></a>2、查看对外开放的端口状态</h2><ul><li>查询已开放的端口（已开放的端口号集合）：<code>firewall-cmd --zone=public --list-ports</code></li><li>查询已开放的端口 <code>netstat -ntulp | grep 端口号</code>：可以具体查看某一个端口号</li><li>查询指定端口是否已开 <code>firewall-cmd --query-port=666/tcp</code>，提示 yes，表示开启；no表示未开启。</li></ul><h2 id="3、对外开发端口"><a href="#3、对外开发端口" class="headerlink" title="3、对外开发端口"></a>3、对外开发端口</h2><ul><li>查看想开的端口是否已开：<code>firewall-cmd --query-port=6379/tcp</code></li><li>添加指定需要开放的端口：<code>firewall-cmd --add-port=123/tcp --permanent</code></li><li>重载入添加的端口：<code>firewall-cmd --reload</code></li><li>查询指定端口是否开启成功：<code>firewall-cmd --query-port=123/tcp</code></li><li>移除指定端口：<code>firewall-cmd --permanent --remove-port=123/tcp</code></li></ul><h1 id="3-19-用户管理"><a href="#3-19-用户管理" class="headerlink" title="3.19 用户管理"></a>3.19 用户管理</h1><h2 id="useradd：添加新用户"><a href="#useradd：添加新用户" class="headerlink" title="useradd：添加新用户"></a>useradd：添加新用户</h2><p><strong>1）基本语法</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>useradd 用户名</td><td>添加新用户</td></tr><tr><td>useradd -g 组名 用户名</td><td>添加新用户到某个组</td></tr></tbody></table><p><strong>2）案例</strong></p><p><strong>（1）添加一个新用户：tom</strong></p><p>添加用户时，默认会在/home目录生成一个和用户名同名的用户的家目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# useradd tom[root@host2  bin]# ll &#x2F;home总用量 0drwx------. 3 tom tom 78 5月   3 16:31 tom</span><br></pre></td></tr></table></figure><h2 id="passwd：设置用户密码"><a href="#passwd：设置用户密码" class="headerlink" title="passwd：设置用户密码"></a>passwd：设置用户密码</h2><p><strong>1）基本语法</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>passwd 用户名</td><td>为指定的用户设置密码</td></tr></tbody></table><p><strong>2）案例</strong></p><p><strong>（1）给用户tom设置密码</strong></p><p>会提示输入密码，输入过程屏幕上不会显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# passwd tom</span><br></pre></td></tr></table></figure><h2 id="id：查看用户是否存在"><a href="#id：查看用户是否存在" class="headerlink" title="id：查看用户是否存在"></a>id：查看用户是否存在</h2><p><strong>1）基本语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><p><strong>2）案例</strong></p><p><strong>（1）查看tom、jack是否存在</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# id tomuid&#x3D;1001(tom) gid&#x3D;1001(tom) 组&#x3D;1001(tom)[root@host2  bin]# id jackid: jack: no such user</span><br></pre></td></tr></table></figure><h2 id="cat-etc-passwd：查看创建了哪些用户"><a href="#cat-etc-passwd：查看创建了哪些用户" class="headerlink" title="cat /etc/passwd：查看创建了哪些用户"></a>cat /etc/passwd：查看创建了哪些用户</h2><p>所有创建的用户在<code>/etc/passwd</code>文件中都会有记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2  bin]# cat &#x2F;etc&#x2F;passwd</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20220824180756485.png" alt="image-20220824180756485"></p><h2 id="su：切换用户"><a href="#su：切换用户" class="headerlink" title="su：切换用户"></a>su：切换用户</h2><p>su：swith user的意思，表示切换用户</p><p><strong>1）基本语法</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>su 用户名</td><td>切换到目标用户，只能获得目标用户的执行权限，不能获得其环境变量</td></tr><tr><td>su - 用户名</td><td>切换到目标用户并获得目标用户的环境变量及执行权限</td></tr></tbody></table><h2 id="userdel：删除用户"><a href="#userdel：删除用户" class="headerlink" title="userdel：删除用户"></a>userdel：删除用户</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>userdel 用户名</td><td>删除用户，但会保留用户的主目录（即家目录）</td></tr><tr><td>userdel -r 用户名</td><td>删除用户及其主目录（即家目录）-r 删除用户的同时，删除与用户相关的所有文件</td></tr></tbody></table><h2 id="who：查看登录用户信息"><a href="#who：查看登录用户信息" class="headerlink" title="who：查看登录用户信息"></a>who：查看登录用户信息</h2><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>whoami</td><td>显示当前用户名称</td></tr><tr><td>who am i</td><td>显示登录用户的用户名以及登录时间</td></tr></tbody></table><h2 id="udo：设置普通用户具有root权限"><a href="#udo：设置普通用户具有root权限" class="headerlink" title="udo：设置普通用户具有root权限"></a>udo：设置普通用户具有root权限</h2><p><em>sudo</em>是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，用法：<code>sudo 管理员命令</code></p><p><strong>1）添加ready用户，并设置其密码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# useradd tom[root@host2 bin]# passwd tom</span><br></pre></td></tr></table></figure><p><strong>2）修改配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# vi &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><p>修改/etc/sudoers文件，找到下面一行，在root下面添加一行，如下图所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere root    ALL&#x3D;(ALL)     ALLtom    ALL&#x3D;(ALL)     ALL</span><br></pre></td></tr></table></figure><p>或者配置成采用sudo命令是，不需要输入密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere root    ALL&#x3D;(ALL)     ALLtom    ALL&#x3D;(ALL)     NOPASSWD:ALL</span><br></pre></td></tr></table></figure><p>修改完毕，现在可以用tom账号登录，在需要执行的命令前面加上sudo，即可获得root权限进行操作.</p><h2 id="usermod：修改用户"><a href="#usermod：修改用户" class="headerlink" title="usermod：修改用户"></a>usermod：修改用户</h2><p><strong>基本语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [选项] 用户名</span><br></pre></td></tr></table></figure><p><strong>2）选项说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-c, --comment 注释            GECOS 字段的新值</span><br><span class="line">-d, --home HOME_DIR           用户的新主目录</span><br><span class="line">-e, --expiredate EXPIRE_DATE  设定帐户过期的日期为 EXPIRE_DATE</span><br><span class="line">-f, --inactive INACTIVE       过期 INACTIVE 天数后，设定密码为失效状态</span><br><span class="line">-g, --gid GROUP               强制使用 GROUP 为新主组</span><br><span class="line">-G, --groups GROUPS           新的附加组列表 GROUPS</span><br><span class="line">-a, --append GROUP            将用户追加至上边 -G 中提到的附加组中，</span><br><span class="line">                              并不从其它组中删除此用户</span><br><span class="line">-h, --help                    显示此帮助信息并推出</span><br><span class="line">-l, --login LOGIN             新的登录名称</span><br><span class="line">-L, --lock                    锁定用户帐号</span><br><span class="line">-m, --move-home               将家目录内容移至新位置 (仅于 -d 一起使用)</span><br><span class="line">-o, --non-unique              允许使用重复的(非唯一的) UID</span><br><span class="line">-p, --password PASSWORD       将加密过的密码 (PASSWORD) 设为新密码</span><br><span class="line">-R, --root CHROOT_DIR         chroot 到的目录</span><br><span class="line">-P, --prefix PREFIX_DIR       prefix directory where are located the &#x2F;etc&#x2F;* files</span><br><span class="line">-s, --shell SHELL             该用户帐号的新登录 shell</span><br><span class="line">-u, --uid UID                 用户帐号的新 UID</span><br><span class="line">-U, --unlock                  解锁用户帐号</span><br><span class="line">-v, --add-subuids FIRST-LAST  add range of subordinate uids</span><br><span class="line">-V, --del-subuids FIRST-LAST  remove range of subordinate uids</span><br><span class="line">-w, --add-subgids FIRST-LAST  add range of subordinate gids</span><br><span class="line">-W, --del-subgids FIRST-LAST  remove range of subordinate gids</span><br><span class="line">-Z, --selinux-user  SEUSER       用户账户的新 SELinux 用户映射</span><br></pre></td></tr></table></figure><p><strong>usermod -g：修改用户组</strong></p><blockquote><p>一个用户可以有一个主要组和多个附加组</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# useradd jack</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;1006(jack) 组&#x3D;1006(jack)</span><br><span class="line">[root@host2 bin]# usermod -g root jack</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root)</span><br></pre></td></tr></table></figure><p><strong>（2）usermodel -G：指定用户附加组列表</strong></p><blockquote><p>可以给用户指定多个附加组，语法：<code>usermod -G 附加组1[,附加组n]</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# groupadd gr1</span><br><span class="line">[root@host2 bin]# groupadd gr2</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root)</span><br><span class="line">[root@host2 bin]# usermod -G gr1 jack</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1)</span><br><span class="line">[root@host2 bin]# usermod -G gr1,gr2 jack</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2)</span><br></pre></td></tr></table></figure><p><strong>（3）usermod -a -G 组名 ：给用户添加附加组</strong></p><blockquote><p><code>usermod -G</code>用来设置用户的附加组，如果我们想给用户添加一个附加组，那么就需要用到-a命令了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2)</span><br><span class="line">[root@host2 bin]# groupadd gr3</span><br><span class="line">[root@host2 bin]# usermod -a -G gr3 jack</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2),1009(gr3)</span><br></pre></td></tr></table></figure><p><strong>（3）grpasswd：添加或删除附加用户组</strong></p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>gpasswd -a userA groupB</td><td>给用户userA添加附加用户组groupB</td></tr><tr><td>gpaswd -d userA groupB</td><td>将groupB从用户userA的附加组中移除</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2),1009(gr3)</span><br><span class="line">[root@host2 bin]# gpasswd -d jack gr3</span><br><span class="line">正在将用户“jack”从“gr3”组中删除</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2)</span><br><span class="line">[root@host2 bin]# gpasswd -a jack gr3</span><br><span class="line">正在将用户“jack”加入到“gr3”组中</span><br><span class="line">[root@host2 bin]# id jack</span><br><span class="line">uid&#x3D;1004(jack) gid&#x3D;0(root) 组&#x3D;0(root),1007(gr1),1008(gr2),1009(gr3)</span><br></pre></td></tr></table></figure><h1 id="3-20-用户组"><a href="#3-20-用户组" class="headerlink" title="3.20 用户组"></a>3.20 用户组</h1><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux系统对用户组的规定有所不同。</p><p>如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p><h2 id="groupadd：创建用户组"><a href="#groupadd：创建用户组" class="headerlink" title="groupadd：创建用户组"></a>groupadd：创建用户组</h2><p><strong>1）语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure><p><strong>2）案例</strong></p><p><strong>（1）添加用户组group1</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# groupadd group1</span><br></pre></td></tr></table></figure><h2 id="groupdel：删除用户组"><a href="#groupdel：删除用户组" class="headerlink" title="groupdel：删除用户组"></a>groupdel：删除用户组</h2><p><strong>1）语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><p><strong>2）案例</strong></p><p><strong>（1）删除group1组</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# groupdel group1</span><br></pre></td></tr></table></figure><h2 id="groupmod：修改用户组组名"><a href="#groupmod：修改用户组组名" class="headerlink" title="groupmod：修改用户组组名"></a>groupmod：修改用户组组名</h2><p><strong>1）语法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod -n 新组名 老组名</span><br></pre></td></tr></table></figure><p><strong>2）案例</strong></p><p><strong>（1）修改grou1的组名为group2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host2 bin]# groupadd group1</span><br><span class="line">[root@host2 bin]# groupmod -n group2 group1</span><br></pre></td></tr></table></figure><h1 id="3-21-yum"><a href="#3-21-yum" class="headerlink" title="3.21 yum"></a>3.21 yum</h1><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。</p><p>基于 RPM 包管理，能够从指定的服务器自动下载 RPM 包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</p><p>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令，而且命令简洁而又好记。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum [options] [command] [package ...]</span><br></pre></td></tr></table></figure><ul><li><strong>options：</strong>可选，选项包括-h（帮助），-y（当安装过程提示选择全部为 “yes”），-q（不显示安装的过程）等等。</li><li><strong>command：</strong>要进行的操作。</li><li><strong>package：</strong>安装的包名。</li></ul><h2 id="yum常用命令"><a href="#yum常用命令" class="headerlink" title="yum常用命令"></a>yum常用命令</h2><ul><li><ol><li>列出所有可更新的软件清单命令：<strong>yum check-update</strong></li></ol></li><li><ol start="2"><li>更新所有软件命令：<strong>yum update</strong></li></ol></li><li><ol start="3"><li>仅安装指定的软件命令：<strong>yum install <package_name></strong></li></ol></li><li><ol start="4"><li>仅更新指定的软件命令：<strong>yum update <package_name></strong></li></ol></li><li><ol start="5"><li>列出所有可安裝的软件清单命令：<strong>yum list</strong></li></ol></li><li><ol start="6"><li>删除软件包命令：<strong>yum remove <package_name></strong></li></ol></li><li><ol start="7"><li>查找软件包命令：<strong>yum search <keyword></strong></li></ol></li><li><ol start="8"><li>清除缓存命令:</li></ol><ul><li><strong>yum clean packages</strong>: 清除缓存目录下的软件包</li><li><strong>yum clean headers</strong>: 清除缓存目录下的 headers</li><li><strong>yum clean oldheaders</strong>: 清除缓存目录下旧的 headers</li><li><strong>yum clean, yum clean all (= yum clean packages; yum clean oldheaders)</strong> :清除缓存目录下的软件包及旧的 head</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> secondstage </tag>
            
            <tag> shell,linux,centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux双机热备</title>
      <link href="2022/06/07/Linux/linux%20%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/"/>
      <url>2022/06/07/Linux/linux%20%E5%8F%8C%E6%9C%BA%E7%83%AD%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装教程为离线安装，主要是实现功能：ip飘移，mysql主主同步，文件同步</p></blockquote><h3 id="安装MySql"><a href="#安装MySql" class="headerlink" title="安装MySql"></a>安装MySql</h3><p>卸载MariaDB:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mariadb</span><br><span class="line"></span><br><span class="line">rpm -e mariadb-libs-5.5.60-1.el7_5.x86_64 --nodeps <span class="comment"># 有几个就删除几个</span></span><br></pre></td></tr></table></figure><p>解压mysql: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><p>安装mysql: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.18-1.el7.x86_64.rpm --nodeps --force</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-libs-8.0.18-1.el7.x86_64.rpm --nodeps --force </span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-client-8.0.18-1.el7.x86_64.rpm --nodeps --force</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-server-8.0.18-1.el7.x86_64.rpm --nodeps --force</span><br></pre></td></tr></table></figure><p>初始化数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown mysql:mysql /var/lib/mysql -R</span><br></pre></td></tr></table></figure><p>启动mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>设置mysql开机自启: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><p>获取数据库密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log</span><br></pre></td></tr></table></figure><p>连接mysql：mysql -uroot -p  填写 获取到的root密码</p><p>修改mysql密码:</p><p>修改密码时，查看要修改密码的用户的对应的host如果为localhost命令为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>选择使用数据库: use mysql;</p><p><img src="/images/lu9596mki.tmp/lu9596mnn_tmp_68d6f82c3d530bca.png" alt="img"></p><p><img src="/images/lu9596mki.tmp/lu9596mnn_tmp_fa34cb3ae0f84809.png" alt="img"></p><p>设置root用户允许远程访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新修改: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p><img src="/images/lu9596mki.tmp/lu9596mnn_tmp_d1c29543bcc7c2d.png" alt="img"></p><p>查看MySQL的用户: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host from user;</span><br></pre></td></tr></table></figure><p><img src="/images/lu9596mki.tmp/lu9596mnn_tmp_960dfd3d0e85c49a.png" alt="img"></p><h3 id="mysql主主互备"><a href="#mysql主主互备" class="headerlink" title="mysql主主互备"></a>mysql主主互备</h3><h4 id="服务器1-操作"><a href="#服务器1-操作" class="headerlink" title="服务器1 操作"></a>服务器1 操作</h4><h5 id="2-1-在-etc-my-conf文件中-mysqld-段添加如下内容"><a href="#2-1-在-etc-my-conf文件中-mysqld-段添加如下内容" class="headerlink" title="2.1.在/etc/my.conf文件中 [mysqld] 段添加如下内容"></a>2.1.在/etc/my.conf文件中 [mysqld] 段添加如下内容</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server-id =1   <span class="comment"># 须保证每台mysql主机不重复</span></span><br><span class="line">auto_increment_offset=1  <span class="comment">#设定数据库中自动增长的起点，两台mysql的起点必须不同，这样才能避免两台服务器同步时出现主键冲突【和从服务设置不通】</span></span><br><span class="line"></span><br><span class="line">下面可以不设置</span><br><span class="line"><span class="comment">#log-bin=mysql-bin # 启动mysql二进制日志，如果没有配置这个将无法远程链接</span></span><br><span class="line"><span class="comment">#auto_increment_increment=2  #步进值auto_imcrement，一般有n台主MySQL就填n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#character_set_server=utf8  #同步编码集</span></span><br><span class="line"><span class="comment">#log-bin-trust-function-creators=1 #设置为1不会对创建存储函数实施限制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-重启mysql-登录并创建-用于复制的用户及赋予权限"><a href="#2-2-重启mysql-登录并创建-用于复制的用户及赋予权限" class="headerlink" title="2.2 重启mysql  登录并创建 用于复制的用户及赋予权限"></a>2.2 重启mysql  登录并创建 用于复制的用户及赋予权限</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 退出mysql 登入</span></span><br><span class="line"><span class="built_in">exit</span> 或者 quit  或者 \q</span><br><span class="line"><span class="comment"># 重启mysql</span></span><br><span class="line">systemctl restart mysql      service mysqld restart</span><br><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#创建master1用户，并设置密码，该用户可在任意主机连接该mysql服务</span></span><br><span class="line">CREATE USER <span class="string">&#x27;master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED WITH mysql_native_password by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">#为master1用户分配主从复制的权限</span></span><br><span class="line">GRANT REPLICATION SLAVE ON *.*  TO  <span class="string">&#x27;master1&#x27;</span>@<span class="string">&#x27;%&#x27;</span> ;</span><br><span class="line"><span class="comment">#刷新</span></span><br><span class="line">flush privileges;  </span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428161845369.png" alt="image-20220428161845369"></p><p><img src="/images/typora-user-images/image-20220428161827801.png" alt="image-20220428161827801"></p><p>2.3  #查看日志(记录下来，需要用到)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看日志(记录下来，需要用到)</span></span><br><span class="line">show master status;</span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428162457120.png" alt="image-20220428162457120"></p><h5 id="2-4服务器2-操作-配置文件"><a href="#2-4服务器2-操作-配置文件" class="headerlink" title="2.4服务器2 操作  配置文件"></a>2.4服务器2 操作  配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server-id =2   <span class="comment"># 须保证每台mysql主机不重复</span></span><br><span class="line">auto_increment_offset=2  <span class="comment">#设定数据库中自动增长的起点，两台mysql的起点必须不同，这样才能避免两台服务器同步时出现主键冲突</span></span><br><span class="line"></span><br><span class="line">下面可以根据需要设置</span><br><span class="line"><span class="comment">#log-bin=mysql-bin  # 启动mysql二进制日志，如果没有配置这个将无法远程链接</span></span><br><span class="line"><span class="comment">#auto_increment_increment=2 #步进值auto_imcrement，一般有n台主MySQL就填n</span></span><br><span class="line"><span class="comment">#character_set_server=utf8  #同步编码集</span></span><br><span class="line"><span class="comment">#log-bin-trust-function-creators=1  #设置为1不会对创建存储函数实施限制</span></span><br></pre></td></tr></table></figure><h5 id="2-5-设置同步节点（执行以下命令，注意更改参数）"><a href="#2-5-设置同步节点（执行以下命令，注意更改参数）" class="headerlink" title="2.5 设置同步节点（执行以下命令，注意更改参数）"></a>2.5 设置同步节点（执行以下命令，注意更改参数）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;主服务器IP&#x27;</span>,master_user=<span class="string">&#x27;master1&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>,master_log_file=<span class="string">&#x27;binlog.000001&#x27;</span>,master_log_pos=848;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428174325754.png" alt="image-20220428174325754"></p><p><img src="/images/typora-user-images/image-20220428173540001.png" alt="image-20220428173540001"></p><h5 id="2-6-启动同步"><a href="#2-6-启动同步" class="headerlink" title="2.6 启动同步"></a>2.6 启动同步</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428173758628.png" alt="image-20220428173758628"></p><h5 id="2-7-查看同步状态"><a href="#2-7-查看同步状态" class="headerlink" title="2.7 查看同步状态"></a>2.7 查看同步状态</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428174016934.png" alt="image-20220428174016934"></p><p>如果失败需解除,执行如下代码【后重复2.5，2.6.2.7 操作】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; stop slave;</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; reset slave all;</span><br><span class="line">Query OK, 0 rows affected (0.17 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-8-服务器2创建用于复制用户-并赋值-并查看binlog日志位置"><a href="#2-8-服务器2创建用于复制用户-并赋值-并查看binlog日志位置" class="headerlink" title="2.8 服务器2创建用于复制用户 并赋值 并查看binlog日志位置"></a>2.8 服务器2创建用于复制用户 并赋值 并查看binlog日志位置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录mysql</span></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#创建master2用户，并设置密码，该用户可在任意主机连接该mysql服务</span></span><br><span class="line">CREATE USER <span class="string">&#x27;master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span>IDENTIFIED WITH mysql_native_password by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">#为master1用户分配主从复制的权限</span></span><br><span class="line">GRANT REPLICATION SLAVE ON *.*  TO  <span class="string">&#x27;master2&#x27;</span>@<span class="string">&#x27;%&#x27;</span> ;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428174758320.png" alt="image-20220428174758320"></p><h5 id="2-9-服务器1这是同步节点操作"><a href="#2-9-服务器1这是同步节点操作" class="headerlink" title="2.9 服务器1这是同步节点操作"></a>2.9 服务器1这是同步节点操作</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;10.1.6.97&#x27;</span>,master_user=<span class="string">&#x27;master2&#x27;</span>,master_password=<span class="string">&#x27;123456&#x27;</span>,master_log_file=<span class="string">&#x27;binlog.000002&#x27;</span>,master_log_pos=666;</span><br><span class="line">每项详解请看2.5   并重复 2.6  2.7</span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428175026619.png" alt="image-20220428175026619"></p><h3 id="Keepalived安装及配置"><a href="#Keepalived安装及配置" class="headerlink" title="Keepalived安装及配置"></a>Keepalived安装及配置</h3><h4 id="keepalived离线安装"><a href="#keepalived离线安装" class="headerlink" title="keepalived离线安装"></a>keepalived离线安装</h4><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="1在A、B两台设备都安装"><a href="#1在A、B两台设备都安装" class="headerlink" title="1在A、B两台设备都安装"></a>1在A、B两台设备都安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传安装包到指定目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rpm安装所有依赖包 已有安装包，直接到安装包目录安装即可</span></span><br><span class="line">rpm -ivh  *.rpm   --nodeps --force</span><br><span class="line"><span class="comment">#软件及依赖包</span></span><br><span class="line"> ipset-7.1-1.el7.x86_64.rpm</span><br><span class="line"> ipset-libs-7.1-1.el7.x86_64.rpm</span><br><span class="line"> keepalived-1.3.5-19.el7.x86_64.rpm</span><br><span class="line"> net-snmp-agent-libs-5.7.2-49.el7_9.2.x86_64.rpm</span><br><span class="line"> net-snmp-libs-5.7.2-49.el7_9.2.x86_64.rpm</span><br></pre></td></tr></table></figure><h5 id="2创建服务检测脚本-check-gw-sh"><a href="#2创建服务检测脚本-check-gw-sh" class="headerlink" title="2创建服务检测脚本  check_gw.sh"></a>2创建服务检测脚本  check_gw.sh</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/keepalived/check_gw.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#查看程序状态判断是否要切换</span></span><br><span class="line">NPSWEBCORE=`ps -ef|grep  NPSWebCore |grep -v grep |wc -l`</span><br><span class="line">MYSQL_SSR=`ps -ef|grep mysqld|grep -v grep |wc -l`</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断nps，mysql是否正常</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$NPSWEBCORE</span> -eq 0   ];<span class="keyword">then</span></span><br><span class="line"><span class="comment">#echo &quot;服务异常&quot;</span></span><br><span class="line"></span><br><span class="line">   pkill keepalived</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$MYSQL_SSR</span> -eq 0 ];<span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">   pkill keepalived</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo &quot;程序异常切换&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#sleep </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3修改A设备的配置文件"><a href="#3修改A设备的配置文件" class="headerlink" title="3修改A设备的配置文件"></a>3修改A设备的配置文件</h5><p>vim /etc/keepalived/keepalived.conf</p><p>进行文件对比删除多余条目行     </p><p>删除命令：按两下99  按两下dd  删除以光标为起点以后的99条条目</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="attr">router_id</span> <span class="string">web1#</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">vrrp_script</span> <span class="string">chk_gw &#123;</span></span><br><span class="line"><span class="comment">   #script &quot;killall -0 nginx&quot;</span></span><br><span class="line">    <span class="attr">script</span> <span class="string">&quot;/etc/keepalived/check_gw.sh&quot;</span></span><br><span class="line">    <span class="attr">interval</span> <span class="string">2</span></span><br><span class="line">    <span class="attr">weight</span> <span class="string">-5</span></span><br><span class="line">    <span class="attr">fall</span> <span class="string">3</span></span><br><span class="line">    <span class="attr">rise</span> <span class="string">2</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">MASTER#设置主备、MASTER、BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">ens33</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">51</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">100 #优先级</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="meta">10.1.6.94/24</span><span class="string">#修改VIP</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"> <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">#服务检测脚本</span></span><br><span class="line">        <span class="attr">chk_gw</span>  <span class="string"></span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="4-修改B设备的配置文件"><a href="#4-修改B设备的配置文件" class="headerlink" title="4 修改B设备的配置文件"></a>4 修改B设备的配置文件</h5><p>vim /etc/keepalived/keepalived.conf</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">! Configuration File for keepalived</span></span><br><span class="line"></span><br><span class="line"><span class="attr">global_defs</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="attr">router_id</span> <span class="string">web2</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">vrrp_script</span> <span class="string">chk_gw &#123;</span></span><br><span class="line"><span class="comment">   #script &quot;killall -0 nginx&quot;</span></span><br><span class="line">    <span class="attr">script</span> <span class="string">&quot;/etc/keepalived/check_gw.sh&quot;</span></span><br><span class="line">    <span class="attr">interval</span> <span class="string">2</span></span><br><span class="line">    <span class="attr">weight</span> <span class="string">-5</span></span><br><span class="line">    <span class="attr">fall</span> <span class="string">3</span></span><br><span class="line">    <span class="attr">rise</span> <span class="string">2</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">vrrp_instance</span> <span class="string">VI_1</span></span><br><span class="line"><span class="attr">&#123;</span></span><br><span class="line">    <span class="attr">state</span> <span class="string">BACKUP</span></span><br><span class="line">    <span class="attr">interface</span> <span class="string">ens33</span></span><br><span class="line">    <span class="attr">virtual_router_id</span> <span class="string">51</span></span><br><span class="line">    <span class="attr">priority</span> <span class="string">90</span></span><br><span class="line">    <span class="attr">advert_int</span> <span class="string">1</span></span><br><span class="line">    <span class="attr">authentication</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">auth_type</span> <span class="string">PASS</span></span><br><span class="line">        <span class="attr">auth_pass</span> <span class="string">1111</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">    <span class="attr">virtual_ipaddress</span> <span class="string">&#123;</span></span><br><span class="line">        <span class="attr">10.1.6.94/24</span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">track_script</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">#服务检测脚本</span></span><br><span class="line">        <span class="attr">chk_gw</span>  <span class="string"></span></span><br><span class="line">    <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="5-启动服务（A、B设备都启动）"><a href="#5-启动服务（A、B设备都启动）" class="headerlink" title="5 启动服务（A、B设备都启动）"></a>5 启动服务（A、B设备都启动）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl  start  keepalived.service <span class="comment">##前提启动mysql，coreweb。</span></span><br><span class="line"><span class="comment">#systemctl  enable keepalived.service  不设置开机自启，后面脚本会设置。</span></span><br></pre></td></tr></table></figure><h5 id="6-验证VIP是否成功"><a href="#6-验证VIP是否成功" class="headerlink" title="6 验证VIP是否成功"></a>6 验证VIP是否成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hostname -I</span><br><span class="line">10.1.6.75 10.1.6.94 192.168.122.1 172.17.0.1 </span><br></pre></td></tr></table></figure><h3 id="7文件同步-rsync-intify"><a href="#7文件同步-rsync-intify" class="headerlink" title="7文件同步(rsync+intify)"></a>7文件同步(rsync+intify)</h3><h4 id="1-Rsync下载安装"><a href="#1-Rsync下载安装" class="headerlink" title="1.Rsync下载安装"></a>1.Rsync下载安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检验是否安装rsync  已安装</span></span><br><span class="line">[root@localhost ~]<span class="comment"># rsync</span></span><br><span class="line">rsync  version 3.1.2  protocol version 31</span><br><span class="line">Copyright (C) 1996-2015 by Andrew Tridgell, Wayne Davison, and others.</span><br><span class="line">Web site: http://rsync.samba.org/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在两台服务器安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装包上传指定文件夹</span></span><br><span class="line">rpm -ivh  rsync-3.1.2-10.el7.x86_64.rpm  --nodeps --force</span><br></pre></td></tr></table></figure><p>编写配置文件（另一台服务器只需要更改web1为web2就好）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/rsyncd.conf</span><br><span class="line"><span class="comment">## [ftp]</span></span><br><span class="line"><span class="comment">#        path = /home/ftp</span></span><br><span class="line"><span class="comment">#        comment = ftp export area</span></span><br><span class="line"><span class="comment">#指定运行的用户名或ID号(rsync客户端推送过来的文件所有者会被创建为uid指定的所有者)</span></span><br><span class="line">uid = root</span><br><span class="line"><span class="comment">#指定运行的组名或组ID号(rsync客户端推送过来的文件所属组会被创建为gid指定的所属组)</span></span><br><span class="line">gid = root</span><br><span class="line"><span class="comment">#切换目录</span></span><br><span class="line">use chroot = no</span><br><span class="line"><span class="comment">#最大连接数</span></span><br><span class="line">max connections = 10</span><br><span class="line"><span class="comment">#pid文件路径</span></span><br><span class="line">pid file = /var/run/rsyncd.pid</span><br><span class="line"><span class="comment">#锁文件路径</span></span><br><span class="line">lock file = /var/run/rsyncd.lock</span><br><span class="line"><span class="comment">#日志文件路径（可通过log format参数设置日志格式）</span></span><br><span class="line"><span class="built_in">log</span> file = /var/run/rsyncd.log</span><br><span class="line"><span class="comment">#传输日志</span></span><br><span class="line">transfer logging = yes</span><br><span class="line"><span class="comment">#超时时间</span></span><br><span class="line">timeout = 900</span><br><span class="line"><span class="comment">#忽略无法读取的文件</span></span><br><span class="line">ignore nonreadable = yes</span><br><span class="line"><span class="comment">#忽略部分io错误</span></span><br><span class="line">ignore errors</span><br><span class="line"><span class="comment">#是否只读(false就接受上传，即puhs，否则只接受下载，即pull)</span></span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span></span><br><span class="line"><span class="comment">#下载(pull)操作时，如果没写下载哪个模块，则会列出模块</span></span><br><span class="line">list = <span class="literal">false</span></span><br><span class="line"><span class="comment">#允许的客户端ip或ip段(24也可写成255.255.255.0，这是网段，或子网掩码)</span></span><br><span class="line"><span class="comment">#host allow = 10.37.129.5/24</span></span><br><span class="line">hosts allow = *</span><br><span class="line"><span class="comment">#除了允许的ip或ip段外禁止其他ip或ip段</span></span><br><span class="line"><span class="comment">#host deny = 0.0.0.0/32 #也可以直接写*号</span></span><br><span class="line"><span class="comment">#认证用户（客户端执行同步操作时，需要用user@ip来指定用户名，就跟ssh登录一个道理，这里写users是因为可配置多个用户，用逗号隔开即可）</span></span><br><span class="line">auth users = zst</span><br><span class="line"><span class="comment">#认证密码文件(后面会创建该文件，其实内容就是“用户名:密码”，一行一个用户)</span></span><br><span class="line">secrets file = /etc/rsyncd.password</span><br><span class="line"><span class="comment">#如果用-az指定了打包压缩同步的文件，则指定这些后缀可以不压缩这些文件。</span></span><br><span class="line"><span class="comment"># dont compress   = *.gz *.tgz *.zip *.z *.Z *.rpm *.deb *.bz2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############# 自定义的传输模块2 ##################</span></span><br><span class="line">[web2]</span><br><span class="line">    <span class="comment">#同步路径</span></span><br><span class="line">    path = /opt/npsfile</span><br><span class="line">    <span class="comment">#注释</span></span><br><span class="line">    comment = website</span><br><span class="line">    <span class="comment">#不接受的目录(该目录位于path指定的目录下)</span></span><br><span class="line">    exclude = cache</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建用户名配置（两台服务器相同的操作）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#与配置文件secrets file 保持一致</span></span><br><span class="line">vim  /etc/rsyncd.password</span><br><span class="line"><span class="comment">#添加用户</span></span><br><span class="line">zst:123</span><br><span class="line"><span class="comment">#创建文件把密码写进去  赋予600权限</span></span><br><span class="line">vim  /etc/rsyncd.secrets</span><br><span class="line"><span class="comment">#添加免密密码</span></span><br><span class="line">123</span><br><span class="line">chmod 600 rsyncd.secrets </span><br><span class="line"><span class="comment">#保存退出并修改权限</span></span><br><span class="line">chmod 600 rsyncd.password </span><br><span class="line"><span class="comment">#守护者进程启动</span></span><br><span class="line"> rsync --daemon   </span><br></pre></td></tr></table></figure><p>注意</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rsync: chgrp &quot;.tbslog.file.NbRhsP&quot; (in ftpdata) failed: Operation not permitted (1)</span></span><br><span class="line"><span class="comment">#出现这个错误需要绑定接收文件的属主 root用户一般不会出现  </span></span><br><span class="line">chowm root.root  dockerStorage</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件需要重启rsync 先杀死在重启</span></span><br><span class="line"><span class="built_in">kill</span> all rsync </span><br><span class="line"><span class="comment">#检查是否杀死</span></span><br><span class="line">ss -tnl |grep 873</span><br><span class="line"><span class="comment">#重启启动</span></span><br><span class="line">rsync --daemon</span><br></pre></td></tr></table></figure><p>rsync和同步脚本开机自启动（从服务器只需要开机启动rsync即可,无需添加脚本）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入文件夹编写脚本</span></span><br><span class="line"><span class="built_in">cd</span> /etc/init.d</span><br><span class="line">vim rsst.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#以下为脚本内容</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig:2345 10 90</span></span><br><span class="line"><span class="comment">#description:resind</span></span><br><span class="line"></span><br><span class="line"> rsync --daemon</span><br><span class="line"> <span class="comment">#checkFile.sh脚本从服务器不需要添加</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">nohup /checkFile.sh  &amp;</span><br><span class="line">                                                                                         <span class="comment">#保存脚本命令</span></span><br><span class="line">:wq                                                                                         </span><br><span class="line">                                                                                         </span><br><span class="line">                                                                                             </span><br><span class="line"></span><br><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">chmod +x /etc/init.d/rsst.sh</span><br><span class="line"><span class="comment">#加入开机启动,进/etc/init.d/目录下</span></span><br><span class="line">chkconfig --add rsst.sh</span><br><span class="line">chkconfig rsst.sh on</span><br></pre></td></tr></table></figure><p>从服务器手动同步脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#放在/目录</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">vim cli.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入以下内容</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#/opt/npsfile/ 本机同步文件夹</span></span><br><span class="line"><span class="comment">#zst同步用户   同步到哪台服务器就用哪台用户</span></span><br><span class="line"><span class="comment">#10.1.6.75    同步地址</span></span><br><span class="line"><span class="comment">#/etc/rsyncd.secrets   用户免密文件位置</span></span><br><span class="line">rsync -avz /opt/npsfile/  zst@10.1.6.75::web2 --password-file=/etc/rsyncd.secrets &gt;/syc.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存命令</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="comment">#赋予可执行权限</span></span><br><span class="line">chmod +x  cli.sh</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">./cli.sh </span><br></pre></td></tr></table></figure><p>注：如果遇到没有权限问题</p><p>修改selinux模式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看当前模式</span></span><br><span class="line">getenforce</span><br><span class="line"></span><br><span class="line">强制模式SELINUX=enforcing：表示所有违反安全策略的行为都将被禁止。</span><br><span class="line">宽容模式SELINUX=permissive：表示所有违反安全策略的行为不被禁止，但是会在日志中作记录</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.需要把模式改为permissive</span></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">按 i 进入编辑模式</span><br><span class="line"></span><br><span class="line">修改为SEINUX=permissive</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存</span></span><br><span class="line">:wq</span><br><span class="line"><span class="comment">#3.在根目录下新建隐藏文件autorelabel，实例重启后，SELinux会自动重新标记所有系统文件</span></span><br><span class="line">touch /.autorelabel</span><br><span class="line"><span class="comment">#4.重启ECS实例。</span></span><br><span class="line">shutdown -r now</span><br><span class="line"><span class="comment">#5.以root权限远程连接,运行命令getenforce，验证SELinux状态。</span></span><br><span class="line">返回permissive成功</span><br></pre></td></tr></table></figure><h4 id="2-Inotifl下载安装"><a href="#2-Inotifl下载安装" class="headerlink" title="2.Inotifl下载安装"></a>2.Inotifl下载安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前系统是否支持inotify  出现以下为支持</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /proc/sys/fs/inotify</span></span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  14 10:06 max_queued_events</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  14 10:06 max_user_instances</span><br><span class="line">-rw-r--r--. 1 root root 0 5月  14 10:06 max_user_watches</span><br></pre></td></tr></table></figure><p>inofity-tools下载地址：<a href="https://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz">http://github.com/downloads/rvoicilas/inotify-tools/inotify-tools-3.14.tar.gz</a></p><p>也可官网自行下载上传到虚拟机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解压 进行编译安装</span></span><br><span class="line">[root@localhost inotifl]<span class="comment"># tar -zxvf inotify-tools-3.14.tar.gz</span></span><br><span class="line">[root@localhost hbk]<span class="comment"># cd inotify-tools-3.14</span></span><br><span class="line">[root@localhost inotify-tools-3.14]<span class="comment"># ./configure</span></span><br><span class="line">[root@localhost inotify-tools-3.14]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>默认安装在/usr/local/bin目录，一共两个程序<br>inotifywait和inotifywatch  有代表安装成功</p><p>编写同步脚本 checkFile.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">prog=<span class="string">&quot;inotifywait&quot;</span></span><br><span class="line">events=<span class="string">&quot;create,delete,modify,attrib&quot;</span></span><br><span class="line">iopt=<span class="string">&quot;-mrq&quot;</span></span><br><span class="line"><span class="comment">#文件地址</span></span><br><span class="line">lpath=<span class="string">&quot;/opt/npsfile&quot;</span></span><br><span class="line"><span class="comment">#需要同步哪台服务器就写哪台ip</span></span><br><span class="line">rhost=<span class="string">&quot;10.1.6.87&quot;</span></span><br><span class="line"><span class="comment">#认证用户名</span></span><br><span class="line">vuser=<span class="string">&quot;zst&quot;</span></span><br><span class="line"><span class="comment">#免密文件地址</span></span><br><span class="line">secfile=<span class="string">&quot;/etc/rsyncd.secrets&quot;</span></span><br><span class="line"><span class="comment">#-a: -archive 归档模式 递归方式传输文件</span></span><br><span class="line"><span class="comment">#-v：–verbose 复杂的输出信息。</span></span><br><span class="line"><span class="comment">#-z：–compress 压缩模式，</span></span><br><span class="line">ropt=<span class="string">&quot;-avz&quot;</span></span><br><span class="line"><span class="comment">#在75上写87模块名称</span></span><br><span class="line">modname=<span class="string">&quot;web2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$prog</span> <span class="variable">$iopt</span> --format <span class="string">&quot;%w%f&quot;</span> -e <span class="variable">$events</span> <span class="variable">$lpath</span> | <span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $line</span></span><br><span class="line">rsync <span class="variable">$ropt</span> /opt/npsfile/ <span class="variable">$vuser</span>@<span class="variable">$rhost</span>::<span class="variable">$modname</span>  --password-file=<span class="variable">$secfile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-设置开机自启"><a href="#3-设置开机自启" class="headerlink" title="3.设置开机自启"></a>3.设置开机自启</h4><p><img src="/images/typora-user-images/S0VXKQURS7PVS%7DODIB44P$M.png" alt="image-20220607100625998"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入文件夹编写脚本</span></span><br><span class="line"><span class="built_in">cd</span> /etc/init.d</span><br><span class="line">vim rsst.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#chkconfig:2345 10 90</span></span><br><span class="line"><span class="comment">#description:resind</span></span><br><span class="line"></span><br><span class="line"> rsync --daemon</span><br><span class="line"> <span class="comment">#从服务器不需要设置脚本启动 删掉即可</span></span><br><span class="line"><span class="built_in">cd</span> /</span><br><span class="line">nohup /checkFile.sh  &amp;</span><br><span class="line"></span><br><span class="line">sleep 1m </span><br><span class="line">systemctl start keepalived.service </span><br><span class="line">                                                                                             </span><br><span class="line">                                                                                         <span class="comment">#保存 退出    </span></span><br><span class="line">:wq</span><br><span class="line"><span class="comment">#添加可执行权限</span></span><br><span class="line">chmod +x /etc/init.d/rsst.sh</span><br><span class="line"><span class="comment">#加入开机启动,进/etc/init.d/目录下</span></span><br><span class="line">chkconfig --add rsst.sh</span><br><span class="line">chkconfig rsst.sh on</span><br></pre></td></tr></table></figure><h3 id="8-验证双机热备相关是否正常"><a href="#8-验证双机热备相关是否正常" class="headerlink" title="8 验证双机热备相关是否正常"></a>8 验证双机热备相关是否正常</h3><h4 id="1-mysql-主主同步"><a href="#1-mysql-主主同步" class="headerlink" title="1.mysql 主主同步"></a>1.mysql 主主同步</h4><p>登入mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mysql -uroot -p</span></span><br><span class="line">Enter password: </span><br></pre></td></tr></table></figure><p>查看同步状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220428174016934.png" alt="image-20220428174016934"></p><p>两个数据库均要查看</p><h4 id="2-ip-飘移查看"><a href="#2-ip-飘移查看" class="headerlink" title="2.ip 飘移查看"></a>2.ip 飘移查看</h4><p>主服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># hostname -I</span></span><br><span class="line">10.1.6.96 10.1.6.98 192.168.122.1 172.17.0.1 </span><br></pre></td></tr></table></figure><p>10.1.6.98 为虚拟代理ip</p><p>或者直接查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status keepalived.service</span></span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/1234567.png" alt="image-20220428174016934"></p><p>从服务器查看状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status keepalived.service</span></span><br></pre></td></tr></table></figure><p>如果keepalived 如果未启动需要查看mysql 与coreweb 状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># systemctl status mysqld</span></span><br><span class="line">[root@localhost ~]<span class="comment"># systemctl status coreweb</span></span><br></pre></td></tr></table></figure><h4 id="3-文件同步查看"><a href="#3-文件同步查看" class="headerlink" title="3.文件同步查看"></a>3.文件同步查看</h4><p>查看rsync 是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -ef | grep rsync</span></span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/=WGF5EA%5DSE%25%60TAZ@GE3.png" alt="image-20220428174016934"></p><p>未启动查看是否安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># rpm -qa | grep rsync</span></span><br></pre></td></tr></table></figure><p>一般启动即可同步，如果不能同步用以下命令看是否能同步成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz 主服务器测试文件夹路径  zst@从服务器ip::web2 --password-file=/etc/rsyncd.secrets </span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/32e5318e41c671f5f8b03b8d44c1e36.png" alt="image-20220428174016934"></p><p>查看主服务器文件同步脚本是否启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># ps -ef |grep  checkFile.sh</span></span><br></pre></td></tr></table></figure><p><img src="/images/typora-user-images/image-20220607111359253.png" alt="image-20220607111359253"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#后台运行同步命令</span></span><br><span class="line">nohup /checkFile.sh  &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双机热备 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中service 文件</title>
      <link href="2022/06/07/Linux/linux%E4%B8%ADservice%E6%96%87%E4%BB%B6/"/>
      <url>2022/06/07/Linux/linux%E4%B8%ADservice%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是systemd-service"><a href="#什么是systemd-service" class="headerlink" title="什么是systemd service"></a>什么是systemd service</h2><blockquote><p>systemd service是一种以 .service 结尾的配置文件，是一个专用于 Linux 操作系统的系统与服务管理器。简单来说，用于后台以守护精灵（daemon）的形式运行程序。<br>systemd 服务的内容主要分为三个部分，控制单元 [Unit] 的定义、服务 [Service] 的定义、以及 [Install] 安装部分。</p></blockquote><ol start="2"><li>示例详解</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">After=network.target    <span class="comment">#表示当前服务是在那个服务后面启动，一般定义为网络服务启动后启动</span></span><br><span class="line">[Service]</span><br><span class="line">Type=forking<span class="comment">#定义启动类型</span></span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/apache/bin/apachectl start <span class="comment">#定义启动进程时执行的命令。</span></span><br><span class="line">ExecReload=/usr/<span class="built_in">local</span>/apache/bin/apachectl restart  <span class="comment">#重启服务时执行的命令</span></span><br><span class="line">ExecStop=/usr/<span class="built_in">local</span>/apache/bin/apachectl stop<span class="comment">#定义关闭进程时执行的命令。</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span><span class="comment">#是否分配独立空间</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target    <span class="comment">#表示多用户命令行状态</span></span><br></pre></td></tr></table></figure><h3 id="2-1-Unit字段"><a href="#2-1-Unit字段" class="headerlink" title="2.1 Unit字段"></a>2.1 Unit字段</h3><p>  这个字段主要给出服务描述、启动顺序和依赖关系。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Description字段给出当前服务的简单描述。</span><br><span class="line">Documentation字段给出文档位置。</span><br><span class="line">After字段表示在什么服务之后启动。</span><br><span class="line">Before字段表示在什么服务之前启动。  </span><br><span class="line">After和Before字段只涉及启动顺序，不涉及依赖关系。</span><br><span class="line"></span><br><span class="line">Wants字段表示该服务和某服务存在某种弱依赖关系，即某服务停止运行或退出不影响该服务继续运行。</span><br><span class="line">Requires字段则表示”强依赖”关系，即某服务停止运行或退出，改服务也必须停止运行。</span><br><span class="line">Wants字段与Requires字段只涉及依赖关系，与启动顺序无关，默认情况下是同时启动的。</span><br></pre></td></tr></table></figure><h3 id="2-2-Server字段"><a href="#2-2-Server字段" class="headerlink" title="2.2 Server字段"></a>2.2 Server字段</h3><p>  这个字段主要给出服务的启动行为，如何启动、重启、停止。</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Type字段：定义启动类型。它可以设置的值如下：</span><br><span class="line"> - simple（默认值）：ExecStart字段启动的进程为主进程</span><br><span class="line"> - forking：ExecStart字段将以fork()方式启动，此时父进程将会退出，子进程将成为主进程</span><br><span class="line"> - oneshot：类似于simple，但只执行一次，Systemd 会等它执行完，才启动其他服务</span><br><span class="line"> - dbus：类似于simple，但会等待 D-Bus 信号后启动</span><br><span class="line"> - notify：类似于simple，启动结束后会发出通知信号，然后 Systemd 再启动其他服务</span><br><span class="line"> - idle：类似于simple，但是要等到其他任务都执行完，才会启动该服务。一种使用场合是为让该服务的输出，不与其他服务的输出相混</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecStart字段：定义启动进程时执行的命令，就是手动启动时执行的命令。</span><br><span class="line">ExecReload字段：重启服务时执行的命令。</span><br><span class="line">ExecStop字段：停止服务时执行的命令。</span><br><span class="line">ExecStartPre字段：启动服务之前执行的命令。</span><br><span class="line">ExecStartPost字段：启动服务之后执行的命令。</span><br><span class="line">ExecStopPost字段：停止服务之后执行的命令。</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">KillMode字段：定义 Systemd 如何停止 sshd 服务。它可以设置的值如下：</span><br><span class="line"> - control-group（默认值）：当前控制组里面的所有子进程，都会被杀掉</span><br><span class="line"> - process：只杀主进程</span><br><span class="line"> - mixed：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</span><br><span class="line"> - none：没有进程会被杀掉，只是执行服务的 stop 命令</span><br><span class="line">  </span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">Restart字段：定义了 sshd 退出后，Systemd 的重启方式。它可以设置的值如下：</span><br><span class="line"> - no（默认值）：退出后不会重启</span><br><span class="line"> - on-success：只有正常退出时（退出状态码为0），才会重启</span><br><span class="line"> - on-failure：非正常退出时（退出状态码非0），包括被信号终止和超时，才会重启</span><br><span class="line"> - on-abnormal：只有被信号终止和超时，才会重启</span><br><span class="line"> - on-abort：只有在收到没有捕捉到的信号终止时，才会重启</span><br><span class="line"> - on-watchdog：超时退出，才会重启</span><br><span class="line"> - always：不管是什么退出原因，总是重启</span><br><span class="line">对于守护进程，推荐设为on-failure。对于那些允许发生错误退出的服务，可以设为on-abnormal。</span><br></pre></td></tr></table></figure>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RestartSec字段：表示 Systemd 重启服务之前，需要等待的秒数。</span><br><span class="line">user字段可以设置服务的用户名</span><br><span class="line">WorkingDirectory字段指定服务的安装目录</span><br></pre></td></tr></table></figure><p>  2.3 Install字段<br>  该字段定义如何安装这个配置文件，即怎样做到开机自启。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> WantedBy字段：表示该服务所在的 Target。</span><br><span class="line"> Target的含义是服务组，表示一组服务。WantedBy=multi-user.target指的是服务所在的Target是multi-user.target</span><br><span class="line"></span><br><span class="line"> Systemd 有默认的启动 Target。就是multi-user.target，在这个组里的所有服务，都将开机启动。</span><br><span class="line"></span><br><span class="line">查看 multi-user.target 包含的所有服务</span><br><span class="line">systemctl list-dependencies multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud</title>
      <link href="2022/04/05/java/secondstage/SpringCode/"/>
      <url>2022/04/05/java/secondstage/SpringCode/</url>
      
        <content type="html"><![CDATA[<h1 id="1-微服务的介绍"><a href="#1-微服务的介绍" class="headerlink" title="1.微服务的介绍"></a>1.微服务的介绍</h1><h2 id="1-1-演变"><a href="#1-1-演变" class="headerlink" title="1.1. 演变"></a>1.1. 演变</h2><p>随着互联网的发展，网站应用的规模也在不断的扩大，进而导致系统架构也在不断的进行变化。大致可以以下几个过程：单体应用架构=》垂直应用架构=》分布式应用架构=》soa架构=》微服务架构=》服务网格化（Service Mesh）。</p><p><img src="/images/img/blog/%E7%AE%97%E6%B3%95.png" alt="算法"></p><h3 id="1-1-1-单体应用架构"><a href="#1-1-1-单体应用架构" class="headerlink" title="1.1.1. 单体应用架构"></a>1.1.1. 单体应用架构</h3><blockquote><p>只需一个应用，将所有功能代码都部署在一起就可以，这 样可以减少开发、部署和维护的成本</p></blockquote><p><strong>优点：</strong> 项目架构简单，小型项目的话， 开发成本低 项目部署在一个节点上， 面向服务的架构</p><p><strong>缺点：</strong> 全部功能集成在一个工程中，对于大型项目来讲不易开发和维护 项目模块之间紧密耦合，单点容错率低 ,并非能力低,无法针对不同模块进行针对性优化和水平扩展</p><h3 id="HB-1-1-2-垂直应用架构"><a href="#HB-1-1-2-垂直应用架构" class="headerlink" title="HB 1.1.2.垂直应用架构"></a>HB 1.1.2.垂直应用架构</h3><blockquote><p>当访问量或部分业务需求增大。这时的修改会影响到其他业务。垂直应用就可以解决此为题。所谓的垂直应用架构，就是将原来的一个应用拆成互不相干的几个应用，以提升效率。</p></blockquote><p><strong>优点：</strong> 系统拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水扩展 一个系统的问题不会影响到其他系统，提高容错率</p><p> <strong>缺点：</strong> 系统之间相互独立， 无法进行相互调用 系统之间相互独立， 会有重复的开发任务</p><h3 id="1-1-3-分布式应用架构"><a href="#1-1-3-分布式应用架构" class="headerlink" title="1.1.3.分布式应用架构"></a>1.1.3.分布式应用架构</h3><blockquote><p>当垂直应用越来越多，重复的业务代码就会越来越多。这时候，我们就思考可不可以将重复的代码抽取出来，做成统一 的业务层作为独立的服务，然后由前端控制层调用不同的业务层服务呢？ 这就产生了新的分布式系统架构。它将把工程拆分成表现层和服务层两个部分，服务层中包含业务 逻辑。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。</p></blockquote><p><strong>优点：</strong> 抽取公共的功能为服务层，提高代码复用性 </p><p><strong>缺点：</strong> 系统间耦合度变高，调用关系错综复杂，难以维护</p><h3 id="1-1-4-SOA应用架构"><a href="#1-1-4-SOA应用架构" class="headerlink" title="1.1.4.SOA应用架构"></a>1.1.4.SOA应用架构</h3><blockquote><p><strong>面向服务的架构</strong> 在分布式架构下，当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加 一个调度中心对集群进行实时管理。此时，用于资源调度和治理中心(SOA Service Oriented Architecture)是关键。</p></blockquote><p><strong>优点:</strong> 抽取公共的功能为服务，提高开发效率,对不同的服务进行集群化解决部署解决系统压力,基于ESB/DUBBO减少系统耦合，只能减少耦合，但耦合还是存在的</p><p><strong>缺点:</strong> 抽取服务的粒度较大（比如说用户模块中包含用户信息，用户的账户，用户的详情等等，它做不到更细致化的拆分）;服务间会有依赖关系(服务提供方与调用方接口耦合度较高)，一旦某个环节出错会影响较大( 服务雪崩 ) 服务关系复杂，运维、测试部署困难</p><h3 id="1-1-5-微服务应用架构"><a href="#1-1-5-微服务应用架构" class="headerlink" title="1.1.5.微服务应用架构"></a>1.1.5.微服务应用架构</h3><blockquote><p>微服务架构在某种程度上是面向服务的架构SOA继续发展的下一步，它更加强调服务的”彻底拆分”。</p></blockquote><p><strong>微服务架构与SOA架构的不同</strong> </p><p>微服务架构比 SOA架构粒度会更加精细，让专业的人去做专业的事情（专注），目的提高效率，每个服务于服务之间互不影响，微服务架 构中，每个服务必须独立部署，微服务架构更加轻巧，轻量级。 SOA 架构中可能数据库存储会发生共享，微服务强调独每个服务都是单独数据库，保证每个服务于服务之间互不影响。 项目体现特征微服务架构比 SOA 架构更加适合与互联网公司敏捷开发、快速迭代版本，因为粒度非常精细。</p><p><strong>优点：</strong> 服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展 微服务之间采用Restful等轻量级http协议相互调用 </p><p><strong>缺点：</strong> 分布式系统开发的技术成本高（容错、分布式事务等） 复杂性更高。各个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦。</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p><a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p><p><strong>他说：</strong>微服务其实是一种架构风格，我们在开发一个应用的时候这个<strong>应用</strong>应该是由<strong>一组小型服务组成</strong>，每个小型服务都运行在自己的<strong>进程</strong>内；小服务之间通过<strong>HTTP</strong>的方式进行<strong>互联互通</strong>。</p><p>一旦采用微服务系统架构，就势必会遇到这样几个问题</p><ol><li><p>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])   </p></li><li><p>这么多小服务，他们之间如何通讯？</p></li><li><p>这么多小服务，客户端怎么访问他们？(网关) </p></li><li><p>这么多小服务，一旦出现问题了，应该如何自处理？(容错)   </p></li><li><p>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)<br> 。。。。</p></li></ol><p>  对于以上问题我们就要用到服务架构来解决。它的实现就是springcloud 。</p><h1 id="2-spring-cloud"><a href="#2-spring-cloud" class="headerlink" title="2.spring cloud"></a>2.spring cloud</h1><p><a href="https://spring.io/projects/spring-cloud#overview">Spring Cloud</a></p><p><img src="/images/img/blog/image-20220519212822564.png" alt="image-20220519212822564"></p><p>翻译一下就是</p><blockquote><p>Spring Cloud为开发人员提供了工具，用于快速构建分布式系统中的一些常见模式（例如配置管理，服务发现，断路器，智能路由，微代理，控制总线，一次性令牌，全局锁，领导选举，分布式会话，集群状态）。分布式系统的协调导致了样板模式，使用Spring Cloud开发人员可以快速建立实现这些模式的服务和应用程序。它们可以在任何分布式环境中很好地工作，包括开发人员自己的笔记本电脑，裸机数据中心和托管平台，如Cloud Foundry。</p></blockquote><p>我们可以直接理解为：Spring Cloud是Spring生态用于解决微服务架构下各种问题而制定的标准与规范.</p><p>我们从官网上可以看到，spring cloud 提供了工具来解决我们上面微服务搭建所遇到的问题。我们看到翻看了上面官网的组件发现没有我们熟悉的<strong>Eureka/nacos，Zookeeper，ribbon…</strong> </p><p>那是因为这些都是第三方提供的，spring cloud 实现，所以我们也可以理解为Spring Cloud 只时对外提供了一套标准的<strong>API</strong>。有其他公司提供实现。</p><table><thead><tr><th></th><th>springCloud 官网</th><th>springCloud netflix</th><th>springCloud Alibaba</th><th>springCloud  Consul</th><th>springCloud Kubernetes</th><th>springCloud Zookeeper</th></tr></thead><tbody><tr><td>分布式配置</td><td>SpringCloudConfig</td><td>Archaius</td><td><strong>Nacos</strong></td><td>Consul</td><td>ConfigMap</td><td>Zookeeper</td></tr><tr><td>服务注册/发现</td><td></td><td>Eureka</td><td><strong>Nacos</strong></td><td>Consul</td><td>Api Server</td><td>Zookeeper</td></tr><tr><td>服务熔断</td><td></td><td>Hystrix</td><td><strong>Sentinel</strong></td><td>—</td><td>—</td><td>—</td></tr><tr><td>服务调用</td><td><strong>OpenFegin   RestTemplate</strong></td><td>Fegin</td><td>Dubbo RPC</td><td>—</td><td>—</td><td>—</td></tr><tr><td>服务路由</td><td><strong>GateWay</strong></td><td>Zuul</td><td>Dubbo Servlet</td><td>—</td><td>—</td><td>—</td></tr><tr><td>分布式消息</td><td>springcloud Stream</td><td>—</td><td><strong>SCS                  RocketMq</strong></td><td>SCB Consul</td><td>—</td><td>—</td></tr><tr><td>消息总线</td><td><strong>srping cloud Bus</strong></td><td>—</td><td>SCB</td><td>SCS Consul</td><td>—</td><td>—</td></tr><tr><td>负载均衡</td><td>Springcloud LoadBalancer</td><td><strong>Ribbon</strong></td><td>DubboLB</td><td>—</td><td>—</td><td>—</td></tr><tr><td>分布式事务</td><td>—</td><td>—</td><td><strong>Seata</strong></td><td>—</td><td>—</td><td>—</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="/images/img/blog/%E7%AE%97%E6%B3%95%20(3).png" alt="算法 (3)"></p><p>以上是一个完整的一个微服务架构。我们可以看出我们所用到大部分都是springcloud 原生，spring cloud alibaba,spring cloud netflix.</p><p><a href="https://spring.io/projects/spring-cloud-netflix">spring-cloud-netflix</a></p><p>其中我们要知道一下spring cloud netflix 已停更，但是停更不停用。但还是希望选择一下继续维护的项目。但有些技术还是主流像Ribbon。虽然官网在它停更后推出了Springcloud LoadBalancer 但功能还是没它全面；OpenFegin中的熔断器也是用的Hystrix，所以继续关注吧。</p><p><a href="https://spring.io/projects/spring-cloud-alibaba">spring-cloud-alibaba</a><br>spring-cloud-alibaba 先如今应该是主流。Nacos，Sentinel 运用超级广泛。</p><p>我们接下来就一步一步来了解以下组件：</p><p><img src="/images/img/blog/image-20220519220908797.png" alt="image-20220519220908797"></p><h1 id="3-服务注册与发现"><a href="#3-服务注册与发现" class="headerlink" title="3. 服务注册与发现"></a>3. 服务注册与发现</h1><h2 id="3-1-主流的注册中心"><a href="#3-1-主流的注册中心" class="headerlink" title="3.1.主流的注册中心"></a>3.1.主流的注册中心</h2><table><thead><tr><th></th><th>nacos</th><th>Eureka</th><th>Consul</th><th>CoreDNS</th><th>Zookeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>—-</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>ClientBeat</td><td>Tcp/http/grpc/cmd</td><td>—-</td><td>keep alive</td></tr><tr><td>负载均衡</td><td>权重/metadata/selector</td><td>Ribbon</td><td>Fabio</td><td>RoundRobin</td><td>—-</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td><td>无</td><td>无</td></tr><tr><td>自动注销</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>http/dns</td><td>http</td><td>http/dns</td><td>dns</td><td>tcp</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>读数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>springCrod集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>跨注册中心同步</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>kbs继承</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><blockquote><p>AP  C 一致性 A可用性 P 分区容错性</p></blockquote><h2 id="3-2-技术选型-Nacos"><a href="#3-2-技术选型-Nacos" class="headerlink" title="3.2.技术选型-Nacos"></a>3.2.技术选型-Nacos</h2><p><a href="https://nacos.io/en-us/docs/quick-start.html">https://nacos.io/en-us/docs/quick-start.html</a></p><p><img src="https://nacos.io/img/nacosMap.jpg" alt="nacos_map"></p><p>一个更易于构建云原生应用的动态服务发现(Nacos Discovery )、服务配置(Nacos Config)和服务管理平台。 集 注册中心+配置中心+服务管理 的平台 </p><p><img src="/images/img/blog/640" alt="图片"></p><h2 id="3-3-Nacos注册中心"><a href="#3-3-Nacos注册中心" class="headerlink" title="3.3.Nacos注册中心"></a>3.3.Nacos注册中心</h2><p>注册中心可以理解为把所有的服务放到里面去用到的时候拿出来。也就是注册与发现。</p><p>其实在开发使用的过程中我们想要的是一个：</p><p>1.管理方便。可以灵活存放我们服务地址</p><p>2.有容错机制，比如我们其中有的服务宕机了。我们就不去调它了。或者注册中心宕机了我们也能继续使用。</p><p>3.方便扩容，便于集群</p><p>。。。。。。</p><p>那么我们来看看nacos吧。</p><h3 id="3-3-1-nacos-实现流程图"><a href="#3-3-1-nacos-实现流程图" class="headerlink" title="3.3.1.nacos 实现流程图"></a>3.3.1.nacos 实现流程图</h3><p><img src="/images/img/blog/image-20220520233229010.png" alt="image-20220520233229010"></p><h3 id="3-3-2-注册的核心功能"><a href="#3-3-2-注册的核心功能" class="headerlink" title="3.3.2.注册的核心功能"></a>3.3.2.注册的核心功能</h3><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery</a></p><p><strong>服务注册：</strong>Nacos Client会通过发送REST请求的方式向Nacos Server注册自己的服务，提供自身的元数据，比如ip地 址、端口等信息。Nacos Server接收到注册请求后，就会把这些元数据信息存储在一个双层的内存Map中。</p><p> <strong>服务心跳</strong>：在服务注册后，Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防 止被剔除。默认5s发送一次心跳。 </p><p><strong>服务同步：</strong>Nacos Server集群之间会互相同步服务实例，用来保证服务信息的一致性。 </p><p><strong>服务发现</strong>：服务消费者（Nacos Client）在调用服务提供者的服务时，会发送一个REST请求给Nacos Server，获取上面 注册的服务清单，并且缓存在Nacos Client本地，同时会在Nacos Client本地开启一个定时任务定时拉取服务端最新的注 册表信息更新到本地缓存 </p><p><strong>服务健康检查：</strong>Nacos Server会开启一个定时任务用来检查注册服务实例的健康情况，对于超过15s没有收到客户端心跳 的实例会将它的healthy属性置为false(客户端服务发现时不会发现)，如果某个实例超过30秒没有收到心跳，直接剔除该 实例(被剔除的实例如果恢复发送心跳则会重新注册) 主流的注册中心 CAP  C 一致性 A可用性 P 分区容错性 图灵</p><h2 id="3-4-Nacos-Service-部署"><a href="#3-4-Nacos-Service-部署" class="headerlink" title="3.4. Nacos Service 部署"></a>3.4. Nacos Service 部署</h2><p>周知：Nacos 我们叫服务端，其他所注册到nacos 都叫客户端</p><p><img src="/images/img/blog/image-20220522140217990.png" alt="image-20220522140217990"></p><h3 id="3-4-1-在官方github库中选择需要的版本"><a href="#3-4-1-在官方github库中选择需要的版本" class="headerlink" title="3.4.1.在官方github库中选择需要的版本"></a>3.4.1.在官方github库中选择需要的版本</h3><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p><p><img src="/images/img/blog/image-20220522141604905.png" alt="image-20220522141604905"></p><h3 id="3-4-1-运行模式"><a href="#3-4-1-运行模式" class="headerlink" title="3.4.1.运行模式"></a>3.4.1.运行模式</h3><p><img src="/images/img/blog/image-20220522144401057.png" alt="image-20220522144401057"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux/Unix/Mac</span><br><span class="line">Standalone means it is non-cluster Mode. * sh startup.sh -m standalone</span><br><span class="line">Windows</span><br><span class="line">Standalone means it is non-cluster Mode. * cmd startup.cmd -m standalone</span><br></pre></td></tr></table></figure><h3 id="3-4-2-支持myql"><a href="#3-4-2-支持myql" class="headerlink" title="3.4.2.支持myql"></a>3.4.2.支持myql</h3><p>在0.7版本之前，在单机模式时nacos使用嵌入式数据库实现数据的存储，不方便观察数据存储的基本情况。0.7版本增加了支持mysql数据源能力，具体的操作步骤：</p><ul><li><p>1.安装数据库，版本要求：5.6.5+</p></li><li><p>2.初始化mysql数据库，数据库初始化文件：nacos-mysql.sql</p></li><li><p>3.修改conf/application.properties文件，增加支持mysql数据源配置（目前只支持mysql），添加mysql数据源的url、用户名和密码。</p><p><img src="/images/img/blog/image-20220522145849257.png" alt="image-20220522145849257"></p><p><img src="/images/img/blog/image-20220522145926268.png" alt="image-20220522145926268"></p><p>window运行cmd</p><p><img src="/images/img/blog/image-20220522150204795.png" alt="image-20220522150204795"></p><p><img src="/images/img/blog/image-20220522153637959.png" alt="image-20220522153637959"></p></li></ul><h3 id="3-4-3-集群"><a href="#3-4-3-集群" class="headerlink" title="3.4.3.集群"></a>3.4.3.集群</h3><h2 id="3-5-Nacos-Client-构建"><a href="#3-5-Nacos-Client-构建" class="headerlink" title="3.5.Nacos Client 构建"></a>3.5.Nacos Client 构建</h2><p>父Pom中支持spring cloud&amp;spring cloud alibaba, 引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐alibaba‐dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前项目pom中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐cloud‐starter‐alibaba‐nacos‐discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件配置</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置 Nacos server 的地址</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">          <span class="attr">discovery:</span></span><br><span class="line">            <span class="string">server‐addr:</span> <span class="string">localhost:8848</span> <span class="comment">#默认值</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> secondstage </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="2022/04/05/java/secondstage/java%E9%AB%98%E5%B9%B6%E5%8F%91/"/>
      <url>2022/04/05/java/secondstage/java%E9%AB%98%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-同步（Synchronous）和异步（Asynchronous）"><a href="#1-1-同步（Synchronous）和异步（Asynchronous）" class="headerlink" title="1.1.同步（Synchronous）和异步（Asynchronous）"></a>1.1.同步（Synchronous）和异步（Asynchronous）</h2><p>同步和异步通常来形容一次方法调用，<strong>同步方法调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为</strong>。<strong>异步方法调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作</strong>。而异步方法通常会在另外一个线程中“真实”地执行。整个过程，不会阻碍调用者的工作。</p><p>对于调用者来说，异步调用似乎是一瞬间就完成的。如果异步调用需要返回结果，那么当这个异步调用真实完成时，则会通知调用者。</p><h2 id="1-2-并发（Concurrency）和并行（Parallelism）"><a href="#1-2-并发（Concurrency）和并行（Parallelism）" class="headerlink" title="1.2.并发（Concurrency）和并行（Parallelism）"></a>1.2.并发（Concurrency）和并行（Parallelism）</h2><p>他们都可以表示两个或者多个任务一起执行，但是侧重点有所不同。并发偏重于多个任务<strong>交替</strong>执行，而多个任务之间有可能还是串行的，而并行是真正意义上的“同时执行”</p><p><strong>并发</strong>说的是在<strong>一个时间段内</strong>，多件事情在这个时间段内<strong>交替执行</strong>。</p><p><strong>并行</strong>说的是多件事情在<strong>同一个时刻</strong>同事发生。</p><p>实际上，如果系统内只有一个CPU，而使用多进程或者多线程任务，那么真实环境中这些任务不可能是真实并行的，毕竟一个CPU一次只能执行一条指令，在这种情况下多进程或者多线程就是并发的，而不是并行的（操作系统会不停地切换多任务）。真实的并行也只可能出现在拥有多个CPU的系统中（比如多核CPU）。</p><h2 id="1-3-临界区"><a href="#1-3-临界区" class="headerlink" title="1.3.临界区"></a>1.3.临界区</h2><p>临界区用来表示一种公共资源或者说共享数据，可以被多个线程使用，但是每一次只能有一个线程使用它，一旦临界区资源被占用，其他线程要想使用这个资源就必须等待。</p><h2 id="1-4-阻塞（Blocking）和非阻塞（Non-Blocking）"><a href="#1-4-阻塞（Blocking）和非阻塞（Non-Blocking）" class="headerlink" title="1.4.阻塞（Blocking）和非阻塞（Non-Blocking）"></a>1.4.阻塞（Blocking）和非阻塞（Non-Blocking）</h2><p>阻塞和非阻塞通常用来形容很多线程间的相互影响。比如一个线程占用了临界区资源，那么其他所有需要这个资源的线程就必须在这个临界区中等待。等待会导致线程挂起，这种情况就是阻塞。此时，如果占用资源的线程一直不愿意释放资源，那么其他线程阻塞在这个临界区上的线程都不能工作。</p><p>非阻塞的意思与之相反，它强调没有一个线程可以妨碍其他线程执行，所有的线程都会尝试不断向前执行。</p><h2 id="1-5-死锁（Deadlock）、饥饿（Starvation）、挂起（Suspension）和活锁（Livelock）"><a href="#1-5-死锁（Deadlock）、饥饿（Starvation）、挂起（Suspension）和活锁（Livelock）" class="headerlink" title="1.5.死锁（Deadlock）、饥饿（Starvation）、挂起（Suspension）和活锁（Livelock）"></a>1.5.死锁（Deadlock）、饥饿（Starvation）、挂起（Suspension）和活锁（Livelock）</h2><p><strong>死锁（Deadlock）：</strong>两个或多个线程持有了对方的资源不释放，而又在等待对方释放资源，造成一种循环等待，大家都无法前进的状态</p><blockquote><p>1.互斥条件（mutual exclusion）：临界资源是独占资源，进程应互斥且排他地使用这些资源。<br>2.占有和等待条件（hold and wait）:进程在请求资源得不到满足而等待时，不释放已占有资源。<br>3.不剥夺条件（no preemption）:又称不可抢占，已获资源只能由进程自愿释放，不允许被其他进程剥夺。<br>4.循环等待（circular wait）：又称环路条件，存在循环等待链，其中，每个进程都在等待链中等待下一个进程所持有的资源，造成这组进程处于永远等待状态。</p><p>前三个条件是死锁存在的必要条件，但不是充分条件。第四个条件是前三个条件同时存在时所产生的结果，故条件并不完全独立。但是单独考虑每个条件是有用的，只要破坏四个之一，就可以防止死锁</p></blockquote><p>在JAVA编程中，有3种典型的死锁类型：</p><ul><li>静态的锁顺序死锁</li><li>动态的锁顺序死锁</li><li>协作对象之间发生的死锁</li></ul><p>静态的锁顺序死锁</p><p>a和b两个方法都需要获得A锁和B锁。一个线程执行a方法且已经获得了A锁，在等待B锁；</p><p>另一个线程执行了b方法且已经获得了B锁，在等待A锁。</p><p>这种状态，就是发生了静态的锁顺序死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lockA = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lockB = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;function a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;function b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决办法：</strong> 所有需要多个锁的线程，都要以相同的顺序来获得锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/正确的代码</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StaticLockOrderDeadLock</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lockA = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object lockB = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;function a&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockA) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (lockB) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;function b&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态的锁顺序死锁<br>        动态的锁顺序死锁是指两个线程调用同一个方法时，传入的参数颠倒造成的死锁。</p><p>一个线程调用了transferMoney方法并传入参数accountA,accountB；</p><p>另一个线程调用了transferMoney方法并传入参数accountB,accountA。</p><p>此时就可能发生在静态的锁顺序死锁中存在的问题，即：第一个线程获得了accountA锁并等待accountB锁，第二个线程获得了accountB锁并等待accountA锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可能发生动态锁顺序死锁的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DynamicLockOrderDeadLock</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transefMoney</span><span class="params">(Account fromAccount, Account toAccount, Double amount)</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (fromAccount) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (toAccount) &#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">fromAccount.minus(amount);</span><br><span class="line">toAccount.add(amount);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong>：使用System.identifyHashCode来定义锁的顺序。确保所有的线程都以相同的顺序获得锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">class DynamicLockOrderDeadLock &#123;</span><br><span class="line">private final Object myLock &#x3D; new Object();</span><br><span class="line">public void transefMoney(final Account fromAccount, final Account toAccount, final Double amount) &#123;</span><br><span class="line">class Helper &#123;</span><br><span class="line">public void transfer() &#123;</span><br><span class="line">&#x2F;&#x2F;...</span><br><span class="line">fromAccount.minus(amount);</span><br><span class="line">toAccount.add(amount);</span><br><span class="line">&#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int fromHash &#x3D; System.identityHashCode(fromAccount);</span><br><span class="line">int toHash &#x3D; System.identityHashCode(toAccount);</span><br><span class="line">if (fromHash &lt; toHash) &#123;</span><br><span class="line">synchronized (fromAccount) &#123;</span><br><span class="line">synchronized (toAccount) &#123;</span><br><span class="line">new Helper().transfer();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (fromHash &gt; toHash) &#123;</span><br><span class="line">synchronized (toAccount) &#123;</span><br><span class="line">synchronized (fromAccount) &#123;</span><br><span class="line">new Helper().transfer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">synchronized (myLock) &#123;</span><br><span class="line">synchronized (fromAccount) &#123;</span><br><span class="line">synchronized (toAccount) &#123;</span><br><span class="line">new Helper().transfer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协作对象之间发生的死锁</p><p>​        有时，死锁并不会那么明显，比如两个相互协作的类之间的死锁</p><ul><li>一个线程调用了Taxi对象的setLocation方法，另一个线程调用了Dispatcher对象的getImage方法。</li><li>此时可能会发生，第一个线程持有Taxi<strong>对象锁</strong>并等待Dispatcher<strong>对象锁</strong>，另一个线程持有Dispatcher对象锁并等待Taxi<strong>对象锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">/可能发生死锁</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Taxi</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Point location, destination;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Dispatcher dispatcher;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Taxi</span><span class="params">(Dispatcher dispatcher)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dispatcher = dispatcher;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Point <span class="title">getLocation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(Point location)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.location = location;</span><br><span class="line"><span class="keyword">if</span> (location.equals(destination))</span><br><span class="line">dispatcher.notifyAvailable(<span class="keyword">this</span>);<span class="comment">//外部调用方法，可能等待Dispatcher对象锁</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Taxi&gt; taxis;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Taxi&gt; availableTaxis;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">taxis = <span class="keyword">new</span> HashSet&lt;Taxi&gt;();</span><br><span class="line">availableTaxis = <span class="keyword">new</span> HashSet&lt;Taxi&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notifyAvailable</span><span class="params">(Taxi taxi)</span> </span>&#123;</span><br><span class="line">availableTaxis.add(taxi);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Image <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Image image = <span class="keyword">new</span> Image();</span><br><span class="line"><span class="keyword">for</span> (Taxi t : taxis)</span><br><span class="line">image.drawMarker(t.getLocation());<span class="comment">//外部调用方法，可能等待Taxi对象锁</span></span><br><span class="line"><span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在持有锁的情况下调用了外部的方法，这是非常危险的（可能发生死锁）。为了避免这种危险的情况发生， 我们使用开放调用。如果调用某个外部方法时不需要持有锁，我们称之为开放调用。</p><p><strong>解决方案</strong>：需要使用开放调用，即避免在持有锁的情况下调用外部的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;正确的代码</span><br><span class="line">class Taxi &#123;</span><br><span class="line">private Point location, destination;</span><br><span class="line">private final Dispatcher dispatcher;</span><br><span class="line">public Taxi(Dispatcher dispatcher) &#123;</span><br><span class="line">this.dispatcher &#x3D; dispatcher;</span><br><span class="line">&#125;</span><br><span class="line">public synchronized Point getLocation() &#123;</span><br><span class="line">return location;</span><br><span class="line">&#125;</span><br><span class="line">public void setLocation(Point location) &#123;</span><br><span class="line">boolean flag &#x3D; false;</span><br><span class="line">synchronized (this) &#123;</span><br><span class="line">this.location &#x3D; location;</span><br><span class="line">flag &#x3D; location.equals(destination);</span><br><span class="line">&#125;</span><br><span class="line">if (flag)</span><br><span class="line">dispatcher.notifyAvailable(this);&#x2F;&#x2F;使用开放调用</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dispatcher &#123;</span><br><span class="line">private final Set&lt;Taxi&gt; taxis;</span><br><span class="line">private final Set&lt;Taxi&gt; availableTaxis;</span><br><span class="line">public Dispatcher() &#123;</span><br><span class="line">taxis &#x3D; new HashSet&lt;Taxi&gt;();</span><br><span class="line">availableTaxis &#x3D; new HashSet&lt;Taxi&gt;();</span><br><span class="line">&#125;</span><br><span class="line">public synchronized void notifyAvailable(Taxi taxi) &#123;</span><br><span class="line">availableTaxis.add(taxi);</span><br><span class="line">&#125;</span><br><span class="line">public Image getImage() &#123;</span><br><span class="line">Set&lt;Taxi&gt; copy;</span><br><span class="line">synchronized (this) &#123;</span><br><span class="line">copy &#x3D; new HashSet&lt;Taxi&gt;(taxis);</span><br><span class="line">&#125;</span><br><span class="line">Image image &#x3D; new Image();</span><br><span class="line">for (Taxi t : copy)</span><br><span class="line">image.drawMarker(t.getLocation());&#x2F;&#x2F;使用开放调用</span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何避免死锁</p><p>（1）持有多个锁的话，锁的顺序要一致<br>（2）尽量避免锁的嵌套<br>（3）持有锁的方法尽量不要引用外部对象，可能外部对象也持有你的锁，会造成死锁</p><p> <strong>饥饿（Starvation）：</strong>指某一个或多个线程因为种种原因无法获得所需的资源，导致一直无法执行 比如它的线程优先级太低，而高优先级的线程不断抢占它所需的资源，导致它无法工作</p><p> <strong>活锁（Livelock）：</strong>线程智力不够，且都秉承着“谦让”的原则。主动将资源释放给他人使用，那么出现资源不断在两个线程中跳动，而没有一个线程可以同时拿到所有资源而正常执行</p><p><strong>挂起（Suspension）：</strong>当线程（未死锁）在队列中等待不可接受的长时间以获取用于访问共享资源的锁时，就会发生挂起。</p><h4 id="四种缺陷的进程状态对比"><a href="#四种缺陷的进程状态对比" class="headerlink" title="四种缺陷的进程状态对比"></a>四种缺陷的进程状态对比</h4><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220920161915351.png" alt="image-20220920161915351"></p><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220920161943051.png" alt="image-20220920161943051"></p><h1 id="2-并发级别"><a href="#2-并发级别" class="headerlink" title="2.并发级别"></a>2.并发级别</h1><h2 id="2-1-阻塞"><a href="#2-1-阻塞" class="headerlink" title="2.1 阻塞"></a>2.1 阻塞</h2><p>一个线程是阻塞的，那么在其他线程释放资源之前，当前线程无法继续执行。比如：使用synchronize关键字或者其他重入锁，我们得到的就是阻塞的线程。无论是synchronized或者重入锁，都会在试图执行后续代码前，得到临界区的锁，如果得不到，线程就会被挂起等待，直到占有了所需资源为止。</p><h2 id="2-2-无饥饿（Starvation-Free）"><a href="#2-2-无饥饿（Starvation-Free）" class="headerlink" title="2.2 无饥饿（Starvation-Free）"></a>2.2 无饥饿（Starvation-Free）</h2><p>如果线程之间是有优先级的，那么线程调度的时候总是会倾向于满足高优先级的线程。也就是说，对于同一个资源的分配，是不公平的。锁也分公平锁和非公平锁，对于非公平锁来说，系统允许高优先级的线程插队。这样就有可能导致低优先级的线程产生饥饿。但是如果是公平锁，满足先来后到，那么饥饿就不会产生，不管新来的线程优先级多高，要想获得资源，就必须乖乖排队。这样所有的线程都有机会执行。</p><h2 id="2-3-无障碍（Obstruction-Free）"><a href="#2-3-无障碍（Obstruction-Free）" class="headerlink" title="2.3 无障碍（Obstruction-Free）"></a>2.3 无障碍（Obstruction-Free）</h2><p>无障碍是一种最弱的非阻塞调度。两个线程如果是无障碍的执行，那么他们不会因为临界区的问题导致一方被挂起。换言之，大家都可以大摇大摆的进入临界区了。那么如果大家一起修改共享区数据，把数据修改坏了怎么办呢？对于无障碍的线程来说，一旦检测到这种情况，它就会立即对自己所做的修改进行回滚，确保数据安全。但是如果没有数据竞争发生，那么线程就可以顺利完成自己的工作，走出临界区。</p><p>从这个策略可以看出，无障碍的多线程程序不一定能顺畅的运行。因为当临界区中存在严重的冲突时，所有的线程可能都会不断的回滚自己的操作，导致没有一个线程能顺利走出临界区。这种情况会影响系统的正常执行。</p><p>一种可行的无障碍实现可以依赖一个“一致性标记”来实现：线程在操作之前，先读取并保存这个标记，在操作完成之后，再次读取，检查这个标记是否更改过，如果两者是一致的，则说明资源访问没有冲突。如果不一致，则说明资源可能在操作过程中与其他线程存在冲突，需要重新操作。而任何对资源有修改操作的线程，在修改数据前，都需要更新这个一致性的标记，表示数据不再安全。</p><h2 id="2-4-无锁（Lock-Free）"><a href="#2-4-无锁（Lock-Free）" class="headerlink" title="2.4 无锁（Lock-Free）"></a>2.4 无锁（Lock-Free）</h2><p>无锁的并行都是无障碍的。在无锁的情况下，所有的线程都能尝试对临界区进行访问，但不同的是，无锁的并发保证必然有一个线程能够在有限步内完成操作走出临界区。</p><p>在无锁的调用中，一个典型的特点是可能会包含一个无线循环。在这个循环中，线程会不断尝试修改共享变量，如果没有冲突，修改成功，那么程序退出。否则继续尝试修改，但无论如何，无锁的并行总能保证一个线程胜出，不会全军覆没。至于临界区中竞争失败的线程，它们则必须不断重试，直到自己获胜，如果运气不好，总是不成功，则会出现饥饿的现象，线程会停止不前。</p><h2 id="2-5-无等待（Wait-Free）"><a href="#2-5-无等待（Wait-Free）" class="headerlink" title="2.5 无等待（Wait-Free）"></a>2.5 无等待（Wait-Free）</h2><p>无锁只要求一个线程可以在有限步数内完成操作，而无等待则是在无锁的基础上更进一步进行扩展，它要求所有的线程都必须在有限步数内完成，这样就不会引起线程饥饿问题。</p><p>一种典型的无等待结构是RCU（Read-Copy-Update）。它的基本思想是，对数据的读可以不加控制。因此，所有的读操作是无等待的，他们既不会被锁定等待也不会引起任何冲突。但是在写数据的时候，先取得原始数据的副本，接着只修改副本数据（这就是为什么读可不加控制），修改完成后，在合适的时机回写数据。</p><p>无锁的并行都是无障碍的。在无锁的情况下，所有的线程都能尝试对临界区进行访问，但不同的是，无锁的并发保证必然有一个线程能够在有限步内完成操作走出临界区。</p><p>在无锁的调用中，一个典型的特点是可能会包含一个无线循环。在这个循环中，线程会不断尝试修改共享变量，如果没有冲突，修改成功，那么程序退出。否则继续尝试修改，但无论如何，无锁的并行总能保证一个线程胜出，不会全军覆没。至于临界区中竞争失败的线程，它们则必须不断重试，直到自己获胜，如果运气不好，总是不成功，则会出现饥饿的现象，线程会停止不前。</p><h1 id="3-并行定律"><a href="#3-并行定律" class="headerlink" title="3.并行定律"></a>3.并行定律</h1><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220920163542462.png" alt="image-20220920163542462"></p><h1 id="4-java内存模型"><a href="#4-java内存模型" class="headerlink" title="4. java内存模型"></a>4. java内存模型</h1><p>JMM(java内存模型)，由于并发程序要比串行程序复杂很多，其中一个重要原因是并发程序中数据访问<strong>一致性</strong>和<strong>安全性</strong>将会受到严重挑战。<strong>如何保证一个线程可以看到正确的数据呢？</strong>这个问题看起来很白痴。对于串行程序来说，根本就是小菜一碟，如果你读取一个变量，这个变量的值是1，那么你读取到的一定是1，就是这么简单的问题在并行程序中居然变得复杂起来。事实上，如果不加控制地任由线程胡乱并行，即使原本是1的数值，你也可能读到2。因此我们需要在深入了解并行机制的前提下，再定义一种规则，保证多个线程间可以有小弟，正确地协同工作。而JMM也就是为此而生的。</p><p>JMM关键技术点都是围绕着多线程的原子性、可见性、有序性来建立的。我们需要先了解这些概念。</p><h2 id="4-1-原子性"><a href="#4-1-原子性" class="headerlink" title="4.1.原子性"></a>4.1.原子性</h2><p>原子性是指<strong>操作是不可分的</strong>，要么全部一起执行，要么不执行。在java中，其表现在对于共享变量的某些操作，是不可分的，必须连续的完成。比如a++，对于共享变量a的操作，实际上会执行3个步骤：</p><p>1.读取变量a的值，假如a=1<br>2.a的值+1，为2<br>3.将2值赋值给变量a，此时a的值应该为2</p><p>这三个操作中任意一个操作，a的值如果被其他线程篡改了，那么都会出现我们不希望出现的结果。所以必须保证这3个操作是原子性的，在操作a++的过程中，其他线程不会改变a的值，如果在上面的过程中出现其他线程修改了a的值，在满足原子性的原则下，上面的操作应该失败。</p><p>java中实现原子操作的方法大致有2种：<strong>锁机制</strong>、<strong>无锁CAS机制</strong>，后面的章节中会有介绍。</p><h2 id="4-2-可见性"><a href="#4-2-可见性" class="headerlink" title="4.2.可见性"></a>4.2.可见性</h2><p><strong>可见性是指一个线程对共享变量的修改，对于另一个线程来说是否是可以看到的。</strong>有些同学会说修改同一个变量，那肯定是可以看到的，难道线程眼盲了？</p><p>为什么会出现这种问题呢？</p><p>看一下java线程内存模型：</p><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220920163849439.png" alt="image-20220920163849439"></p><ul><li>我们定义的所有变量都储存在<code>主内存</code>中</li><li>每个线程都有自己<code>独立的工作内存</code>，里面保存该线程使用到的变量的副本（主内存中该变量的一份拷贝）</li><li>线程对共享变量所有的操作都必须在自己的工作内存中进行，不能直接从主内存中读写（不能越级）</li><li>不同线程之间也无法直接访问其他线程的工作内存中的变量，线程间变量值的传递需要通过主内存来进行。（同级不能相互访问）</li></ul><p>线程需要修改一个共享变量X，需要先把X从主内存复制一份到线程的工作内存，在自己的工作内存中修改完毕之后，再从工作内存中回写到主内存。<br>如果线程对变量的操作没有刷写回主内存的话，仅仅改变了自己的工作内存的变量的副本，那么对于其他线程来说是不可见的。<br>而如果另一个变量没有读取主内存中的新的值，而是使用旧的值的话，同样的也可以列为不可见。</p><p><strong>共享变量可见性的实现原理：</strong></p><p>线程A对共享变量的修改要被线程B及时看到的话，需要进过以下步骤：</p><p>1.线程A在自己的工作内存中修改变量之后，需要将变量的值刷新到主内存中<br>2.线程B要把主内存中变量的值更新到工作内存中</p><p>关于线程可见性的控制，可以使用<strong>volatile</strong>、<strong>synchronized</strong>、<strong>锁</strong>来实现，后面章节会有详细介绍。</p><h2 id="4-3-有序性"><a href="#4-3-有序性" class="headerlink" title="4.3.有序性"></a>4.3.有序性</h2><p>有序性指的是程序按照代码的先后顺序执行。</p><p>为了性能优化，编译器和处理器会进行指令冲排序，有时候会改变程序语句的先后顺序，比如程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>; <span class="comment">//2</span></span><br><span class="line"><span class="keyword">int</span> c = a + b; <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>编译器优化后可能变成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;  <span class="comment">//1</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//2</span></span><br><span class="line"><span class="keyword">int</span> c = a + b; <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>上面这个例子中，编译器调整了语句的顺序，但是不影响程序的最终结果。</p><p>在单例模式的实现上有一种双重检验锁定的方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> Singleton instance;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)</span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先看<code>instance = new Singleton();</code></p><p><strong>未被编译器优化的操作：</strong></p><ol><li>指令1：分配一款内存M</li><li>指令2：在内存M上初始化Singleton对象</li><li>指令3：将M的地址赋值给instance变量</li></ol><p><strong>编译器优化后的操作指令：</strong></p><ol><li>指令1：分配一块内存M</li><li>指令2：将M的地址赋值给instance变量</li><li>指令3：在内存M上初始化Singleton对象</li></ol><p>现在有2个线程，刚好执行的代码被编译器优化过，过程如下：</p><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220920163914478.png" alt="image-20220920163914478"></p><p>最终线程B获取的instance是没有初始化的，此时去使用instance可能会产生一些意想不到的错误。</p><p>现在比较好的做法就是采用静态内部内(单例)的方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemoHandler</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo instance = <span class="keyword">new</span> SingletonDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonDemoHandler.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-线程与进程"><a href="#5-线程与进程" class="headerlink" title="5.线程与进程"></a>5.线程与进程</h1><h2 id="5-1-进程"><a href="#5-1-进程" class="headerlink" title="5.1.进程"></a>5.1.进程</h2><p>进程（Process）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。程序是指令、数据及其组织形式的描述，进程是程序的实体。</p><p><strong>进程具有的特征：</strong></p><ul><li><strong>动态性</strong>：进程是程序的一次执行过程，是临时的，有生命期的，是动态产生，动态消亡的</li><li><strong>并发性</strong>：任何进程都可以同其他进行一起并发执行</li><li><strong>独立性</strong>：进程是系统进行资源分配和调度的一个独立单位</li><li><strong>结构性</strong>：进程由程序，数据和进程控制块三部分组成</li></ul><h2 id="5-2-线程"><a href="#5-2-线程" class="headerlink" title="5.2.线程"></a>5.2.线程</h2><p>线程是轻量级的进程，是程序执行的最小单元，使用多线程而不是多进程去进行并发程序的设计，是因为线程间的切换和调度的成本远远小于进程。</p><p>线程的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    NEW,</span><br><span class="line">    RUNNABLE,</span><br><span class="line">    BLOCKED,</span><br><span class="line">    WAITING,</span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220922142034244.png" alt="image-20220922142034244"></p><h2 id="5-3-线程操作"><a href="#5-3-线程操作" class="headerlink" title="5.3.线程操作"></a>5.3.线程操作</h2><p>线程是需要依赖进程的，事实上，进程运行时并不会工作，而是线程在工作，进程只是在内存中申请了一块空间而已，所以进程是一个资源单位，而线程是执行单位；就相当于进程创建工厂，而线程是工厂的打工人。</p><p>开设线程的消耗远远小于进程，一个进程里至少有一个线程，也可以开设多个线程，创建线程无需申请内存空间，创建消耗资源小，并且一个进程内的多个线程数据是共享的。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p><strong>继承Thread类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Mythread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**继承Thread类**&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Mythread().start();</span><br><span class="line">    &#125;</span><br><span class="line">************************************************************************</span><br><span class="line">    <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**继承Thread类**&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure><blockquote><p>实现步骤:</p><ul><li>继承 <code>Thread</code> 类</li><li>覆盖 <code>run()</code> 方法</li><li>直接调用 <code>Thread#start()</code> 执行</li></ul><p>逻辑比较清晰，只需要注意覆盖的是run方法，而不是start方法</p></blockquote><p><strong>实现Runable接口</strong></p><p>实现Runnable接口是比较常见的做法，也是推荐的做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**实现Runable接口**&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Mythread().start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRun()).start();</span><br><span class="line">    &#125;</span><br><span class="line">***************************************************************************</span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;**实现Runable接口**!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure><blockquote><p>般实现步骤:</p><ul><li>实现<code>Runnable</code>接口</li><li>获取实现Runnable接口的实例，作为参数，创建Thread实例</li><li>执行 <code>Thread#start()</code> 启动线程</li></ul><p><strong>说明</strong></p><p>相比于继承Thread，这里是实现一个接口，最终依然是借助 <code>Thread#start()</code>来启动线程</p></blockquote><p><strong>实现Callable接口</strong>，结合FutureTask创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;实现Callable接口&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;实现Callable接口&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Mythread().start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyRun()).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程创建的第三种方法&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line"> </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> MyCall()));</span><br><span class="line">        thread.start();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><blockquote><p>实现步骤：</p><ul><li>实现<code>Callable</code>接口</li><li>以<code>Callable</code>的实现类为参数，创建<code>FutureTask</code>实例</li><li>将<code>FutureTask</code>作为Thread的参数，创建Thread实例</li><li>通过 <code>Thread#start</code> 启动线程</li><li>通过 <code>FutreTask#get()</code> 阻塞获取线程的返回值</li></ul><p><strong>说明</strong></p><p>Callable接口相比Runnable而言，会有结果返回，因此会由FutrueTask进行封装，以期待获取线程执行后的结果；</p><p>最终线程的启动都是依赖<code>Thread#start</code></p></blockquote><h3 id="线程池方式创建"><a href="#线程池方式创建" class="headerlink" title="线程池方式创建"></a>线程池方式创建</h3><ul><li>通过 ThreadPoolExecutor 手动创建线程池。</li><li>通过 Executors 执行器自动创建线程池。</li></ul><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220922145543441.png" alt="image-20220922145543441"></p><p>而以上两类创建线程池的方式，又有 7 种具体实现方法，这 7 种实现方法分别是：</p><ol><li><p>Executors.newFixedThreadPool：创建一个固定大小的线程池，可控制并发的线程数，超出的线程会在队列中等待。</p></li><li><p>Executors.newCachedThreadPool：创建一个可缓存的线程池，若线程数超过处理所需，缓存一段时间后会回收，若线程数不够，则新建线程。</p></li><li><p>Executors.newSingleThreadExecutor：创建单个线程数的线程池，它可以保证先进先出的执行顺序。</p></li><li><p>Executors.newScheduledThreadPool：创建一个可以执行延迟任务的线程池。</p></li><li><p>Executors.newSingleThreadScheduledExecutor：创建一个单线程的可以执行延迟任务的线程池。</p></li><li><p>Executors.newWorkStealingPool：创建一个抢占式执行的线程池（任务执行顺序不确定）【JDK 1.8 添加】。</p></li><li><p>ThreadPoolExecutor：手动创建线程池的方式，它创建时最多可以设置 7 个参数。</p><p><strong>线程池的创建推荐使用最后一种 ThreadPoolExecutor 的方式来创建，因为使用它可以明确线程池的运行规则，规避资源耗尽的风险</strong>。</p></li></ol><p><strong>1.FixedThreadPool</strong></p><p>创建一个固定大小的线程池，可控制并发线程数。<br>使用 FixedThreadPool 创建 2 个固定大小的线程池，具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建 2 个线程的线程池</span></span><br><span class="line">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建任务</span></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务被执行,线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 线程池执行任务(一次添加 4 个任务)</span></span><br><span class="line">    <span class="comment">// 执行任务的方法有两种:submit 和 execute</span></span><br><span class="line">    threadPool.submit(runnable);  <span class="comment">// 执行方式 1:submit</span></span><br><span class="line">    threadPool.execute(runnable); <span class="comment">// 执行方式 2:execute</span></span><br><span class="line">    threadPool.execute(runnable);</span><br><span class="line">    threadPool.execute(runnable);</span><br><span class="line">&#125;</span><br><span class="line">*********************************************************************************</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    threadPool.execute(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务被执行,线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220922145824089.png" alt="image-20220922145824089"></p><p><strong>2.CachedThreadPool</strong></p><p>创建一个可缓存的线程池，若线程数超过任务所需，那么多余的线程会被缓存一段时间后才被回收，若线程数不够，则会新建线程。</p><p>CachedThreadPool 是根据短时间的任务量来决定创建的线程数量的，所以它适合短时间内有突发大量任务的处理场景。具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ExecutorService threadPool = Executors.newCachedThreadPool();</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务被执行,线程:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220922145841175.png" alt="image-20220922145841175"></p><p><strong>3.SingleThreadExecutor</strong></p><p>创建单个线程的线程池，它可以保证先进先出的执行顺序。<br>具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">singleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ExecutorService threadPool = Executors.newSingleThreadExecutor();</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(index + <span class="string">&quot;:任务被执行&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220922150033639.png" alt="image-20220922150033639"></p><p>单个线程的线程池相比于线程来说，它的优点有以下 2 个：</p><ul><li>可以复用线程：即使是单个线程池，也可以复用线程。</li><li>提供了任务管理功能：单个线程池也拥有任务队列，在任务队列可以存储多个任务，这是线程无法实现的，并且当任务队列满了之后，可以执行拒绝策略，这些都是线程不具备的。</li></ul><p><strong>4.ScheduledThreadPool</strong></p><p>创建一个可以执行延迟任务的线程池。<br>使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scheduledThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">// 添加定时执行任务(1s 后执行)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;添加任务,时间:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    threadPool.schedule(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务被执行,时间:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.SingleThreadScheduledExecutor</strong></p><p>创建一个单线程的可以执行延迟任务的线程池，此线程池可以看作是 ScheduledThreadPool 的单线程池版本。<br>它的使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SingleThreadScheduledExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ScheduledExecutorService threadPool = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">    <span class="comment">// 添加定时执行任务(2s 后执行)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;添加任务,时间:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">    threadPool.schedule(() -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;任务被执行,时间:&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.newWorkStealingPool</strong></p><p>创建一个抢占式执行的线程池（任务执行顺序不确定），此方法是 JDK 1.8 版本新增的，因此只有在 JDK 1.8 以上的程序中才能使用。<br>newWorkStealingPool 使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">workStealingPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ExecutorService threadPool = Executors.newWorkStealingPool();</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(index + <span class="string">&quot; 被执行,线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 确保任务执行完成</span></span><br><span class="line">    <span class="keyword">while</span> (!threadPool.isTerminated()) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.ThreadPoolExecutor</strong></p><p><strong>ThreadPoolExecutor 是最原始、也是最推荐的手动创建线程池的方式</strong>，它在创建时最多提供 7 个参数可供设置。<br>ThreadPoolExecutor 使用示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myThreadPoolExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建线程池</span></span><br><span class="line">    ThreadPoolExecutor threadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">10</span>, <span class="number">100</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 执行任务</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">        threadPool.execute(() -&gt; &#123;</span><br><span class="line">            System.out.println(index + <span class="string">&quot; 被执行,线程名:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ThreadPoolExecutor 相比于其他创建线程池的优势在于，它可以通过参数来控制最大任务数和拒绝策略，让线程池的执行更加透明和可控</strong></p><h3 id="终止线程"><a href="#终止线程" class="headerlink" title="终止线程"></a>终止线程</h3><p><strong>Thread线程类自带的stop方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r += <span class="number">1</span>;</span><br><span class="line">            Thread.sleep(<span class="number">1200</span>);</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();<span class="comment">//启动,执行r+=1 ；r=1 线程等待1200</span></span><br><span class="line">    Thread.sleep(<span class="number">500</span>);<span class="comment">//线程等待500</span></span><br><span class="line">    t.stop();<span class="comment">//线程结束</span></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    System.out.println(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>jdk不建议使用，因为stop方法终止线程只是强行终止，内存中部分值可能已发生变化，并未保证数据的一致性，将会导致线程安全问题</p></blockquote><p><strong>Thread线程类的interrupt方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interruptThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r += <span class="number">1</span>;</span><br><span class="line">            Thread.sleep(<span class="number">1200</span>);</span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// 线程中断后需要做的操作</span></span><br><span class="line">            r -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">    Thread.sleep(<span class="number">500</span>);</span><br><span class="line">    t.interrupt();<span class="comment">//线程抛出 InterruptedException</span></span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    System.out.println(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程因Object.wait()、Object.wait(long)、Object.wait(long,int)、Thread.join、Thread.join(long,int)、Thread.sleep(long,int)等方法处于等待状态时，调用interrupt方法，线程会抛出InterruptedException异常，此时线程并非被终止，而是进入异常，可使用try catch让线程做对应的处理后结束执行，既保障了数据，线程也会正常终止</p><p><strong>使用标志位</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">flagStopThread</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;运行中……&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);<span class="comment">//主线程在1000毫秒后将其标志为修改为false，从而使得线程t在结束当前循环后因flag不为true而终止运行。</span></span><br><span class="line">    flag = <span class="keyword">false</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;线程t运行结束&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当标志位符合条件时令线程自行终止，标志位需要使用volatile关键字来保证其可见性，防止发生线程安全问题</p><p>错误案例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">flagStopThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">T1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot; in&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;停止了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> T1(<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="comment">//休眠1秒</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//将flag置为false</span></span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程t1的run()方法中有个循环，通过flag来控制循环是否结束，主线程中休眠了1秒，将flag置为false，按说此时线程t1会检测到flag为false，打印“线程t1停止了。但由于t1中看到的flag一直为ture，主线程将flag置为false之后，t1线程中没有看到，所以一直死循环。</p><p><strong>不使用volatile修饰共享</strong></p><ol><li><p><strong>主线程修改了flag之后，未将其刷新到主内存，所以t1看不到</strong></p></li><li><p><strong>主线程将flag刷新到了主内存，但是t1一直读取的是自己工作内存中flag的值，没有去主内存中获取flag最新的值</strong></p></li></ol><p><strong>使用volatile修饰共享</strong></p><ol><li><strong>线程中读取的时候，每次读取都会去主内存中读取共享变量最新的值，然后将其复制到工作内存</strong></li><li><strong>线程中修改了工作内存中变量的副本，修改之后会立即刷新到主内存</strong></li></ol><blockquote><p>保证参数共享，我们也可以用<strong>synchronized</strong>，它可以保证在同一个时刻，只有一个线程可以执行某个方法或者某个代码块(主要是对方法或者代码块中存在共享数据的操作)<strong>，</strong>同时我们还应该注意到synchronized另外一个重要的作用，synchronized可保证一个线程的变化(主要是共享数据的变化)被其他线程所看到（保证可见性，完全可以替代volatile功能）**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Demo1.m1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        T1 t2 = <span class="keyword">new</span> T1();</span><br><span class="line">        T1 t3 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        <span class="comment">//等待3个线程结束打印num</span></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">    &#125;</span><br><span class="line">System.out.println(Demo1.num); <span class="comment">//输出30000</span></span><br></pre></td></tr></table></figure><h3 id="等待（wait）和通知（notify）"><a href="#等待（wait）和通知（notify）" class="headerlink" title="等待（wait）和通知（notify）"></a>等待（wait）和通知（notify）</h3><h4 id="Object-wait-和notify"><a href="#Object-wait-和notify" class="headerlink" title="Object wait()和notify()"></a>Object wait()和notify()</h4><p>为了支撑多线程之间的<strong>协作</strong>，JDK提供了两个非常重要的线程接口：等待wait()方法和通知notify()方法，这两个方法并不是在Thread类中的，而是输出在Object类。这意味着任何对象都可以调用这两个方法。</p><p>当在一个对象实例上调用wait()方法后，当前线程就会在这个对象上等待。</p><blockquote><p>比如，在线程A中，调用了obj.wait()方法，那么线程A就会停止继续执行，转为等待状态。等待到何时结束呢？线程A会一直等到其他线程调用了obj.notity()方法为止</p></blockquote><ul><li><p>​        如果一个线程调用了object.wait()方法，那么它就会进入object对象的等待队列，这个队列中，可能会有多个线程，因为系统运行多个线程同时等待某一个对象，</p></li><li><p>当object.notify()方法被调用的时候，它就会从这个等待队列中随机选择一个线程，并进行唤醒。</p></li><li><p>除notity()方法外，Object对象还有一个类似的notifyAll()方法，它和notity方法的功能基本一致，不同的是，它会唤醒在这个等待队列中所有等待的线程，而不是随机一个。</p></li><li><p>Object 对象还有一个类似的notifyAll()方法，它和notif()方法的功能基本一致，不同的是，它会唤醒在这个等待队列中所有等待的线程，而不是随机选择一个。</p></li><li><p>object.wait()方法并不能随便调用。它必须包含在对象的synchronzied语句中，无论是wait()方法或者notity()方法都需要首先获得目标对象的一个监视器。</p><p>​     当多线程存在以下情况的时候就会出现线程安全问题。我们就要要到synchronized</p><ol><li>一是存在共享数据(也称临界资源)</li><li>二是存在多条线程共同操作共享数据</li></ol><p>​        <strong>synchronized主要有3种使用方式</strong></p><pre><code>    1. 修饰实例方法，作用于当前实例，进入同步代码前需要先获取实例的锁    2. 修饰静态方法，作用于类的Class对象，进入修饰的静态方法前需要先获取类的Class对象的锁    3. 修饰代码块，需要指定加锁对象(记做lockobj)，在进入同步代码块前需要先获取lockobj的锁</code></pre></li></ul><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930092259743.png" alt="image-20220930092259743"></p><ul><li><p>1和T2表示两个线程。TI在正确执行wait方法前，必须获得object对象的监视器。而wait方法在执行后，会释放这个监视器。这样做的目的是使其他等待在object对象上的线程不至于因为T1的休眠而全部无法正常执行。</p></li><li><p>线程T2在notify方法调用前，也必须获得objet对象的监视器。</p></li><li><p>T1已经释放了这个监视器。因此，T2可以顺利获得object对象的监视器。</p></li><li><p>接着，T2执行了notify方法尝试唤醒一个等待线程，这里假设唤醒了T1。</p></li><li><p> T1在被唤醒后，要做的第一件事并不是执行后续的代码，而是要尝试重新获得object 对象的监视器，而这个监视器也正是T1在wait方法执行前所持有的那个。</p></li><li><p>如果暂时无法获得，则T1还必须等待这个监视器。当监视器顺利获得后，T1才可以真正意义上继续执行</p></li></ul><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930092400585.png" alt="image-20220930092400585"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadWaitAndNotify</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Object object=<span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadWait</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object)&#123;<span class="comment">//执行wait0方法前，A先申请object的对象锁</span></span><br><span class="line">                <span class="comment">//A在得到notify()方法通知后，还是会先尝试重新获得object 的对象锁。</span></span><br><span class="line">                System.out.println(System.currentTimeMillis()+<span class="string">&quot;A开始运行&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    object.wait();<span class="comment">//wait()方法执行后，A 会进行等待，并释放obiet的对象锁</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(System.currentTimeMillis()+<span class="string">&quot;重新获取到监视器,继续执行run方法中代码块——A结束运行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNotify</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object)&#123;<span class="comment">//执行notify方法之前也会先获得object的对象锁</span></span><br><span class="line">                System.out.println(System.currentTimeMillis()+<span class="string">&quot;B开始运行&quot;</span>);</span><br><span class="line">                    object.notify();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(System.currentTimeMillis()+<span class="string">&quot;释放监视器——B结束运行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ThreadWait().start();</span><br><span class="line">        <span class="keyword">new</span> ThreadNotify().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程A进入synchronized（obj）中之后，也就是对obj上锁，此时调用wait（）方法进入阻塞状态，一直不能退 出synchronized代码块；那么，线程B永远无法进入synchronized(obj)同步块里，永远没有机会调用notify,岂不是死锁了?所以wait()方法执行后，并释放obiet的对象锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">private Object obj1 &#x3D;new Object();</span><br><span class="line">public void f1() &#123;</span><br><span class="line">synchronized(obj1) &#123;</span><br><span class="line">...</span><br><span class="line">obj1.wait()</span><br><span class="line">.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public void f2()&#123;</span><br><span class="line">synchronized(obj1) &#123;</span><br><span class="line">objl.notify()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>线程A调用fl,线程B调用f2。两个线程之间要通信，对于同一个对象来说，一个线程调用该对象的wait,另一个线程调用该对象的notify),该对象本身就需要同步!!!所以，在调用wait、notify之前 ，要先通过synchronized 关键字同步给对象，也就是给该对象加锁。</p><p>synchronized 关键字可以加在任何对象的成员函数上面，任何对象都可能成为锁。那么，wait和noify要同样如此普及，也只能放在Object里面了。</p></blockquote><h4 id="Condition完成等待通知机制"><a href="#Condition完成等待通知机制" class="headerlink" title="Condition完成等待通知机制"></a>Condition完成等待通知机制</h4><p><del>ps：这块可以滤过先看LOCK</del></p><p><strong>Object的wait和notify/notify</strong>与<strong>Condition与Lock</strong> 对比<strong>前者是java底层级别的，后者是语言级别的，具有更高的可控制性和扩展性</strong>。 </p><ol><li>Condition能够支持不响应中断，而通过使用Object方式不支持</li><li>Condition能够支持多个等待队列（new 多个Condition对象），而Object方式只能支持一个</li><li>Condition能够支持超时时间的设置，而Object不支持</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">   <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;准备获取锁!&quot;</span>);</span><br><span class="line">           lock.lock();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;获取锁成功!&quot;</span>);</span><br><span class="line">               condition.await();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;释放锁成功!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;准备获取锁!&quot;</span>);</span><br><span class="line">           lock.lock();</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;获取锁成功!&quot;</span>);</span><br><span class="line">               condition.signal();</span><br><span class="line">               System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot; signal!&quot;</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;准备释放锁!&quot;</span>);</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               lock.unlock();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;释放锁成功!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">       t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">       T2 t2 = <span class="keyword">new</span> T2();</span><br><span class="line">       t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">       t2.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930161413060.png" alt="image-20220930161413060"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Condition.await()方法和Object.wait()方法类似，当使用Condition.await()方法时，需要先获取Condition对象关联的ReentrantLock的锁，</span><br><span class="line">在Condition.await()方法被调用时，当前线程会释放这个锁，并且当前线程会进行等待（处于阻塞状态）。</span><br><span class="line">&#39;在signal()方法被调用后，系统会从Condition对象的等待队列中唤醒一个线程，一旦线程被唤醒，被唤醒的线程会尝试重新获取锁，一旦获取成功，就可以继续执行了。</span><br><span class="line">因此，在signal被调用后，一般需要释放相关的锁，让给其他被唤醒的线程，让他可以继续执行。</span><br></pre></td></tr></table></figure><h5 id="Condition-await-过程中被打断"><a href="#Condition-await-过程中被打断" class="headerlink" title="Condition.await()过程中被打断"></a>Condition.await()过程中被打断</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                condition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;中断标志：&quot;</span> + <span class="keyword">this</span>.isInterrupted());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//给t1线程发送中断信号</span></span><br><span class="line">        System.out.println(<span class="string">&quot;1、t1中断标志：&quot;</span> + t1.isInterrupted());</span><br><span class="line">        t1.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;2、t1中断标志：&quot;</span> + t1.isInterrupted());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    <img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930161552398.png" alt="image-20220930161552398"><br>​    调用condition.await()之后，线程进入阻塞中，调用t1.interrupt()，给t1线程发送中断信号，await()方法内部会检测到线程中断信号，然后触发InterruptedException异常，线程中断标志被清除。从输出结果中可以看出，线程t1中断标志的变换过程：false-&gt;true-&gt;false</p><p>await(long time, TimeUnit unit)超时之后自动返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,start&quot;</span>);</span><br><span class="line">                <span class="keyword">boolean</span> r = condition.await(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">                System.out.println(r);</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930161816102.png" alt="image-20220930161816102"></p><p>t1线程等待2秒之后，自动返回继续执行，最后await方法返回false，<strong>await返回false表示超时之后自动返回</strong></p><h5 id="await-long-time-TimeUnit-unit-超时之前被唤醒"><a href="#await-long-time-TimeUnit-unit-超时之前被唤醒" class="headerlink" title="await(long time, TimeUnit unit)超时之前被唤醒"></a>await(long time, TimeUnit unit)超时之前被唤醒</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,start&quot;</span>);</span><br><span class="line">                <span class="keyword">boolean</span> r = condition.await(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">                System.out.println(r);</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠1秒之后，唤醒t1线程</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930161918108.png" alt="image-20220930161918108"></p><p>t1线程中调用<code>condition.await(5, TimeUnit.SECONDS);</code>方法会释放锁，等待5秒，主线程休眠1秒，然后获取锁，之后调用signal()方法唤醒t1，await后过了1秒（1、3行输出结果的时间差），await方法就返回了，并且返回值是true。<strong>true表示await方法超时之前被其他线程唤醒了。</strong></p><h5 id="long-awaitNanos-long-nanosTimeout-超时返回"><a href="#long-awaitNanos-long-nanosTimeout-超时返回" class="headerlink" title="long awaitNanos(long nanosTimeout)超时返回"></a>long awaitNanos(long nanosTimeout)超时返回</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,start&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> r = condition.awaitNanos(TimeUnit.SECONDS.toNanos(<span class="number">5</span>));<span class="comment">//awaitNanos参数为纳秒，可以调用TimeUnit中的一些方法将时间转换为纳秒。</span></span><br><span class="line">                System.out.println(r);</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="waitNanos-long-nanosTimeout-超时之前被唤"><a href="#waitNanos-long-nanosTimeout-超时之前被唤" class="headerlink" title="waitNanos(long nanosTimeout)超时之前被唤"></a>waitNanos(long nanosTimeout)超时之前被唤</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,start&quot;</span>);</span><br><span class="line">                <span class="keyword">long</span> r = condition.awaitNanos(TimeUnit.SECONDS.toNanos(<span class="number">5</span>));</span><br><span class="line">                System.out.println(r);</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;,end&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠1秒之后，唤醒t1线程</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930162008708.png" alt="image-20220930162008708"></p><p>t1中调用await休眠5秒，主线程休眠1秒之后，调用signal()唤醒线程t1，await方法返回正数，表示返回时距离超时时间还有多久，将近4秒，返回正数表示，线程在超时之前被唤醒了。</p><p><strong>其他几个有参的await方法和无参的await方法一样，线程调用interrupt()方法时，这些方法都会触发InterruptedException异常，并且线程的中断标志会被清除。</strong></p><h5 id="同一个锁支持创建多个Condition"><a href="#同一个锁支持创建多个Condition" class="headerlink" title="同一个锁支持创建多个Condition"></a>同一个锁支持创建多个Condition</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> size;<span class="comment">//阻塞队列最大容量</span></span><br><span class="line">  ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  LinkedList&lt;E&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();<span class="comment">//队列底层实现</span></span><br><span class="line">  Condition notFull = lock.newCondition();<span class="comment">//队列满时的等待条件</span></span><br><span class="line">  Condition notEmpty = lock.newCondition();<span class="comment">//队列空时的等待条件</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BlockingQueueDemo</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.size = size;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (list.size() == size)<span class="comment">//队列已满,在notFull条件上等待</span></span><br><span class="line">              notFull.await();</span><br><span class="line">          list.add(e);<span class="comment">//入队:加入链表末尾</span></span><br><span class="line">          System.out.println(<span class="string">&quot;入队：&quot;</span> + e);</span><br><span class="line">          notEmpty.signal(); <span class="comment">//通知在notEmpty条件上等待的线程</span></span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      E e;</span><br><span class="line">      lock.lock();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (list.size() == <span class="number">0</span>)<span class="comment">//队列为空,在notEmpty条件上等待</span></span><br><span class="line">              notEmpty.await();</span><br><span class="line">          e = list.removeFirst();<span class="comment">//出队:移除链表首元素</span></span><br><span class="line">          System.out.println(<span class="string">&quot;出队：&quot;</span> + e);</span><br><span class="line">          notFull.signal();<span class="comment">//通知在notFull条件上等待的线程</span></span><br><span class="line">          <span class="keyword">return</span> e;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          lock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      BlockingQueueDemo&lt;Integer&gt; queue = <span class="keyword">new</span> BlockingQueueDemo&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">int</span> data = i;</span><br><span class="line">          <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      queue.enqueue(data);</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;).start();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      Integer data = queue.dequeue();</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                      e.printStackTrace();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;).start();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">创建了一个阻塞队列，大小为3，队列满的时候，会被阻塞，等待其他线程去消费，队列中的元素被消费之后，会唤醒生产者，生产数据进入队列。上面代码将队列大小置为1，可以实现同步阻塞队列，生产1个元素之后，生产者会被阻塞，待消费者消费队列中的元素之后，生产者才能继续工作。</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930162335337.png" alt="image-20220930162335337"></p><p>Object的监视器方法与Condition接口的对比</p><table><thead><tr><th>对比项</th><th>Object 监视器方法</th><th>Condition</th></tr></thead><tbody><tr><td>前置条件</td><td>获取对象的锁</td><td>调用Lock.lock获取锁，调用Lock.newCondition()获取Condition对象</td></tr><tr><td>调用方式</td><td>直接调用，如：object.wait()</td><td>直接调用，如：condition.await()</td></tr><tr><td>等待队列个数</td><td>一个</td><td>多个，使用多个condition实现</td></tr><tr><td>当前线程释放锁并进入等待状态</td><td>支持</td><td>支持</td></tr><tr><td>当前线程释放锁进入等待状态中不响应中断</td><td>不支持</td><td>支持</td></tr><tr><td>当前线程释放锁并进入超时等待状态</td><td>支持</td><td>支持</td></tr><tr><td>当前线程释放锁并进入等待状态到将来某个时间</td><td>不支持</td><td>支持</td></tr><tr><td>唤醒等待队列中的一个线程</td><td>支持</td><td>支持</td></tr><tr><td>唤醒等待队列中的全部线程</td><td>支持</td><td>支持</td></tr></tbody></table><blockquote><ol><li>使用condition的步骤：创建condition对象，获取锁，然后调用condition的方法</li><li>一个ReentrantLock支持床多个condition对象</li><li><code>void await() throws InterruptedException;</code>方法会释放锁，让当前线程等待，支持唤醒，支持线程中断</li><li><code>void awaitUninterruptibly();</code>方法会释放锁，让当前线程等待，支持唤醒，不支持线程中断</li><li><code>long awaitNanos(long nanosTimeout) throws InterruptedException;</code>参数为纳秒，此方法会释放锁，让当前线程等待，支持唤醒，支持中断。超时之后返回的，结果为负数；超时之前返回的，结果为正数（表示返回时距离超时时间相差的纳秒数）</li><li><code>boolean await(long time, TimeUnit unit) throws InterruptedException;</code>方法会释放锁，让当前线程等待，支持唤醒，支持中断。超时之后返回的，结果为false；超时之前返回的，结果为true</li><li><code>boolean awaitUntil(Date deadline) throws InterruptedException;</code>参数表示超时的截止时间点，方法会释放锁，让当前线程等待，支持唤醒，支持中断。超时之后返回的，结果为false；超时之前返回的，结果为true</li><li><code>void signal();</code>会唤醒一个等待中的线程，然后被唤醒的线程会被加入同步队列，去尝试获取锁</li><li><code>void signalAll();</code>会唤醒所有等待中的线程，将所有等待中的线程加入同步队列，然后去尝试获取锁</li></ol></blockquote><h5 id="LockSupport完成等待通知机制"><a href="#LockSupport完成等待通知机制" class="headerlink" title="LockSupport完成等待通知机制"></a>LockSupport完成等待通知机制</h5><p><del>ps：这块可以滤过先看LOCK</del></p><p>LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程。主要是通过**park()<strong>和</strong>unpark(thread)**方法来实现阻塞和唤醒线程的操作的。</p><blockquote><p>每个线程都有一个许可(permit)，<strong>permit只有两个值1和0</strong>，默认是0。</p><ol><li>当调用unpark(thread)方法，就会将thread线程的许可permit设置成1(<strong>注意多次调用unpark方法，不会累加，permit值还是1</strong>)。</li><li>当调用park()方法，如果当前线程的permit是1，那么将permit设置为0，并立即返回。如果当前线程的permit是0，那么当前线程就会阻塞，直到别的线程将当前线程的permit设置为1时，park方法会被唤醒，然后会将permit再次设置为0，并返回。</li></ol><p>注意：因为permit默认是0，所以一开始调用park()方法，线程必定会被阻塞。调用unpark(thread)方法后，会自动唤醒thread线程，即park方法立即返回。</p></blockquote><p><strong>LockSupport中常用的方法</strong></p><p><strong>阻塞线程</strong></p><ul><li>void park()：阻塞当前线程，如果调用<strong>unpark方法</strong>或者<strong>当前线程被中断</strong>，从能从park()方法中返回</li><li>void park(Object blocker)：功能同方法1，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查</li><li>void parkNanos(long nanos)：阻塞当前线程，最长不超过nanos纳秒，增加了超时返回的特性</li><li>void parkNanos(Object blocker, long nanos)：功能同方法3，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查</li><li>void parkUntil(long deadline)：阻塞当前线程，直到deadline，deadline是一个绝对时间，表示某个时间的毫秒格式</li><li>void parkUntil(Object blocker, long deadline)：功能同方法5，入参增加一个Object对象，用来记录导致线程阻塞的阻塞对象，方便进行问题排查；</li></ul><p><strong>唤醒线程</strong></p><ul><li>void unpark(Thread thread):唤醒处于阻塞状态的指定线程</li></ul><p>主线程线程等待5秒之后，唤醒t1线程</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">          Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">              System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; start!&quot;</span>);</span><br><span class="line">              LockSupport.park();</span><br><span class="line">              System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 被唤醒!&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">          t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">          t1.start();</span><br><span class="line">          <span class="comment">//休眠5秒</span></span><br><span class="line">          TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">          LockSupport.unpark(t1);</span><br><span class="line">          System.out.println(System.currentTimeMillis() + <span class="string">&quot;,LockSupport.unpark();执行完毕&quot;</span>);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p> <img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930162743388.png" alt="image-20220930162743388"></p><p> t1中调用LockSupport.park();让当前线程t1等待，主线程休眠了5秒之后，调用LockSupport.unpark(t1);将t1线程唤醒，t1线程等待5秒之后，被唤醒了。</p><p>  LockSupport.park();无参数，内部直接会让当前线程处于等待中；unpark方法传递了一个线程对象作为参数，表示将对应的线程唤醒。</p><p>  唤醒方法放在等待方法之前执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; start!&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 被唤醒!&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠1秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">        System.out.println(System.currentTimeMillis() + <span class="string">&quot;,LockSupport.unpark();执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930162822537.png" alt="image-20220930162822537"></p><p>代码中启动t1线程，t1线程内部休眠了5秒，然后主线程休眠1秒之后，调用了<code>LockSupport.unpark(t1);</code>唤醒线程t1，此时<code>LockSupport.park();</code>方法还未执行，说明唤醒方法在等待方法之前执行的；LockSupport.park();`没有阻塞了，是立即返回的</p><p>说明：<strong>唤醒方法在等待方法之前执行，线程也能够被唤醒，这点是另外2中方法无法做到的。Object和Condition中的唤醒必须在等待之后调用，线程才能被唤醒。而LockSupport中，唤醒的方法不管是在等待之前还是在等待之后调用，线程都能够被唤醒。</strong></p><p>park()让线程等待之后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; start!&quot;</span>);</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,park()之前中断标志：&quot;</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">           LockSupport.park();</span><br><span class="line">           System.out.println(Thread.currentThread().getName() + <span class="string">&quot;,park()之后中断标志：&quot;</span> + Thread.currentThread().isInterrupted());</span><br><span class="line">           System.out.println(System.currentTimeMillis() + <span class="string">&quot;,&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 被唤醒!&quot;</span>);</span><br><span class="line">       &#125;);</span><br><span class="line">       t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       <span class="comment">//休眠5秒</span></span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">       t1.interrupt();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930162905290.png" alt="image-20220930162905290"></p><p>1线程中调用了park()方法让线程等待，主线程休眠了5秒之后，调用<code>t1.interrupt();</code>给线程t1发送中断信号，然后线程t1从等待中被唤醒了，输出结果中的1、4行结果相差5秒左右，刚好是主线程休眠了5秒之后将t1唤醒了。<strong>结论：park方法可以相应线程中断。</strong></p><p><strong>LockSupport.park方法让线程等待之后，唤醒方式有2种：</strong></p><ol><li><strong>调用LockSupport.unpark方法</strong></li><li><strong>调用等待线程的<code>interrupt()</code>方法，给等待的线程发送中断信号，可以唤醒线程</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockerDemo</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           LockSupport.park();</span><br><span class="line">       &#125;);</span><br><span class="line">       t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">           LockSupport.park(<span class="keyword">new</span> BlockerDemo());</span><br><span class="line">       &#125;);</span><br><span class="line">       t2.setName(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">       t2.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&quot;t2&quot; #13 prio&#x3D;5 os_prio&#x3D;0 tid&#x3D;0x00000000293ea800 nid&#x3D;0x91e0 waiting on condition [0x0000000029c3f000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to wait for  &lt;0x00000007180bfeb0&gt; (a com.itsoku.chat10.Demo10$BlockerDemo)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at com.itsoku.chat10.Demo10.lambda$main$1(Demo10.java:22)</span><br><span class="line">        at com.itsoku.chat10.Demo10$$Lambda$2&#x2F;824909230.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">&quot;t1&quot; #12 prio&#x3D;5 os_prio&#x3D;0 tid&#x3D;0x00000000293ea000 nid&#x3D;0x9d4 waiting on condition [0x0000000029b3f000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)</span><br><span class="line">        at com.itsoku.chat10.Demo10.lambda$main$0(Demo10.java:16)</span><br><span class="line">        at com.itsoku.chat10.Demo10$$Lambda$1&#x2F;1389133897.run(Unknown Source)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><p>代码中，线程t1和t2的不同点是，t2中调用park方法传入了一个BlockerDemo对象，从上面的线程堆栈信息中，发现t2线程的堆栈信息中多了一行<code>- parking to wait for &lt;0x00000007180bfeb0&gt; (a com.itsoku.chat10.Demo10$BlockerDemo)</code>，刚好是传入的BlockerDemo对象，park传入的这个参数可以让我们在线程堆栈信息中方便排查问题，其他暂无他用。</p><p><strong>LockSupport的其他等待方法，包含有超时时间了，过了超时时间，等待方法会自动返回，让线程继续运行，这些方法在此就不提供示例了，有兴趣的朋友可以自己动动手，练一练。</strong></p><h5 id="线程等待和通知的3种方式做个对比"><a href="#线程等待和通知的3种方式做个对比" class="headerlink" title="线程等待和通知的3种方式做个对比"></a>线程等待和通知的3种方式做个对比</h5><ol><li>方式1：Object中的wait、notify、notifyAll方法</li><li>方式2：juc中Condition接口提供的await、signal、signalAll方法</li><li>方式3：juc中的LockSupport提供的park、unpark方法</li></ol><table><thead><tr><th></th><th>Object</th><th>Condtion</th><th>LockSupport</th></tr></thead><tbody><tr><td>前置条件</td><td>需要在synchronized中运行</td><td>需要先获取Lock的锁</td><td>无</td></tr><tr><td>无限等待</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>超时等待</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>等待到将来某个时间返回</td><td>不支持</td><td>支持</td><td>支持</td></tr><tr><td>等待状态中释放锁</td><td>会释放</td><td>会释放</td><td>不会释放</td></tr><tr><td>唤醒方法先于等待方法执行，能否唤醒线程</td><td>否</td><td>否</td><td>可以</td></tr><tr><td>是否能响应线程中断</td><td>是</td><td>是</td><td>是</td></tr><tr><td>线程中断是否会清除中断标志</td><td>是</td><td>是</td><td>否</td></tr><tr><td>是否支持等待状态中不响应中断</td><td>不支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h3 id="挂起（suspend）和恢复（resume）线程"><a href="#挂起（suspend）和恢复（resume）线程" class="headerlink" title="挂起（suspend）和恢复（resume）线程"></a>挂起（suspend）和恢复（resume）线程</h3><p>hread类中还有2个方法，即**线程挂起(suspend)<strong>和</strong>恢复执行(resume)**，这2个操作是一对相反的操作，被挂起的线程，必须要等到resume()方法操作后，才能继续执行。系统中已经标注着2个方法过时了，不推荐使用。</p><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930153719746.png" alt="image-20220930153719746"></p><p>不推荐使用 suspend() 去挂起线程的原因，是因为 suspend() 在导致线程暂停的同时，并不会去释放任何锁资源。其他线程都无法访问被它占用的锁。直到对应的线程执行 resume() 方法后，被挂起的线程才能继续，从而其它被阻塞在这个锁的线程才可以继续执行。</p><p>但是，如果 resume() 操作出现在 suspend() 之前执行，那么线程将一直处于挂起状态，同时一直占用锁，这就产生了死锁。而且，对于被挂起的线程，它的线程状态居然还是 Runnable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadSuspendAndResume</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isSuspend = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SuspendThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            suspendMe();</span><br><span class="line">            <span class="keyword">if</span> (isSuspend) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(System.currentTimeMillis() + <span class="string">&quot;,开始挂起!&quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,挂起结束!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">suspendMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            isSuspend = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ResumeThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isSuspend) &#123;</span><br><span class="line">                System.out.println(System.currentTimeMillis() + <span class="string">&quot;,检测到一挂起线程,恢复挂起线程!&quot;</span>);</span><br><span class="line">                resumeMe();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">resumeMe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            isSuspend = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SuspendThread suspendThread = <span class="keyword">new</span> SuspendThread();</span><br><span class="line">        ResumeThread resumeThread = <span class="keyword">new</span> ResumeThread();</span><br><span class="line">        suspendThread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        resumeThread.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930163225006.png" alt="image-20220930163225006"></p><h3 id="线程结束（join）和谦让（yeild）"><a href="#线程结束（join）和谦让（yeild）" class="headerlink" title="线程结束（join）和谦让（yeild）"></a>线程结束（join）和谦让（yeild）</h3><p>很多时候，一个线程的输入可能非常依赖于另外一个或者多个线程的输出，此时，这个线程就需要等待依赖的线程执行完毕，才能继续执行。jdk提供了join()操作来实现这个功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;<span class="comment">//无限等待，它会一直只是当前线程。知道目标线程执行完毕。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException</span>;<span class="comment">//用于指定等待时间，如果超过了给定的时间目标线程还在执行，当前线程也会停止等待，而继续往下执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**在被等待的线程上使用了synchronize，调用了它的wait()方法，线程最后执行完毕之后，系统会自动调用它的notifyAll()方法，唤醒所有在此线*程上等待的其他线程。</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> base = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            wait(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">            <span class="keyword">long</span> delay = millis - now;</span><br><span class="line">            <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            wait(delay);</span><br><span class="line">            now = System.currentTimeMillis() - base;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">T1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;,start &quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(System.currentTimeMillis() + <span class="string">&quot;,end &quot;</span> + <span class="keyword">this</span>.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        System.out.println(System.currentTimeMillis() + <span class="string">&quot;,num = &quot;</span> + num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930171058233.png" alt="image-20220930171058233"></p><p><strong>ps：被等待的线程执行完毕之后，系统自动会调用该线程的notifyAll()方法。所以一般情况下，我们不要去在线程对象上使用wait()、notify()、notifyAll()方法</strong></p><p>另外一个方法是<strong>Thread.yield()</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">()</span></span>;<span class="comment">//出让cpu资源：调用线程静态方法yeild()</span></span><br></pre></td></tr></table></figure><h2 id="5-4-线程优先级"><a href="#5-4-线程优先级" class="headerlink" title="5.4.线程优先级"></a>5.4.线程优先级</h2><p>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程。线程调 度器按照线程的优先级决定应调度哪个线程来执行。<br>线程的优先级用数字表示，范围从1到10</p><ul><li>Thread.MIN_PRIORITY = 1</li><li>Thread.MAX_PRIORITY = 10</li><li>Thread.NORM_PRIORITY = 5</li></ul><p>使用下述方法获得或设置线程对象的优先级。</p><ul><li>int getPriority();</li><li>void setPriority(int newPriority);</li></ul><p>优先级的设定建议在start()调用前</p><p>注意：优先级低只是意味着获得调度的概率低。并不是绝对先调用优先级高后调 用优先级低的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930172345097.png" alt="image-20220930172345097"></p><h1 id="6-线程组"><a href="#6-线程组" class="headerlink" title="6.线程组"></a>6.线程组</h1><p><strong>线程和线程组组成了父子关系</strong></p><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930100156049.png" alt="image-20220930100156049"></p><p>使用线程组可以方便管理线程，线程组提供了一些方法方便方便我们管理线程</p><h3 id="6-1-创建线程关联线程组"><a href="#6-1-创建线程关联线程组" class="headerlink" title="6.1.创建线程关联线程组"></a>6.1.创建线程关联线程组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">R1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;threadName:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ThreadGroup threadGroup = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;thread-group-1&quot;</span>);</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(threadGroup, <span class="keyword">new</span> R1(), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(threadGroup, <span class="keyword">new</span> R1(), <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//activeCount()方法可以返回线程组中的所有活动线程数，包含下面的所有子孙节点的线程，由于线程组中的线程是动态变化的，这个值只能是一个估算值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;活动线程数:&quot;</span> + threadGroup.activeCount());</span><br><span class="line">        System.out.println(<span class="string">&quot;活动线程组:&quot;</span> + threadGroup.activeGroupCount());</span><br><span class="line">        System.out.println(<span class="string">&quot;线程组名称:&quot;</span> + threadGroup.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930163323613.png" alt="image-20220930163323613"></p><h3 id="6-2-指定父线程组"><a href="#6-2-指定父线程组" class="headerlink" title="6.2.指定父线程组"></a>6.2.指定父线程组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">R1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Thread thread = Thread.currentThread();</span><br><span class="line">           System.out.println(<span class="string">&quot;所属线程组:&quot;</span> + thread.getThreadGroup().getName() + <span class="string">&quot;,线程名称:&quot;</span> + thread.getName());</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       ThreadGroup threadGroup1 = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;thread-group-1&quot;</span>);</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> R1(), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> R1(), <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1活动线程数:&quot;</span> + threadGroup1.activeCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1活动线程组:&quot;</span> + threadGroup1.activeGroupCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1线程组名称:&quot;</span> + threadGroup1.getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1父线程组名称:&quot;</span> + threadGroup1.getParent().getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">       ThreadGroup threadGroup2 = <span class="keyword">new</span> ThreadGroup(threadGroup1, <span class="string">&quot;thread-group-2&quot;</span>);</span><br><span class="line">       Thread t3 = <span class="keyword">new</span> Thread(threadGroup2, <span class="keyword">new</span> R1(), <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">       Thread t4 = <span class="keyword">new</span> Thread(threadGroup2, <span class="keyword">new</span> R1(), <span class="string">&quot;t4&quot;</span>);</span><br><span class="line">       t3.start();</span><br><span class="line">       t4.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup2活动线程数:&quot;</span> + threadGroup2.activeCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup2活动线程组:&quot;</span> + threadGroup2.activeGroupCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup2线程组名称:&quot;</span> + threadGroup2.getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup2父线程组名称:&quot;</span> + threadGroup2.getParent().getName());</span><br><span class="line">       System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1活动线程数:&quot;</span> + threadGroup1.activeCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;threadGroup1活动线程组:&quot;</span> + threadGroup1.activeGroupCount());</span><br><span class="line">       System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">       threadGroup1.list();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930163428206.png" alt="image-20220930163428206"></p><blockquote><ol><li><strong>threadGroup1未指定父线程组，系统获取了主线程的线程组作为threadGroup1的父线程组，输出结果中是：main</strong></li><li><strong>threadGroup1为threadGroup2的父线程组</strong></li><li><strong>threadGroup1活动线程数为4，包含了threadGroup1线程组中的t1、t2，以及子线程组threadGroup2中的t3、t4</strong></li><li><strong>线程组的list()方法，将线程组中的所有子孙节点信息输出到控制台，用于调试使用</strong></li></ol></blockquote><h3 id="6-3-根线程组"><a href="#6-3-根线程组" class="headerlink" title="6.3.根线程组"></a>6.3.根线程组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Thread.currentThread());</span><br><span class="line">System.out.println(Thread.currentThread().getThreadGroup());</span><br><span class="line">System.out.println(Thread.currentThread().getThreadGroup().getParent());</span><br><span class="line">System.out.println(Thread.currentThread().getThreadGroup().getParent().getParent());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread[main,<span class="number">5</span>,main]</span><br><span class="line">java.lang.ThreadGroup[name=main,maxpri=<span class="number">10</span>]<span class="comment">//主线程的线程组</span></span><br><span class="line">java.lang.ThreadGroup[name=system,maxpri=<span class="number">10</span>]</span><br><span class="line"><span class="keyword">null</span></span><br></pre></td></tr></table></figure><h3 id="6-4-批量停止线程"><a href="#6-4-批量停止线程" class="headerlink" title="6.4.批量停止线程"></a>6.4.批量停止线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">R1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Thread thread = Thread.currentThread();</span><br><span class="line">           System.out.println(<span class="string">&quot;所属线程组:&quot;</span> + thread.getThreadGroup().getName() + <span class="string">&quot;,线程名称:&quot;</span> + thread.getName());</span><br><span class="line">           <span class="keyword">while</span> (!thread.isInterrupted()) &#123;</span><br><span class="line">               ;</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;线程:&quot;</span> + thread.getName() + <span class="string">&quot;停止了！&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       ThreadGroup threadGroup1 = <span class="keyword">new</span> ThreadGroup(<span class="string">&quot;thread-group-1&quot;</span>);</span><br><span class="line">       Thread t1 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> R1(), <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">       Thread t2 = <span class="keyword">new</span> Thread(threadGroup1, <span class="keyword">new</span> R1(), <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">       ThreadGroup threadGroup2 = <span class="keyword">new</span> ThreadGroup(threadGroup1, <span class="string">&quot;thread-group-2&quot;</span>);</span><br><span class="line">       Thread t3 = <span class="keyword">new</span> Thread(threadGroup2, <span class="keyword">new</span> R1(), <span class="string">&quot;t3&quot;</span>);</span><br><span class="line">       Thread t4 = <span class="keyword">new</span> Thread(threadGroup2, <span class="keyword">new</span> R1(), <span class="string">&quot;t4&quot;</span>);</span><br><span class="line">       t3.start();</span><br><span class="line">       t4.start();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;-----------threadGroup1信息-----------&quot;</span>);</span><br><span class="line">       threadGroup1.list();</span><br><span class="line">       System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;停止线程组：&quot;</span> + threadGroup1.getName() + <span class="string">&quot;中的所有子孙线程&quot;</span>);</span><br><span class="line">       threadGroup1.interrupt();</span><br><span class="line">       TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;----------threadGroup1停止后，输出信息------------&quot;</span>);</span><br><span class="line">       threadGroup1.list();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930163521829.png" alt="image-20220930163521829"></p><h1 id="7-守护线程与用户线程"><a href="#7-守护线程与用户线程" class="headerlink" title="7.守护线程与用户线程"></a>7.守护线程与用户线程</h1><p>java中线程分为两大类：</p><ul><li><p>用户线程</p></li><li><p>守护线程</p><p>特殊的线程，在后台默默地完成一些系统性的服务，其中具有代表性的就是：垃圾回收线程（守护线程）。用户线程可以理解为是系统的工作线程。<strong>如果用户线程全部结束了，意味着程序需要完成的业务操作已经结束了，系统可以退出了。所以当系统只剩下守护进程的时候，java虚拟机会自动退出。</strong></p></li></ul><h2 id="7-1-设置守护线程"><a href="#7-1-设置守护线程" class="headerlink" title="7.1.设置守护线程"></a>7.1.设置守护线程</h2><p><strong>setDaemon(true)，默认为false</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t1.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t2.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">t2.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;主线程&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930165422016.png" alt="image-20220930165422016"></p><h1 id="8-线程锁"><a href="#8-线程锁" class="headerlink" title="8.线程锁"></a>8.线程锁</h1><p>当多个线程需要访问某个公共资源的时候，我们知道需要通过加锁来保证资源的访问不会出问题。java提供了两种方式来加锁，一种是关键字：synchronized，一种是concurrent包下的lock锁。</p><h2 id="8-1-synchronized"><a href="#8-1-synchronized" class="headerlink" title="8.1.synchronized"></a>8.1.synchronized</h2><p>synchronized机制是给共享资源上锁，只有拿到锁的线程才可以访问共享资源，这样就可以强制使得对共享资源的访问都是顺序的。使用它来实现多线程的同步操作是非常简单的，只要在需要同步的对方的<strong>方法、类或代码块</strong>中加入该关键字，它能够保证在同一个时刻最多只有一个线程执行同一个对象的同步代码，可保证修饰的代码在执行过程中不会被其他线程干扰。使用synchronized修饰的代码具有原子性和可见性，在需要进程同步的程序中使用的频率非常高，可以满足一般的进程同步要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                Demo2.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t1 = <span class="keyword">new</span> T();</span><br><span class="line">        T t2 = <span class="keyword">new</span> T();</span><br><span class="line">        T t3 = <span class="keyword">new</span> T();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">        System.out.println(Demo2.num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-Lock"><a href="#8-2-Lock" class="headerlink" title="8.2.Lock"></a>8.2.Lock</h2><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930111523104.png" alt="image-20220930111523104"></p><h3 id="8-2-1-ReentrantLock"><a href="#8-2-1-ReentrantLock" class="headerlink" title="8.2.1.ReentrantLock"></a>8.2.1.ReentrantLock</h3><p>ReentrantLock是Lock的默认实现，在聊ReentranLock之前，我们需要先弄清楚一些概念：</p><ol><li>可重入锁：可重入锁是指同一个线程可以多次获得同一把锁；ReentrantLock和关键字Synchronized都是可重入锁</li><li>可中断锁：可中断锁时子线程在获取锁的过程中，是否可以相应线程中断操作。synchronized是不可中断的，ReentrantLock是可中断的</li><li>公平锁和非公平锁：公平锁是指多个线程尝试获取同一把锁的时候，获取锁的顺序按照线程到达的先后顺序获取，而不是随机插队的方式获取。synchronized是非公平锁，而ReentrantLock是两种都可以实现，不过默认是非公平锁</li></ol><h4 id="ReentrantLock基本使用"><a href="#ReentrantLock基本使用" class="headerlink" title="ReentrantLock基本使用"></a>ReentrantLock基本使用</h4><p>ReentrantLock的使用过程：</p><ol><li><strong>创建锁：ReentrantLock lock = new ReentrantLock();</strong></li><li><strong>获取锁：lock.lock()</strong></li><li><strong>释放锁：lock.unlock();</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLockDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                ReentrantLockDemo.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t1 = <span class="keyword">new</span> T();</span><br><span class="line">        T t2 = <span class="keyword">new</span> T();</span><br><span class="line">        T t3 = <span class="keyword">new</span> T();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">        System.out.println(ReentrantLockDemo.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与关键字synchronized相比，ReentrantLock锁有明显的操作过程，开发人员必须手动的指定何时加锁，何时释放锁，正是因为这样手动控制，<strong>ReentrantLock对逻辑控制的灵活度要远远胜于关键字synchronized</strong>，上面代码需要注意**lock.unlock()**一定要放在finally中，否则，若程序出现了异常，锁没有释放，那么其他线程就再也没有机会获取这个锁了。</p><h4 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            num++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                Demo.add();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t1 = <span class="keyword">new</span> T();</span><br><span class="line">        T t2 = <span class="keyword">new</span> T();</span><br><span class="line">        T t3 = <span class="keyword">new</span> T();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">        System.out.println(Demo.num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930165828072.png" alt="image-20220930165828072"></p><p>上面代码中add()方法中，当一个线程进入的时候，会执行2次获取锁的操作，运行程序可以正常结束，并输出和期望值一样的30000，假如ReentrantLock是不可重入的锁，那么同一个线程第2次获取锁的时候由于前面的锁还未释放而导致死锁，程序是无法正常结束的。ReentrantLock命名也挺好的Re entrant Lock，和其名字一样，可重入锁。</p><ol><li><strong>lock()方法和unlock()方法需要成对出现，锁了几次，也要释放几次，否则后面的线程无法获取锁了；</strong></li><li><strong>unlock()方法放在finally中执行，保证不管程序是否有异常，锁必定会释放</strong></li></ol><h4 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h4><p>在大多数情况下，锁的申请都是非公平的，也就是说，线程1首先请求锁A，接着线程2也请求了锁A。那么当锁A可用时，是线程1可获得锁还是线程2可获得锁呢？这是不一定的，系统只是会从这个锁的等待队列中随机挑选一个，因此不能保证其公平性。</p><p>而公平锁，则不是这样，它会按照到达的先后顺序获得资源。公平锁的一大特点是：它不会产生饥饿现象，只要你排队，最终还是可以等到资源的；synchronized关键字默认是有jvm内部实现控制的，是非公平锁。而ReentrantLock运行开发者自己设置锁的公平性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认构造方法创建的是非公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有个fair参数，当fair为true的时候创建的是公平锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公平锁看起来很不错，不过要实现公平锁，系统内部肯定需要维护一个有序队列，因此公平锁的实现成本比较高，性能相对于非公平锁来说相对低一些。因此，在默认情况下，锁是非公平的，如果没有特别要求，则不建议使用公平锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FairLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock fairLock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);<span class="comment">//公平锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                fairLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.getName() + <span class="string">&quot;获得锁!&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    fairLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t1 = <span class="keyword">new</span> T(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        T t2 = <span class="keyword">new</span> T(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        T t3 = <span class="keyword">new</span> T(<span class="string">&quot;t3&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        t3.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">t1获得锁!</span><br><span class="line">t2获得锁!</span><br><span class="line">t3获得锁!</span><br><span class="line">t1获得锁!</span><br><span class="line">t2获得锁!</span><br><span class="line">t3获得锁!</span><br><span class="line">t1获得锁!</span><br><span class="line">t2获得锁!</span><br><span class="line">t3获得锁!</span><br><span class="line">t1获得锁!</span><br><span class="line">t2获得锁!</span><br><span class="line">t3获得锁!</span><br><span class="line">t1获得锁!</span><br><span class="line">t2获得锁!</span><br><span class="line">t3获得锁!</span><br></pre></td></tr></table></figure><h4 id="中断锁"><a href="#中断锁" class="headerlink" title="中断锁"></a>中断锁</h4><p>对于synchronized关键字，如果一个线程在等待获取锁，最终只有2种结果：</p><ol><li>要么获取到锁然后继续后面的操作</li><li>要么一直等待，直到其他线程释放锁为止</li></ol><p>而ReentrantLock提供了另外一种可能，就是在等待获取锁的过程中（<strong>发起获取锁请求到还未获取到锁这段时间内</strong>）是可以被中断的，也就是说在等待锁的过程中，程序可以根据需要取消获取锁的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterruptLock</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock2 = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lock;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(String name, <span class="keyword">int</span> lock)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(name);</span><br><span class="line">            <span class="keyword">this</span>.lock = lock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.lock == <span class="number">1</span>) &#123;</span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    lock2.lockInterruptibly();</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                    lock1.lockInterruptibly();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;中断标志:&quot;</span> + <span class="keyword">this</span>.isInterrupted());</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;<span class="comment">//判断当前线程是否持有ReentrantLock的锁</span></span><br><span class="line">                    lock1.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (lock2.isHeldByCurrentThread()) &#123;</span><br><span class="line">                    lock2.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t1 = <span class="keyword">new</span> T(<span class="string">&quot;t1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        T t2 = <span class="keyword">new</span> T(<span class="string">&quot;t2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>lock1被线程t1占用，lock2被线程t2占用，线程t1在等待获取lock2，线程t2在等待获取lock1，都在相互等待获取对方持有的锁，最终产生了死锁，如果是在synchronized关键字情况下发生了死锁现象，程序是无法结束的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T t1 = <span class="keyword">new</span> T(<span class="string">&quot;t1&quot;</span>, <span class="number">1</span>);</span><br><span class="line">T t2 = <span class="keyword">new</span> T(<span class="string">&quot;t2&quot;</span>, <span class="number">2</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">t2.interrupt();<span class="comment">//我们中断获取锁的操作</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>ReentrankLock中必须使用实例方法<code>lockInterruptibly()</code>获取锁时，在线程调用interrupt()方法之后，才会引发<code>InterruptedException</code>异常</strong></li><li><strong>线程调用interrupt()之后，线程的中断标志会被置为true</strong></li><li><strong>触发InterruptedException异常之后，线程的中断标志会被清空，即置为false</strong></li><li><strong>所以当线程调用interrupt()引发InterruptedException异常，中断标志的变化是:false-&gt;true-&gt;false</strong></li></ol></blockquote><h4 id="申请等待限时"><a href="#申请等待限时" class="headerlink" title="申请等待限时"></a>申请等待限时</h4><p>获取锁的时间我们是不知道的,ReentrantLock给我们提供了获取锁限时等待的方法<code>tryLock()</code>，可以选择传入时间参数，表示等待指定的时间，无参则表示立即返回锁申请的结果：true表示获取锁成功，false表示获取锁失败。</p><p><strong>tryLock无参方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">private static ReentrantLock lock1 &#x3D; new ReentrantLock(false);</span><br><span class="line"></span><br><span class="line">   public static class T extends Thread &#123;</span><br><span class="line">       public T(String name) &#123;</span><br><span class="line">           super(name);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void run() &#123;</span><br><span class="line">           try &#123;</span><br><span class="line">               System.out.println(System.currentTimeMillis() + &quot;:&quot; + this.getName() + &quot;开始获取锁!&quot;);</span><br><span class="line">               &#x2F;&#x2F;尝试获取锁，不论是否成功，立即返回，不会阻塞</span><br><span class="line">               if (lock1.tryLock()) &#123;</span><br><span class="line">                   System.out.println(System.currentTimeMillis() + &quot;:&quot; + this.getName() + &quot;获取到了锁!&quot;);</span><br><span class="line">                   &#x2F;&#x2F;获取到锁之后，休眠5秒</span><br><span class="line">                   TimeUnit.SECONDS.sleep(5);</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   System.out.println(System.currentTimeMillis() + &quot;:&quot; + this.getName() + &quot;未能获取到锁!&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; catch (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125; finally &#123;</span><br><span class="line">               if (lock1.isHeldByCurrentThread()) &#123;</span><br><span class="line">                   lock1.unlock();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">       T t1 &#x3D; new T(&quot;t1&quot;);</span><br><span class="line">       T t2 &#x3D; new T(&quot;t2&quot;);</span><br><span class="line">       t1.start();</span><br><span class="line">       t2.start();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930170340111.png" alt="image-20220930170340111"></p><p><strong>tryLock有参方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*timeout:时间类型，是一个枚举，可以表示时、分、秒、毫秒等</span></span><br><span class="line"><span class="comment">*unit:表示在时间类型上的时间长短</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock1 = <span class="keyword">new</span> ReentrantLock(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">T</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">super</span>(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">              System.out.println(System.currentTimeMillis() + <span class="string">&quot;:&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;开始获取锁!&quot;</span>);</span><br><span class="line">              <span class="comment">//获取锁超时时间设置为3秒，3秒内是否能否获取锁都会返回</span></span><br><span class="line">              <span class="keyword">if</span> (lock1.tryLock(<span class="number">3</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(System.currentTimeMillis() + <span class="string">&quot;:&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;获取到了锁!&quot;</span>);</span><br><span class="line">                  <span class="comment">//获取到锁之后，休眠5秒</span></span><br><span class="line">                  TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  System.out.println(System.currentTimeMillis() + <span class="string">&quot;:&quot;</span> + <span class="keyword">this</span>.getName() + <span class="string">&quot;未能获取到锁!&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">              e.printStackTrace();</span><br><span class="line">          &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (lock1.isHeldByCurrentThread()) &#123;<span class="comment">//判断当前线程是否持有ReentrantLock的锁</span></span><br><span class="line">                  lock1.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src="%5Cimages%5Cimg%5Cblog%5Cimage-20220930170504332.png" alt="image-20220930170504332"></p><p>表示获取锁的超时时间是3秒，3秒后不管是否能否获取锁，该方法都会有返回值，获取到锁之后，内部休眠了5秒，会导致另外一个线程获取锁失败</p><p><strong>关于tryLock()方法和tryLock(long timeout, TimeUnit unit)方法，说明一下：</strong></p><ol><li>都会返回boolean值，结果表示获取锁是否成功</li><li>tryLock()方法，不管是否获取成功，都会立即返回；而有参的tryLock方法会尝试在指定的时间内去获取锁，中间会阻塞的现象，在指定的时间之后会不管是否能够获取锁都会返回结果</li><li>tryLock()方法不会响应线程的中断方法；而有参的tryLock方法会响应线程的中断方法，而触发<code>InterruptedException</code>异常，这个从2个方法的声明上可以可以看出来</li></ol><h1 id="9-异步与多线程"><a href="#9-异步与多线程" class="headerlink" title="9.异步与多线程"></a>9.异步与多线程</h1><p>异步是目的，而多线程是实现这个目的的方法。异步操作不等于多线程。</p><ul><li>异步可以解耦业务间的流程关联，降低耦合度；</li><li>降低接口响应时间，例如用户注册，异步生成相关信息表；</li><li>异步可以提高系统性能，提升吞吐量；</li><li>流量削峰即把请求先承接下来，然后在异步处理；</li><li>异步用在不同服务间，可以隔离服务，避免雪崩；</li></ul><p>异步处理的实现方式有很多种，常见多线程，消息中间件，发布订阅的广播模式，其根本逻辑在于先把请求承接下来，放入存储容器中，在从容器中把请求取出，统一调度处理。</p><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOneThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;doOneThing ----&gt;&gt;&gt; success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doOtherThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;doOtherThing ----&gt;&gt;&gt; success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch(<span class="string">&quot;SyncWithAsyncDemo&quot;</span>);</span><br><span class="line">    stopWatch.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步调用版本</span></span><br><span class="line">    <span class="comment">// testSynchronize();</span></span><br><span class="line">    <span class="comment">// 异步调用版本</span></span><br><span class="line">    testAsynchronize();</span><br><span class="line"></span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    System.out.println(stopWatch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testAsynchronize</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------- testAsynchronize --------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个线程执行 doOneThing</span></span><br><span class="line">    Thread doOneThingThread = <span class="keyword">new</span> Thread(SyncWithAsyncDemo::doOneThing, <span class="string">&quot;doOneThing-Thread&quot;</span>);</span><br><span class="line">    doOneThingThread.start();</span><br><span class="line"></span><br><span class="line">    doOtherThing();</span><br><span class="line">    <span class="comment">// 等待 doOneThing 线程执行完成</span></span><br><span class="line">    doOneThingThread.join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSynchronize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------- testSynchronize --------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    doOneThing();</span><br><span class="line">    doOtherThing();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h2><p>自 <code>JDK 1.5</code> 开始，引入了 <code>Future</code> 接口和实现 <code>Future</code> 接口的 <code>FutureTask</code> 类来表示异步计算结果。这个 <code>FutureTask</code> 类不仅实现了 <code>Future</code> 接口还实现了 <code>Runnable</code> 接口，表示一种可生成结果的 <code>Runnable</code>。其可以处于这三种状态：</p><ul><li><strong>未启动</strong> 当创建一个 <code>FutureTask</code> 没有执行 <code>FutureTask.run()</code> 方法之前</li><li><strong>已启动</strong> 在 <code>FutureTask.run()</code> 方法执行的过程中</li><li><strong>已完成</strong> 在 <code>FutureTask.run()</code> 方法正常执行结果或者调用了 <code>FutureTask.cancel(boolean mayInterruptIfRunning)</code> 方法以及在调用 <code>FutureTask.run()</code> 方法的过程中发生异常结束后</li></ul><p><code>FutureTask</code> 类实现了 <code>Future</code> 接口的开启和取消任务、查询任务是否完成、获取计算结果方法。要获取 <code>FutureTask</code> 任务的结果，我们只能通过调用 <code>getXXX()</code> 系列方法才能获取，当结果还没出来时候这些方法会被阻塞，同时这了任务可以是 <code>Callable</code> 类型（有返回结果），也可以是 <code>Runnable</code> 类型（无返回结果）。我们修改上面的示例把两个任务方法修改为返回 <code>String</code> 类型，使用 <code>FutureTask</code> 的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFutureTask</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------- testFutureTask --------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 FutureTask（doOneThing 任务）</span></span><br><span class="line">    FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(FutureTaskDemo::doOneThing);</span><br><span class="line">    <span class="comment">// 使用线程池执行 doOneThing 任务</span></span><br><span class="line">    ForkJoinPool.commonPool().execute(futureTask);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行 doOtherThing 任务</span></span><br><span class="line">    String doOtherThingResult = doOtherThing();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步等待线程执行 doOneThing 任务结束</span></span><br><span class="line">    String doOneThingResult = futureTask.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 任务执行结果输出</span></span><br><span class="line">    System.out.println(<span class="string">&quot;doOneThingResult ----&gt;&gt;&gt; &quot;</span> + doOneThingResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;doOtherThingResult ----&gt;&gt;&gt; &quot;</span> + doOtherThingResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>FutureTask</code> 异步编程方式的耗时和上面的 <code>Thread</code> 方式是差不多的，其本质都是另起一个线程去做 <code>doOneThing</code> 任务然后等待返回</p><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><p><code>JDK 8</code> 中引入了 <code>CompletableFuture</code> 类，实现了 <code>Future</code> 和 <code>CompletionStage</code> 接口，为异步编程提供了一些列方法，如 <code>supplyAsync</code>、<code>runAsync</code> 和 <code>thenApplyAsync</code> 等，除此之外 <code>CompletableFuture</code> 还有一个重要的功能就是可以让两个或者多个 <code>CompletableFuture</code> 进行运算来产生结果。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletableFutureDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;String&gt; <span class="title">doOneThing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;doOneThing&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;String&gt; <span class="title">doOtherThing</span><span class="params">(String parameter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> parameter + <span class="string">&quot; &quot;</span> + <span class="string">&quot;doOtherThing&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch(<span class="string">&quot;CompletableFutureDemo&quot;</span>);</span><br><span class="line">    stopWatch.start();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步执行版本</span></span><br><span class="line">    testCompletableFuture();</span><br><span class="line"></span><br><span class="line">    stopWatch.stop();</span><br><span class="line">    System.out.println(stopWatch);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testCompletableFuture</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</span><br><span class="line">    <span class="comment">// 先执行 doOneThing 任务，后执行 doOtherThing 任务</span></span><br><span class="line">    CompletableFuture&lt;String&gt; resultFuture = doOneThing().thenCompose(CompletableFutureDemo::doOtherThing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取任务结果</span></span><br><span class="line">    String doOneThingResult = resultFuture.get();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取执行结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;DoOneThing and DoOtherThing execute finished. result = &quot;</span> + doOneThingResult);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主线程 <code>main</code> 中首先调用了方法 <code>doOneThing()</code> 方法开启了一个异步任务，并返回了对应的 <code>CompletableFuture</code> 对象，我们取名为 <code>doOneThingFuture</code>，然后在 <code>doOneThingFuture</code> 的基础上使用 <code>CompletableFuture</code> 的 <code>thenCompose()</code> 方法，让 <code>doOneThingFuture</code> 方法执行完成后，使用其执行结果作为 <code>doOtherThing(String parameter)</code> 方法的参数创建的异步任务返回。</p><p>我们不需要显式使用 <code>ExecutorService</code>，在 <code>CompletableFuture</code> 内部使用的是 <code>Fork/Join</code> 框架异步处理任务，因此，它使我们编写的异步代码更加简洁。此外，<code>CompletableFuture</code> 类功能很强大其提供了和很多方便的方法.</p><h2 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h2><p><img src="/images/img/blog/image-20221004144858463.png" alt="image-20221004144858463"></p><p>以上为订单场景我们用rabbitmq来做为消息队列传输数据，其他消息队列功能类似</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServerFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(OrderServerFacade.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 消息的发送接口 */</span></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> RabbitTemplate orderRabbitTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 事件处理 */</span></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> OrderEventProcess eventProcess;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">      value = &quot;/orderInfo&quot;,</span></span><br><span class="line"><span class="meta">      method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">getUserInfo</span><span class="params">(<span class="meta">@RequestBody</span> OrderDTO order)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;getUserInfo start &#123;&#125;&quot;</span>, order);</span><br><span class="line">    <span class="comment">// 保存当前的发送数据</span></span><br><span class="line">    OrderEventProcess.putOrder(order);</span><br><span class="line">    <span class="comment">// 获取用户信息的请求发送</span></span><br><span class="line">    <span class="keyword">boolean</span> userSender = <span class="keyword">this</span>.senderQueryUser(order.getUserId());</span><br><span class="line">    <span class="comment">// 获取商品信息的请求发送</span></span><br><span class="line">    <span class="keyword">boolean</span> goodsSender = <span class="keyword">this</span>.senderQueryGoods(order.getGoodId());</span><br><span class="line">    logger.info(<span class="string">&quot;getUserInfo  request &#123;&#125; rsponse &#123;&#125; &quot;</span>, order.getUserId(), userSender);</span><br><span class="line">    logger.info(<span class="string">&quot;getGoods  request &#123;&#125; rsponse &#123;&#125; &quot;</span>, order.getGoodId(), goodsSender);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建结果的响应</span></span><br><span class="line">    <span class="keyword">return</span> ApiResponse.ok();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping(</span></span><br><span class="line"><span class="meta">      value = &quot;/getOrderResponse&quot;,</span></span><br><span class="line"><span class="meta">      method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ApiResponse <span class="title">getOrderInfo</span><span class="params">(<span class="meta">@RequestBody</span> OrderDTO order)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;getOrderResponse start &#123;&#125;&quot;</span>, order);</span><br><span class="line">    <span class="comment">// 获取用户信息的请求发送</span></span><br><span class="line">    OrderDTO userQueryRsp = eventProcess.builderRsp(order);</span><br><span class="line">    logger.info(<span class="string">&quot;getOrderResponse  request &#123;&#125; rsponse &#123;&#125; &quot;</span>, order.getUserId(), userQueryRsp);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建结果的响应</span></span><br><span class="line">    <span class="keyword">return</span> ApiResponse.ok(userQueryRsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取用户的信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> userId 用户的id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 用户的信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">senderQueryUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;request get user info start &#123;&#125; &quot;</span>, userId);</span><br><span class="line">    ClientUserDTO clientUser = <span class="keyword">new</span> ClientUserDTO();</span><br><span class="line">    clientUser.setUserId(userId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行</span></span><br><span class="line">    orderRabbitTemplate.convertAndSend(</span><br><span class="line">        RabbitmqConfig.getUserReqExchangeName(),</span><br><span class="line">        RabbitmqConfig.getUserReqQueueName(),</span><br><span class="line">        <span class="comment">// 数据的格式为json</span></span><br><span class="line">        JsonUtils.toJson(clientUser),</span><br><span class="line">        msg -&gt; &#123;</span><br><span class="line">          msg.getMessageProperties()</span><br><span class="line">              .getHeaders()</span><br><span class="line">              .put(RabbitmqConfig.getHeadType(), DataTypeEnum.USER.getType());</span><br><span class="line">          <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取商品信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> dataId 商品信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 当前的用户的信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">senderQueryGoods</span><span class="params">(String dataId)</span> </span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;request goods start &#123;&#125; &quot;</span>, dataId);</span><br><span class="line">    ClientGoodsDTO clientGoods = <span class="keyword">new</span> ClientGoodsDTO();</span><br><span class="line">    clientGoods.setDataId(dataId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行</span></span><br><span class="line">    orderRabbitTemplate.convertAndSend(</span><br><span class="line">        RabbitmqConfig.getGoodsReqExchangeName(),</span><br><span class="line">        RabbitmqConfig.getGoodsReqQueueName(),</span><br><span class="line">        <span class="comment">// 数据的格式为json</span></span><br><span class="line">        JsonUtils.toJson(clientGoods),</span><br><span class="line">        msg -&gt; &#123;</span><br><span class="line">          msg.getMessageProperties()</span><br><span class="line">              .getHeaders()</span><br><span class="line">              .put(RabbitmqConfig.getHeadType(), DataTypeEnum.GOODS.getType());</span><br><span class="line">          <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是订单的服务。它的作用就是向用户服务和端口服务以<strong>消息队列</strong>的形式发送数据，消息队列具备可保存数据的功能，所以仅将消息发送至消息中间件即可。然后还需要再启动一个监听接收来自消息队列的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;orderEventProcess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderEventProcess</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 日志 */</span></span><br><span class="line">  <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(OrderEventProcess.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 数据类型的标识信息 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_TYPE = <span class="string">&quot;DATA_TYPE&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 用来用户的map */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, OrderDTO&gt; USER_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 用户存储商品的map */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, OrderDTO&gt; GOODS_MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 通过类型确定消息的处理类</span></span><br><span class="line">    String dataType = String.valueOf(message.getMessageProperties().getHeaders().get(DATA_TYPE));</span><br><span class="line">    <span class="comment">// json串信息</span></span><br><span class="line">    String msgInfo = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">    <span class="comment">// 回调保存用户</span></span><br><span class="line">    <span class="keyword">if</span> (DataTypeEnum.USER.getType().equals(dataType)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.saveUser(msgInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存商品信息</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (DataTypeEnum.GOODS.getType().equals(dataType)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.saveGoods(msgInfo);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构造响应信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> orderInfo 用户查询请求信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> OrderDTO <span class="title">builderRsp</span><span class="params">(OrderDTO orderInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> USER_MAP.get(orderInfo.getUserId());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存用户信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    ClientUserDTO userRsp = JsonUtils.fromJson(data, <span class="keyword">new</span> TypeToken&lt;ClientUserDTO&gt;() &#123;&#125;.getType());</span><br><span class="line">    OrderDTO oderInfo = USER_MAP.get(userRsp.getUserId());</span><br><span class="line">    <span class="keyword">if</span> (oderInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;save user response &#123;&#125; &quot;</span>,userRsp);</span><br><span class="line">      oderInfo.setUserInfo(userRsp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存商品信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saveGoods</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    ClientGoodsDTO goodsRsp =</span><br><span class="line">        JsonUtils.fromJson(data, <span class="keyword">new</span> TypeToken&lt;ClientGoodsDTO&gt;() &#123;&#125;.getType());</span><br><span class="line">    OrderDTO orderInfo = GOODS_MAP.get(goodsRsp.getDataId());</span><br><span class="line">    <span class="keyword">if</span> (orderInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;save goods response : &#123;&#125;&quot;</span>,goodsRsp);</span><br><span class="line">      orderInfo.setGoodsInfo(goodsRsp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 执行消息的存储操作</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> orderInfo</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putOrder</span><span class="params">(OrderDTO orderInfo)</span> </span>&#123;</span><br><span class="line">    USER_MAP.put(orderInfo.getUserId(), orderInfo);</span><br><span class="line">    GOODS_MAP.put(orderInfo.getGoodId(), orderInfo);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看完成订单的发送。再来看用户服务:</p><p>用户服务接收来自消息队列的数据。交给UserEventProcess处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userEventProcess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEventProcess</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 日志 */</span></span><br><span class="line">  <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(UserEventProcess.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 数据类型的标识信息 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_TYPE = <span class="string">&quot;DATA_TYPE&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 消息的发送接口 */</span></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> RabbitTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过类型确定消息的处理类</span></span><br><span class="line">    String dataType = String.valueOf(message.getMessageProperties().getHeaders().get(DATA_TYPE));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// json串信息</span></span><br><span class="line">    String msgInfo = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">    <span class="comment">// 当数据接收完毕后，则进行回复消息</span></span><br><span class="line">    <span class="keyword">if</span> (DataTypeEnum.USER.getType().equals(dataType)) &#123;</span><br><span class="line">      UserDTO userData = <span class="keyword">this</span>.receiveData(msgInfo);</span><br><span class="line">      ThreadUtils.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">      logger.info(<span class="string">&quot;user event process  request &#123;&#125; response &#123;&#125;&quot;</span>,msgInfo,userData);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用户消息的发送</span></span><br><span class="line">      <span class="keyword">this</span>.sendData(userData, DataTypeEnum.USER.getType());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存用户信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> UserDTO <span class="title">receiveData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    UserDTO userRsp = JsonUtils.fromJson(data, <span class="keyword">new</span> TypeToken&lt;UserDTO&gt;() &#123;&#125;.getType());</span><br><span class="line">    UserDTO rsp = <span class="keyword">new</span> UserDTO();</span><br><span class="line">    rsp.setUserId(userRsp.getUserId());</span><br><span class="line">    rsp.setName(<span class="string">&quot;bug_null&quot;</span>);</span><br><span class="line">    rsp.setAddress(<span class="string">&quot;this is shanghai&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行,仅测试使用，</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;线上环境一般需要使用确认机制。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> message 发送的消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> dataType 数据类型信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendData</span><span class="params">(UserDTO message, String dataType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行</span></span><br><span class="line">    amqpTemplate.convertAndSend(</span><br><span class="line">        RabbitmqConfig.getRspExchangeName(),</span><br><span class="line">        RabbitmqConfig.getRspQueueName(),</span><br><span class="line">        <span class="comment">// 数据的格式为json</span></span><br><span class="line">        JsonUtils.toJson(message),</span><br><span class="line">        msg -&gt; &#123;</span><br><span class="line">          msg.getMessageProperties().getHeaders().put(RabbitmqConfig.getHeadType(), dataType);</span><br><span class="line">          <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>消息队列处理完成后，将数据再通过消息队列发送给订单服务。</p><p>最后再来看下商品服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;goodsEventProcess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsEventProcess</span> <span class="keyword">implements</span> <span class="title">ChannelAwareMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 日志服务 */</span></span><br><span class="line">  <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GoodsEventProcess.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 数据类型的标识信息 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATA_TYPE = <span class="string">&quot;DATA_TYPE&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 消息的发送接口 */</span></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> RabbitTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 通过类型确定消息的处理类</span></span><br><span class="line">    String dataType = String.valueOf(message.getMessageProperties().getHeaders().get(DATA_TYPE));</span><br><span class="line">    <span class="comment">// json串信息</span></span><br><span class="line">    String msgInfo = <span class="keyword">new</span> String(message.getBody());</span><br><span class="line">    <span class="comment">// 当数据接收完毕后，则进行回复消息</span></span><br><span class="line">    <span class="keyword">if</span> (DataTypeEnum.GOODS.getType().equals(dataType)) &#123;</span><br><span class="line">      GoodsDTO userData = <span class="keyword">this</span>.receiveData(msgInfo);</span><br><span class="line"></span><br><span class="line">      ThreadUtils.sleep(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">      logger.info(<span class="string">&quot;goodsEventProcess onMessage receive : &#123;&#125; response : &#123;&#125; &quot;</span>, msgInfo, userData);</span><br><span class="line">      <span class="comment">// 用户消息的发送</span></span><br><span class="line">      <span class="keyword">this</span>.sendData(userData, DataTypeEnum.GOODS.getType());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 保存用户信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> GoodsDTO <span class="title">receiveData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    GoodsDTO goods = JsonUtils.fromJson(data, <span class="keyword">new</span> TypeToken&lt;GoodsDTO&gt;() &#123;&#125;.getType());</span><br><span class="line">    GoodsDTO rsp = <span class="keyword">new</span> GoodsDTO();</span><br><span class="line">    rsp.setDataId(goods.getDataId());</span><br><span class="line">    goods.setGoodsPrice(<span class="number">1024</span>);</span><br><span class="line">    goods.setMessage(<span class="string">&quot;这是一个苹果,apple,还被咬了一口&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> goods;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行,仅测试使用，</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;线上环境一般需要使用确认机制。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> message 发送的消息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> dataType 数据类型信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendData</span><span class="params">(GoodsDTO message, String dataType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用 convertAndSend 方法时的结果：输出时没有顺序，不需要等待，直接运行</span></span><br><span class="line">    amqpTemplate.convertAndSend(</span><br><span class="line">        RabbitmqConfig.getRspExchangeName(),</span><br><span class="line">        RabbitmqConfig.getRspQueueName(),</span><br><span class="line">        <span class="comment">// 数据的格式为json</span></span><br><span class="line">        JsonUtils.toJson(message),</span><br><span class="line">        msg -&gt; &#123;</span><br><span class="line">          msg.getMessageProperties().getHeaders().put(RabbitmqConfig.getHeadType(), dataType);</span><br><span class="line">          <span class="keyword">return</span> msg;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>商品服务与用户服务类似，功能都是接收数据，进行处理，再通过消息通道将数据写回至消息队列中</p><p>在所有的服务都需要进行消息队列的监听。这部分就放在这里作为一个公共部分:</p><p>消息队列的监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqConfigBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 日志信息 */</span></span><br><span class="line">  <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(RabbitmqConfigBean.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 用户服务的监听 */</span></span><br><span class="line">  <span class="meta">@Autowired</span> <span class="keyword">private</span> OrderEventProcess orderEventProcess;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 注册相关的消息监控器</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;另一种设置队列的方法,如果使用这种情况,那么要设置多个,就使用addQueues</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;container.setQueues(new Queue(&quot;TestDirectQueue&quot;,true));</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;container.addQueues(new Queue(&quot;TestDirectQueue2&quot;,true));</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(&quot;orderSimpleMessageListenerContainer&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleMessageListenerContainer <span class="title">simpleMessageListenerContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Qualifier(&quot;orderRabbitMQConnectionFactory&quot;)</span> ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    SimpleMessageListenerContainer container =</span><br><span class="line">        <span class="keyword">new</span> SimpleMessageListenerContainer(connectionFactory);</span><br><span class="line">    container.setConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">    container.setMaxConcurrentConsumers(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// RabbitMQ默认是自动确认，这里改为手动确认消息</span></span><br><span class="line">    container.setAcknowledgeMode(AcknowledgeMode.AUTO);</span><br><span class="line">    <span class="comment">// 设置一个队列</span></span><br><span class="line">    container.setQueueNames(RabbitmqConfig.getRspQueueName());</span><br><span class="line">    container.setMessageListener(orderEventProcess);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构建mq的连接工厂信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderRabbitMQConnectionFactory&quot;)</span></span><br><span class="line">  <span class="meta">@Primary</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ConnectionFactory <span class="title">resourceConnectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CachingConnectionFactory connectionFactory = <span class="keyword">new</span> CachingConnectionFactory();</span><br><span class="line">    connectionFactory.setHost(RabbitmqConfig.getHost());</span><br><span class="line">    connectionFactory.setPort(RabbitmqConfig.getPort());</span><br><span class="line">    connectionFactory.setUsername(RabbitmqConfig.getUserName());</span><br><span class="line">    connectionFactory.setPassword(RabbitmqConfig.getUserPassword());</span><br><span class="line">    connectionFactory.setVirtualHost(RabbitmqConfig.getVirtualHost());</span><br><span class="line">    <span class="comment">// 设置当前需要进行发布确认，防止消息丢失</span></span><br><span class="line">    connectionFactory.setPublisherConfirms(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> connectionFactory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 进行监听工厂的配制</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> configurer 配制对象信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> connectionFactory 连接工厂</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 监听配制</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderFactory&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      SimpleRabbitListenerContainerFactoryConfigurer configurer,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Qualifier(&quot;orderRabbitMQConnectionFactory&quot;)</span> ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">    configurer.configure(factory, connectionFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构建直连型交换机信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 交换机实例,</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderExchange&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">orderDirectExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(RabbitmqConfig.getRspExchangeName(), <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 资源数据队列信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 队列信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderQueue&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Queue <span class="title">orderQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个参数是队列名字， 第二个参数是指是否持久化</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Queue(RabbitmqConfig.getRspQueueName(), <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 进行交换机与队列的绑定操作</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderBind&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Binding <span class="title">orderBind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(orderQueue())</span><br><span class="line">        .to(orderDirectExchange())</span><br><span class="line">        .with(RabbitmqConfig.getRspQueueName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 构建资源的mq的模板信息</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> connectionFactory 连接工厂</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean(name = &quot;orderRabbitTemplate&quot;)</span></span><br><span class="line">  <span class="meta">@Primary</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">resourceRabbitTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="meta">@Qualifier(&quot;orderRabbitMQConnectionFactory&quot;)</span> ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    RabbitTemplate resourceRabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">    <span class="comment">// mandatory 为true，确认函数与返回执行函数才有生交</span></span><br><span class="line">    resourceRabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">    resourceRabbitTemplate.setConfirmCallback(<span class="keyword">new</span> ConfirmCallBackListener());</span><br><span class="line">    resourceRabbitTemplate.setReturnCallback(<span class="keyword">new</span> ReturnCallBackListener());</span><br><span class="line">    <span class="keyword">return</span> resourceRabbitTemplate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 事件确认机制 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmCallBackListener</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ConfirmCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line">      log.info(<span class="string">&quot;ConfirmCallBackListener config :correlationData:&#123;&#125;,ack:&#123;&#125; ,cause: &#123;&#125;&quot;</span>,</span><br><span class="line">          correlationData,ack,cause);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 回调监听 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnCallBackListener</span> <span class="keyword">implements</span> <span class="title">RabbitTemplate</span>.<span class="title">ReturnCallback</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> i, String s, String s1, String s2)</span> </span>&#123;</span><br><span class="line">      log.info( <span class="string">&quot;fail-message:&#123;&#125;,replyCode:&#123;&#125;,replyText:&#123;&#125;,exchange:&#123;&#125;,routingKey:&#123;&#125;&quot;</span>,</span><br><span class="line">          <span class="keyword">new</span> String(message.getBody()),i, s, s1,s2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOrderServerFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** json转换对象 */</span></span><br><span class="line">  <span class="keyword">private</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 发送对象 */</span></span><br><span class="line">  <span class="keyword">protected</span> RestTemplate restTemplate = RestTemplateUtils.INSTANCE.getRestTemplate();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sendRequest();</span><br><span class="line">    <span class="comment">// 每1秒获取一次结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">      checkResponse(i);</span><br><span class="line">      System.out.println();</span><br><span class="line">      ThreadUtils.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    OrderDTO orderInfo = <span class="keyword">new</span> OrderDTO();</span><br><span class="line">    orderInfo.setGoodId(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">    orderInfo.setUserId(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">    <span class="comment">// 将对象装入HttpEntity中</span></span><br><span class="line">    HttpEntity&lt;OrderDTO&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(orderInfo);</span><br><span class="line">    ResponseEntity&lt;String&gt; result =</span><br><span class="line">        restTemplate.postForEntity(<span class="string">&quot;http://localhost:9010/order/orderInfo&quot;</span>, request, String.class);</span><br><span class="line">    Assert.assertEquals(HttpStatus.OK.value(), result.getStatusCodeValue());</span><br><span class="line">    ApiResponse data = gson.fromJson(result.getBody(), <span class="keyword">new</span> TypeToken&lt;ApiResponse&gt;() &#123;&#125;.getType());</span><br><span class="line">    Assert.assertEquals(data.getResult(), Boolean.TRUE);</span><br><span class="line">    Assert.assertEquals(data.getCode(), APICodeEnum.SUCCESS.getErrorData().getCode());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkResponse</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    OrderDTO orderInfo = <span class="keyword">new</span> OrderDTO();</span><br><span class="line">    orderInfo.setGoodId(<span class="string">&quot;2001&quot;</span>);</span><br><span class="line">    orderInfo.setUserId(<span class="string">&quot;1001&quot;</span>);</span><br><span class="line">    <span class="comment">// 将对象装入HttpEntity中</span></span><br><span class="line">    HttpEntity&lt;OrderDTO&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(orderInfo);</span><br><span class="line">    ResponseEntity&lt;String&gt; result =</span><br><span class="line">        restTemplate.postForEntity(</span><br><span class="line">            <span class="string">&quot;http://localhost:9010/order/getResponse&quot;</span>, request, String.class);</span><br><span class="line">    Assert.assertEquals(HttpStatus.OK.value(), result.getStatusCodeValue());</span><br><span class="line">    ApiResponse&lt;OrderDTO&gt; data =</span><br><span class="line">        gson.fromJson(result.getBody(), <span class="keyword">new</span> TypeToken&lt;ApiResponse&lt;OrderDTO&gt;&gt;() &#123;&#125;.getType());</span><br><span class="line">    System.out.println(data);</span><br><span class="line">    Assert.assertEquals(data.getResult(), Boolean.TRUE);</span><br><span class="line">    Assert.assertEquals(data.getCode(), APICodeEnum.SUCCESS.getErrorData().getCode());</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">5</span>) &#123;</span><br><span class="line">      Assert.assertNotNull(data.getData().getUserInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">10</span>) &#123;</span><br><span class="line">      Assert.assertNotNull(data.getData().getGoodsInfo());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;                                                          </span><br></pre></td></tr></table></figure><p>使用消息中间件后，服务的双方都不用再等待。</p><p>客户端将消息交给消息中间件，服务端从消息中间件接收消息。两边都不再相互依赖，做到了解耦。</p><p>消息中间同时可以做数据的存储，可做到消息不丢。</p><p>使用消息中间件后。服务的双方都可以按照一个固定的速度来运行任务，做到削峰。</p>]]></content>
      
      
      <categories>
          
          <category> 异步 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis</title>
      <link href="2022/03/28/java/secondstage/redis/"/>
      <url>2022/03/28/java/secondstage/redis/</url>
      
        <content type="html"><![CDATA[<h1 id="0-Redis介绍"><a href="#0-Redis介绍" class="headerlink" title="0.Redis介绍"></a><strong>0.Redis介绍</strong></h1><p>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD许可）高性能非关系型（NoSQL）的键值对数据库。本质上是一个 Key-Value 类型的内存数据库，  整个数据库加载在内存当中进行操作， 定期通过异步操作把数据库数据 flush 到硬盘上进行保存</p><ul><li>不遵循SQL标准</li><li>不支持ACID（原子性，一致性，持久性，隔离性）</li><li>远超于SQL的性能(已知最快的key-value,纯内存操作)</li></ul><h1 id="1-Redis-的基本操作"><a href="#1-Redis-的基本操作" class="headerlink" title="1.Redis 的基本操作"></a><strong>1.Redis 的基本操作</strong></h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1.安装"></a>1.1.安装</h2><p>教程地址：<a href="https://www.runoob.com/redis/redis-install.html">菜鸟教程</a></p><h1 id="2-Redis基本数据存储类型"><a href="#2-Redis基本数据存储类型" class="headerlink" title="2.Redis基本数据存储类型"></a><strong>2.Redis基本数据存储类型</strong></h1><p>redis存储的是：key,value格式的数据，其中key都是字符串，value有5种不同的数据结构     </p><p>value的数据结构：     </p><pre><code>* 字符串类型 string         *  哈希类型 hash ： map格式           * 列表类型 list ： linkedlist格式。支持重复元素         *  集合类型 set  ： 不允许重复元素         *  有序集合类型 sortedset：不允许重复元素，且元素有顺序</code></pre><h2 id="2-1String类型"><a href="#2-1String类型" class="headerlink" title="2.1String类型"></a>2.1String类型</h2><h3 id="内部实现"><a href="#内部实现" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>String 类型的底层的数据结构实现主要是 int 和 SDS（简单动态字符串）。</p><p>SDS 和我们认识的 C 字符串不太一样，之所以没有使用 C 语言的字符串表示，因为 SDS 相比于 C 的原生字符串：</p><ul><li><strong>SDS 不仅可以保存文本数据，还可以保存二进制数据</strong>。因为 <code>SDS</code> 使用 <code>len</code> 属性的值而不是空字符来判断字符串是否结束，并且 SDS 的所有 API 都会以处理二进制的方式来处理 SDS 存放在 <code>buf[]</code> 数组里的数据。所以 SDS 不光能存放文本数据，而且能保存图片、音频、视频、压缩文件这样的二进制数据。</li><li>**SDS 获取字符串长度的时间复杂度是 O(1)**。因为 C 语言的字符串并不记录自身长度，所以获取长度的复杂度为 O(n)；而 SDS 结构里用 <code>len</code> 属性记录了字符串长度，所以复杂度为 <code>O(1)</code>。</li><li><strong>Redis 的 SDS API 是安全的，拼接字符串不会造成缓冲区溢出</strong>。因为 SDS 在拼接字符串之前会检查 SDS 空间是否满足要求，如果空间不够会自动扩容，所以不会导致缓冲区溢出的问题。</li></ul><p>字符串对象的内部编码（encoding）有 3 种 ：<strong>int、raw和 embstr</strong>。</p><p><img src="/images/img/blog/image-20220620102656145.png" alt="image-20220620102656145"></p><p>如果一个字符串对象保存的是整数值，并且这个整数值可以用<code>long</code>类型来表示，那么字符串对象会将整数值保存在字符串对象结构的<code>ptr</code>属性里面（将<code>void*</code>转换成 long），并将字符串对象的编码设置为<code>int</code>。</p><p><img src="/images/img/blog/image-20220620102752438.png" alt="image-20220620102752438"></p><p>如果字符串对象保存的是一个字符串，并且这个字符申的长度小于等于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为<code>embstr</code>， <code>embstr</code>编码是专门用于保存短字符串的一种优化编码方式：</p><p><img src="/images/img/blog/image-20220620102817386.png" alt="image-20220620102817386"></p><p>如果字符串对象保存的是一个字符串，并且这个字符串的长度大于 32 字节（redis 2.+版本），那么字符串对象将使用一个简单动态字符串（SDS）来保存这个字符串，并将对象的编码设置为<code>raw</code>：</p><p><img src="/images/img/blog/image-20220620102829176.png" alt="image-20220620102829176"></p><p>注意，embstr 编码和 raw 编码的边界在 redis 不同版本中是不一样的：</p><ul><li>redis 2.+ 是 32 字节</li><li>redis 3.0-4.0 是 39 字节</li><li>redis 5.0 是 44 字节</li></ul><p>可以看到<code>embstr</code>和<code>raw</code>编码都会使用<code>SDS</code>来保存值，但不同之处在于<code>embstr</code>会通过一次内存分配函数来分配一块连续的内存空间来保存<code>redisObject</code>和<code>SDS</code>，而<code>raw</code>编码会通过调用两次内存分配函数来分别分配两块空间来保存<code>redisObject</code>和<code>SDS</code>。Redis这样做会有很多好处：</p><ul><li><code>embstr</code>编码将创建字符串对象所需的内存分配次数从 <code>raw</code> 编码的两次降低为一次；</li><li>释放 <code>embstr</code>编码的字符串对象同样只需要调用一次内存释放函数；</li><li>因为<code>embstr</code>编码的字符串对象的所有数据都保存在一块连续的内存里面可以更好的利用 CPU 缓存提升性能。</li></ul><p>但是 embstr 也有缺点的：</p><ul><li><p>如果字符串的长度增加需要重新分配内存时，整个redisObject和sds都需要重新分配空间，所以<strong>embstr编码的字符串对象实际上是只读的</strong>，redis没有为embstr编码的字符串对象编写任何相应的修改程序。当我们对embstr编码的字符串对象执行任何修改命令（例如append）时，程序会先将对象的编码从embstr转换成raw，然后再执行修改命令。</p></li><li><p>存储的数据：单个数据，最简单的数据存储类型，也是最常用的数据存储类型</p></li><li><p>存储数据的格式：一个存储空间保存一个数据</p></li><li><p>存储内容：通常使用字符串，如果字符串以整数的形式展示，可以作为数字操作使用</p></li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">key</span> <span class="selector-tag">value</span>   添加/修改数据</span><br><span class="line"><span class="selector-tag">get</span> <span class="selector-tag">key</span>          获取数据</span><br><span class="line"><span class="selector-tag">del</span> <span class="selector-tag">key</span>          删除数据</span><br><span class="line"><span class="selector-tag">mset</span> <span class="selector-tag">key1</span> <span class="selector-tag">value1</span> <span class="selector-tag">key2</span> <span class="selector-tag">value2</span> …   添加/修改多个数据</span><br><span class="line"><span class="selector-tag">mget</span> <span class="selector-tag">key1</span> <span class="selector-tag">key2</span> …                  获取多个数据</span><br><span class="line"><span class="selector-tag">strlen</span> <span class="selector-tag">key</span>       获取数据字符个数（字符串长度）</span><br><span class="line"><span class="selector-tag">append</span> <span class="selector-tag">key</span> <span class="selector-tag">value</span>  追加信息到原始信息后部（如果原始信息存在就追加，否则新建）</span><br><span class="line"></span><br><span class="line">扩展操作：</span><br><span class="line">设置数值数据增加指定范围的值</span><br><span class="line"><span class="selector-tag">incr</span> <span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">incrby</span> <span class="selector-tag">key</span> <span class="selector-tag">increment</span></span><br><span class="line"><span class="selector-tag">incrbyfloat</span> <span class="selector-tag">key</span> <span class="selector-tag">increment</span></span><br><span class="line"></span><br><span class="line">设置数值数据减少指定范围的值</span><br><span class="line"><span class="selector-tag">decr</span> <span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">decrby</span> <span class="selector-tag">key</span> <span class="selector-tag">increment</span></span><br><span class="line"></span><br><span class="line">设置数据具有指定的生命周期</span><br><span class="line"><span class="selector-tag">setex</span> <span class="selector-tag">key</span> <span class="selector-tag">seconds</span> <span class="selector-tag">value</span></span><br><span class="line"><span class="selector-tag">psetex</span> <span class="selector-tag">key</span> <span class="selector-tag">milliseconds</span> <span class="selector-tag">value</span></span><br><span class="line">过期操作</span><br><span class="line"><span class="selector-tag">EXPIRE</span> <span class="selector-tag">key</span> <span class="selector-tag">time</span>    在<span class="selector-tag">time</span>秒后获取 </span><br><span class="line"><span class="selector-tag">set</span> <span class="selector-tag">key</span> <span class="selector-tag">value</span> <span class="selector-tag">EX</span> <span class="selector-tag">time</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="业务场景："><a href="#业务场景：" class="headerlink" title="业务场景："></a>业务场景：</h3><p>使用 String 来缓存对象有两种方式：</p><ul><li>直接缓存整个对象的 JSON，命令例子： <code>SET user:1 &#39;&#123;&quot;name&quot;:&quot;xiaolin&quot;, &quot;age&quot;:18&#125;&#39;</code>。</li><li>采用将 key 进行分离为 user:ID:属性，采用 MSET 存储，用 MGET 获取各属性值，命令例子： <code>MSET user:1:name xiaolin user:1:age 18 user:2:name xiaomei user:2:age 20</code>。</li></ul><h4 id="常规计数"><a href="#常规计数" class="headerlink" title="常规计数"></a>常规计数</h4><p>因为 Redis 处理命令是单线程，所以执行命令的过程是原子的。因此 String 数据类型适合计数场景，比如计算访问次数、点赞、转发、库存数量等等。</p><p>比如计算文章的阅读量：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 初始化文章的阅读量</span></span><br><span class="line"><span class="quote">&gt; SET aritcle:readcount:1001 0</span></span><br><span class="line">OK</span><br><span class="line"><span class="section">#阅读量+1</span></span><br><span class="line"><span class="quote">&gt; INCR aritcle:readcount:1001</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="section">#阅读量+1</span></span><br><span class="line"><span class="quote">&gt; INCR aritcle:readcount:1001</span></span><br><span class="line">(integer) 2</span><br><span class="line"><span class="section">#阅读量+1</span></span><br><span class="line"><span class="quote">&gt; INCR aritcle:readcount:1001</span></span><br><span class="line">(integer) 3</span><br><span class="line"><span class="section"># 获取对应文章的阅读量</span></span><br><span class="line"><span class="quote">&gt; GET aritcle:readcount:1001</span></span><br><span class="line">&quot;3&quot;</span><br></pre></td></tr></table></figure><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>SET 命令有个 NX 参数可以实现「key不存在才插入」，可以用它来实现分布式锁：</p><ul><li>如果 key 不存在，则显示插入成功，可以用来表示加锁成功；</li><li>如果 key 存在，则会显示插入失败，可以用来表示加锁失败。</li></ul><p>一般而言，还会对分布式锁加上过期时间，分布式锁的命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> lock_key unique_value NX PX <span class="number">10000</span></span><br></pre></td></tr></table></figure><ul><li>lock_key 就是 key 键；</li><li>unique_value 是客户端生成的唯一的标识；</li><li>NX 代表只在 lock_key 不存在时，才对 lock_key 进行设置操作；</li><li>PX 10000 表示设置 lock_key 的过期时间为 10s，这是为了避免客户端发生异常而无法释放锁。</li></ul><p>而解锁的过程就是将 lock_key 键删除，但不能乱删，要保证执行操作的客户端就是加锁的客户端。所以，解锁的时候，我们要先判断锁的 unique_value 是否为加锁客户端，是的话，才将 lock_key 键删除。</p><p>可以看到，解锁是有两个操作，这时就需要 Lua 脚本来保证解锁的原子性，因为 Redis 在执行 Lua 脚本时，可以以原子性的方式执行，保证了锁释放操作的原子性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放锁时，先比较 unique_value 是否相等，避免锁的误释放</span></span><br><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] then</span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这样一来，就通过使用 SET 命令和 Lua 脚本在 Redis 单节点上完成了分布式锁的加锁和解锁。</p><h4 id="共享-Session-信息"><a href="#共享-Session-信息" class="headerlink" title="共享 Session 信息"></a>共享 Session 信息</h4><p>通常我们在开发后台管理系统时，会使用 Session 来保存用户的会话(登录)状态，这些 Session 信息会被保存在服务器端，但这只适用于单系统应用，如果是分布式系统此模式将不再适用。</p><p>例如用户一的 Session 信息被存储在服务器一，但第二次访问时用户一被分配到服务器二，这个时候服务器并没有用户一的 Session 信息，就会出现需要重复登录的问题，问题在于分布式系统每次会把请求随机分配到不同的服务器。</p><p>分布式系统单独存储 Session 流程图：</p><p><img src="/images/img/blog/image-20220620102852753.png" alt="image-20220620102852753"></p><p>因此，我们需要借助 Redis 对这些 Session 信息进行统一的存储和管理，这样无论请求发送到那台服务器，服务器都会去同一个 Redis 获取相关的 Session 信息，这样就解决了分布式系统下 Session 存储的问题。</p><p>分布式系统使用同一个 Redis 存储 Session 流程图：</p><p><img src="/images/img/blog/image-20220620102905750.png" alt="image-20220620102905750"></p><h2 id="2-2Hash类型"><a href="#2-2Hash类型" class="headerlink" title="2.2Hash类型"></a>2.2Hash类型</h2><h3 id="内部实现-1"><a href="#内部实现-1" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>Hash 类型的底层数据结构是由<strong>压缩列表或哈希表</strong>实现的：</p><ul><li>如果哈希类型元素个数小于 <code>512</code> 个（默认值，可由 <code>hash-max-ziplist-entries</code> 配置），所有值小于 <code>64</code> 字节（默认值，可由 <code>hash-max-ziplist-value</code> 配置）的话，Redis 会使用<strong>压缩列表</strong>作为 Hash 类型的底层数据结构；</li><li>如果哈希类型元素不满足上面条件，Redis 会使用<strong>哈希表</strong>作为 Hash 类型的 底层数据结构。</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了</strong>。</p><ul><li><p>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</p></li><li><p> 需要的存储结构：一个存储空间保存多个键值对数据</p></li><li><p> hash类型：底层使用哈希表结构实现数据存储</p></li></ul><p>  <em>hash存储结构优化：如果field数量较少，存储结构优化为类数组结构，如果field数量较多，存储结构使用HashMap结构。</em></p><p>  <em>hash类型数据操作注意事项：①hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到， 对应的值为（nil）。②hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问 瓶颈。</em></p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">hset</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span> <span class="selector-tag">value</span>   添加/修改数据</span><br><span class="line"><span class="selector-tag">hget</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span></span><br><span class="line"><span class="selector-tag">hgetall</span> <span class="selector-tag">key</span>              获取数据</span><br><span class="line"><span class="selector-tag">hdel</span> <span class="selector-tag">key</span> <span class="selector-tag">field1</span> <span class="selector-attr">[field2]</span> 删除数据</span><br><span class="line"><span class="selector-tag">hmset</span> <span class="selector-tag">key</span> <span class="selector-tag">field1</span> <span class="selector-tag">value1</span> <span class="selector-tag">field2</span> <span class="selector-tag">value2</span> …    添加/修改多个数据</span><br><span class="line"><span class="selector-tag">hmget</span> <span class="selector-tag">key</span> <span class="selector-tag">field1</span> <span class="selector-tag">field2</span> …                   获取多个数据</span><br><span class="line"><span class="selector-tag">hlen</span> <span class="selector-tag">key</span>                                 获取哈希表中字段的数量</span><br><span class="line"><span class="selector-tag">hexists</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span>                     获取哈希表中是否存在指定的字段</span><br><span class="line"></span><br><span class="line">扩展操作：</span><br><span class="line">获取哈希表中所有的字段名或字段值</span><br><span class="line"><span class="selector-tag">hkeys</span> <span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">hvals</span> <span class="selector-tag">key</span></span><br><span class="line"></span><br><span class="line">设置指定字段的数值数据增加指定范围的值</span><br><span class="line"><span class="selector-tag">hincrby</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span> <span class="selector-tag">increment</span></span><br><span class="line"><span class="selector-tag">hincrbyfloat</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span> <span class="selector-tag">increment</span></span><br><span class="line"></span><br><span class="line">为哈希表中不存在的的字段赋值</span><br><span class="line"><span class="selector-tag">hsetnx</span> <span class="selector-tag">key</span> <span class="selector-tag">field</span> <span class="selector-tag">value</span></span><br></pre></td></tr></table></figure><h3 id="业务场景：-1"><a href="#业务场景：-1" class="headerlink" title="业务场景："></a>业务场景：</h3><h4 id="缓存对象"><a href="#缓存对象" class="headerlink" title="缓存对象"></a>缓存对象</h4><p>Hash 类型的 （key，field， value） 的结构与对象的（对象id， 属性， 值）的结构相似，也可以用来存储对象。</p><p>我们以用户信息为例</p><p>我们可以使用如下命令，将用户对象的信息存储到 Hash 类型：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 存储一个哈希表<span class="selector-tag">uid</span>:<span class="selector-tag">1</span>的键值</span><br><span class="line">&gt; <span class="selector-tag">HSET</span> <span class="selector-tag">uid</span>:<span class="selector-tag">1</span> <span class="selector-tag">name</span> <span class="selector-tag">Tom</span> <span class="selector-tag">age</span> <span class="selector-tag">15</span></span><br><span class="line"><span class="selector-tag">2</span></span><br><span class="line"># 存储一个哈希表<span class="selector-tag">uid</span>:<span class="selector-tag">2</span>的键值</span><br><span class="line">&gt; <span class="selector-tag">HSET</span> <span class="selector-tag">uid</span>:<span class="selector-tag">2</span> <span class="selector-tag">name</span> <span class="selector-tag">Jerry</span> <span class="selector-tag">age</span> <span class="selector-tag">13</span></span><br><span class="line"><span class="selector-tag">2</span></span><br><span class="line"># 获取哈希表用户<span class="selector-tag">id</span>为<span class="selector-tag">1</span>中所有的键值</span><br><span class="line">&gt; <span class="selector-tag">HGETALL</span> <span class="selector-tag">uid</span>:<span class="selector-tag">1</span></span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;Tom&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;15&quot;</span><br></pre></td></tr></table></figure><p>Redis Hash 存储其结构如下图：</p><p><img src="/images/img/blog/image-20220620103328419.png" alt="image-20220620103328419"></p><p>在介绍 String 类型的应用场景时有所介绍，String + Json也是存储对象的一种方式，那么存储对象时，到底用 String + json 还是用 Hash 呢？</p><p>一般对象用 String + Json 存储，对象中某些频繁变化的属性可以考虑抽出来用 Hash 类型存储。</p><h2 id="2-3List"><a href="#2-3List" class="headerlink" title="2.3List"></a>2.3List</h2><h3 id="内部实现-2"><a href="#内部实现-2" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>List 类型的底层数据结构是由<strong>双向链表或压缩列表</strong>实现的：</p><ul><li>如果列表的元素个数小于 <code>512</code> 个（默认值，可由 <code>list-max-ziplist-entries</code> 配置），列表每个元素的值都小于 <code>64</code> 字节（默认值，可由 <code>list-max-ziplist-value</code> 配置），Redis 会使用<strong>压缩列表</strong>作为 List 类型的底层数据结构；</li><li>如果列表的元素不满足上面的条件，Redis 会使用<strong>双向链表</strong>作为 List 类型的底层数据结构；</li></ul><p>但是<strong>在 Redis 3.2 版本之后，List 数据类型底层数据结构就只由 quicklist 实现了，替代了双向链表和压缩列表</strong>。</p><ul><li> 数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li> 需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li> list类型：保存多个数据，底层使用双向链表存储结构实现<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">添加&#x2F;修改数据</span><br><span class="line">lpush key value1 [value2] ……</span><br><span class="line">rpush key value1 [value2] ……</span><br><span class="line"></span><br><span class="line">获取数据</span><br><span class="line">lrange key start stop</span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br><span class="line"></span><br><span class="line">获取并移除数据</span><br><span class="line">lpop key</span><br><span class="line">rpop key</span><br><span class="line"></span><br><span class="line">扩展操作</span><br><span class="line">规定时间内获取并移除数据</span><br><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br><span class="line">brpoplpush source destination timeout</span><br><span class="line"></span><br><span class="line">移除指定数据</span><br><span class="line">lrem key count value</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>消息队列在存取消息时，必须要满足三个需求，分别是<strong>消息保序、处理重复的消息和保证消息可靠性</strong>。</p><p>Redis 的 List 和 Stream 两种数据类型，就可以满足消息队列的这三个需求。我们先来了解下基于 List 的消息队列实现方法，后面在介绍 Stream 数据类型时候，在详细说说 Stream。</p><p><em>1、如何满足消息保序需求？</em></p><p>List 本身就是按先进先出的顺序对数据进行存取的，所以，如果使用 List 作为消息队列保存消息的话，就已经能满足消息保序的需求了。</p><p>List 可以使用 LPUSH + RPOP （或者反过来，RPUSH+LPOP）命令实现消息队列。</p><p><img src="/images/img/blog/image-20220620103004876.png" alt="image-20220620103004876"></p><ul><li>生产者使用 <code>LPUSH key value[value...]</code> 将消息插入到队列的头部，如果 key 不存在则会创建一个空的队列再插入消息。</li><li>消费者使用 <code>RPOP key</code> 依次读取队列的消息，先进先出。</li></ul><p>不过，在消费者读取数据时，有一个潜在的性能风险点。</p><p>在生产者往 List 中写入数据时，List 并不会主动地通知消费者有新消息写入，如果消费者想要及时处理消息，就需要在程序中不停地调用 <code>RPOP</code> 命令（比如使用一个while(1)循环）。如果有新消息写入，RPOP命令就会返回结果，否则，RPOP命令返回空值，再继续循环。</p><p>所以，即使没有新消息写入List，消费者也要不停地调用 RPOP 命令，这就会导致消费者程序的 CPU 一直消耗在执行 RPOP 命令上，带来不必要的性能损失。</p><p>为了解决这个问题，Redis提供了 BRPOP 命令。<strong>BRPOP命令也称为阻塞式读取，客户端在没有读到队列数据时，自动阻塞，直到有新的数据写入队列，再开始读取新数据</strong>。和消费者程序自己不停地调用RPOP命令相比，这种方式能节省CPU开销。</p><p><img src="/images/img/blog/image-20220620103018102.png" alt="image-20220620103018102"></p><p><em>2、如何处理重复的消息？</em></p><p>消费者要实现重复消息的判断，需要 2 个方面的要求：</p><ul><li>每个消息都有一个全局的 ID。</li><li>消费者要记录已经处理过的消息的 ID。当收到一条消息后，消费者程序就可以对比收到的消息 ID 和记录的已处理过的消息 ID，来判断当前收到的消息有没有经过处理。如果已经处理过，那么，消费者程序就不再进行处理了。</li></ul><p>但是 <strong>List 并不会为每个消息生成 ID 号，所以我们需要自行为每个消息生成一个全局唯一ID</strong>，生成之后，我们在用 LPUSH 命令把消息插入 List 时，需要在消息中包含这个全局唯一 ID。</p><p>例如，我们执行以下命令，就把一条全局 ID 为 111000102、库存量为 99 的消息插入了消息队列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; LPUSH mq <span class="string">&quot;111000102:stock:99&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p><em>3、如何保证消息可靠性？</em></p><p>当消费者程序从 List 中读取一条消息后，List 就不会再留存这条消息了。所以，如果消费者程序在处理消息的过程出现了故障或宕机，就会导致消息没有处理完成，那么，消费者程序再次启动后，就没法再次从 List 中读取消息了。</p><p>为了留存消息，List 类型提供了 <code>BRPOPLPUSH</code> 命令，这个命令的<strong>作用是让消费者程序从一个 List 中读取消息，同时，Redis 会把这个消息再插入到另一个 List（可以叫作备份 List）留存</strong>。</p><p>这样一来，如果消费者程序读了消息但没能正常处理，等它重启后，就可以从备份 List 中重新读取消息并进行处理了。</p><p>好了，到这里可以知道基于 List 类型的消息队列，满足消息队列的三大需求（消息保序、处理重复的消息和保证消息可靠性）。</p><ul><li>消息保序：使用 LPUSH + RPOP；</li><li>阻塞读取：使用 BRPOP；</li><li>重复消息处理：生产者自行实现全局唯一 ID；</li><li>消息的可靠性：使用 BRPOPLPUSH</li></ul><blockquote><p>List 作为消息队列有什么缺陷？</p></blockquote><p><strong>List 不支持多个消费者消费同一条消息</strong>，因为一旦消费者拉取一条消息后，这条消息就从 List 中删除了，无法被其它消费者再次消费。</p><p>要实现一条消息可以被多个消费者消费，那么就要将多个消费者组成一个消费组，使得多个消费者可以消费同一条消息，但是 <strong>List 类型并不支持消费组的实现</strong>。</p><p>这就要说起 Redis 从 5.0 版本开始提供的 Stream 数据类型了，Stream 同样能够满足消息队列的三大需求，而且它还支持「消费组」形式的消息读取。</p><h2 id="2-4set类型"><a href="#2-4set类型" class="headerlink" title="2.4set类型"></a>2.4set类型</h2><h3 id="内部实现-3"><a href="#内部实现-3" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>Set 类型的底层数据结构是由<strong>哈希表或整数集合</strong>实现的：</p><ul><li><p>如果集合中的元素都是整数且元素个数小于 <code>512</code> （默认值，<code>set-maxintset-entries</code>配置）个，Redis 会使用<strong>整数集合</strong>作为 Set 类型的底层数据结构；</p></li><li><p>如果集合中的元素不满足上面条件，则 Redis 使用<strong>哈希表</strong>作为 Set 类型的底层数据结构。</p></li><li><p>新的存储需求：存储大量的数据，在查询方面提供更高的效率</p></li><li><p>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</p></li><li><p>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</p></li></ul><h3 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sadd</span> <span class="selector-tag">key</span> <span class="selector-tag">member1</span> <span class="selector-attr">[member2]</span>     添加数据</span><br><span class="line"><span class="selector-tag">smembers</span> <span class="selector-tag">key</span>                   获取全部数据</span><br><span class="line"><span class="selector-tag">srem</span> <span class="selector-tag">key</span> <span class="selector-tag">member1</span> <span class="selector-attr">[member2]</span>     删除数据</span><br><span class="line"><span class="selector-tag">scard</span> <span class="selector-tag">key</span>                      获取集合数据总量</span><br><span class="line"><span class="selector-tag">sismember</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span>           判断集合中是否包含指定数据</span><br><span class="line"></span><br><span class="line">扩展操作</span><br><span class="line">随机获取集合中指定数量的数据</span><br><span class="line"><span class="selector-tag">srandmember</span> <span class="selector-tag">key</span> <span class="selector-attr">[count]</span></span><br><span class="line"></span><br><span class="line">随机获取集合中的某个数据并将该数据移出集合</span><br><span class="line"><span class="selector-tag">spop</span> <span class="selector-tag">key</span> <span class="selector-attr">[count]</span></span><br><span class="line"></span><br><span class="line">求两个集合的交、并、差集</span><br><span class="line"><span class="selector-tag">sinter</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span> </span><br><span class="line"><span class="selector-tag">sunion</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span> </span><br><span class="line"><span class="selector-tag">sdiff</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span></span><br><span class="line"></span><br><span class="line">求两个集合的交、并、差集并存储到指定集合中</span><br><span class="line"><span class="selector-tag">sinterstore</span> <span class="selector-tag">destination</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span> </span><br><span class="line"><span class="selector-tag">sunionstore</span> <span class="selector-tag">destination</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span> </span><br><span class="line"><span class="selector-tag">sdiffstore</span> <span class="selector-tag">destination</span> <span class="selector-tag">key1</span> <span class="selector-attr">[key2]</span></span><br><span class="line"></span><br><span class="line">将指定数据从原始集合中移动到目标集合中</span><br><span class="line"><span class="selector-tag">smove</span> <span class="selector-tag">source</span> <span class="selector-tag">destination</span> <span class="selector-tag">member</span></span><br></pre></td></tr></table></figure><h3 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h3><p>集合的主要几个特性，无序、不可重复、支持并交差等操作。</p><p>因此 Set 类型比较适合用来数据去重和保障数据的唯一性，还可以用来统计多个集合的交集、错集和并集等，当我们存储的数据是无序并且需要去重的情况下，比较适合使用集合类型进行存储。</p><p>但是要提醒你一下，这里有一个潜在的风险。<strong>Set 的差集、并集和交集的计算复杂度较高，在数据量较大的情况下，如果直接执行这些计算，会导致 Redis 实例阻塞</strong>。</p><p>在主从集群中，为了避免主库因为 Set 做聚合计算（交集、差集、并集）时导致主库被阻塞，我们可以选择一个从库完成聚合统计，或者把数据返回给客户端，由客户端来完成聚合统计。</p><h4 id="点赞"><a href="#点赞" class="headerlink" title="点赞"></a>点赞</h4><p>Set 类型可以保证一个用户只能点一个赞，这里举例子一个场景，key 是文章id，value 是用户id。</p><p><code>uid:1</code> 、<code>uid:2</code>、<code>uid:3</code> 三个用户分别对 article:1 文章点赞了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uid:1 用户对文章 article:1 点赞</span></span><br><span class="line">&gt; SADD article:1 uid:1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># uid:2 用户对文章 article:1 点赞</span></span><br><span class="line">&gt; SADD article:1 uid:2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># uid:3 用户对文章 article:1 点赞</span></span><br><span class="line">&gt; SADD article:1 uid:3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p><code>uid:1</code> 取消了对 article:1 文章点赞。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SREM</span> <span class="selector-tag">article</span>:<span class="selector-tag">1</span> <span class="selector-tag">uid</span>:<span class="selector-tag">1</span></span><br><span class="line">(integer) <span class="selector-tag">1</span></span><br></pre></td></tr></table></figure><p>获取 article:1 文章所有点赞用户 :</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SMEMBERS <span class="selector-tag">article</span>:<span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;uid:3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;uid:2&quot;</span></span><br></pre></td></tr></table></figure><p>获取 article:1 文章的点赞用户数量：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">SCARD</span> <span class="selector-tag">article</span>:<span class="selector-tag">1</span></span><br><span class="line">(integer) <span class="selector-tag">2</span></span><br></pre></td></tr></table></figure><p>判断用户 <code>uid:1</code> 是否对文章 article:1 点赞了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; SISMEMBER article:1 uid:1</span><br><span class="line">(<span class="built_in">integer</span>) 0  <span class="comment"># 返回0说明没点赞，返回1则说明点赞了</span></span><br></pre></td></tr></table></figure><h4 id="共同关注"><a href="#共同关注" class="headerlink" title="共同关注"></a>共同关注</h4><p>Set 类型支持交集运算，所以可以用来计算共同关注的好友、公众号等。</p><p>key 可以是用户id，value 则是已关注的公众号的id。</p><p><code>uid:1</code> 用户关注公众号 id 为 5、6、7、8、9，<code>uid:2</code> 用户关注公众号 id 为 7、8、9、10、11。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> uid:1 用户关注公众号 id 为 5、6、7、8、9</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> SADD uid:1 5 6 7 8 9</span></span><br><span class="line">(integer) 5</span><br><span class="line"><span class="meta">#</span><span class="bash"> uid:2  用户关注公众号 id 为 7、8、9、10、11</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> SADD uid:2 7 8 9 10 11</span></span><br><span class="line">(integer) 5</span><br></pre></td></tr></table></figure><p><code>uid:1</code> 和 <code>uid:2</code> 共同关注的公众号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取共同关注</span></span><br><span class="line">&gt; SINTER uid:1 uid:2</span><br><span class="line">1) <span class="string">&quot;7&quot;</span></span><br><span class="line">2) <span class="string">&quot;8&quot;</span></span><br><span class="line">3) <span class="string">&quot;9&quot;</span></span><br></pre></td></tr></table></figure><p>给 <code>uid:2</code> 推荐 <code>uid:1</code> 关注的公众号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; SDIFF uid:1 uid:2</span><br><span class="line">1) <span class="string">&quot;5&quot;</span></span><br><span class="line">2) <span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><p>验证某个公众号是否同时被 <code>uid:1</code> 或 <code>uid:2</code> 关注:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; SISMEMBER uid:1 5</span><br><span class="line">(<span class="built_in">integer</span>) 1 <span class="comment"># 返回0，说明关注了</span></span><br><span class="line">&gt; SISMEMBER uid:2 5</span><br><span class="line">(<span class="built_in">integer</span>) 0 <span class="comment"># 返回0，说明没关注</span></span><br></pre></td></tr></table></figure><h4 id="抽奖活动"><a href="#抽奖活动" class="headerlink" title="抽奖活动"></a>抽奖活动</h4><p>存储某活动中中奖的用户名 ，Set 类型因为有去重功能，可以保证同一个用户不会中奖两次。</p><p>key为抽奖活动名，value为员工名称，把所有员工名称放入抽奖箱 ：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;SADD lucky Tom <span class="keyword">Jerry </span><span class="keyword">John </span>Sean Marry Lindy Sary Mark</span><br><span class="line">(integer) <span class="number">5</span></span><br></pre></td></tr></table></figure><p>如果允许重复中奖，可以使用 SRANDMEMBER 命令。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抽取 1 个一等奖：</span></span><br><span class="line">&gt; <span class="keyword">SRANDMEMBER </span>lucky <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="comment"># 抽取 2 个二等奖：</span></span><br><span class="line">&gt; <span class="keyword">SRANDMEMBER </span>lucky <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Mark&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Jerry&quot;</span></span><br><span class="line"><span class="comment"># 抽取 3 个三等奖：</span></span><br><span class="line">&gt; <span class="keyword">SRANDMEMBER </span>lucky <span class="number">3</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Sary&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;Jerry&quot;</span></span><br></pre></td></tr></table></figure><p>如果不允许重复中奖，可以使用 SPOP 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 抽取一等奖1个</span></span><br><span class="line">&gt; SPOP lucky 1</span><br><span class="line">1) <span class="string">&quot;Sary&quot;</span></span><br><span class="line"><span class="comment"># 抽取二等奖2个</span></span><br><span class="line">&gt; SPOP lucky 2</span><br><span class="line">1) <span class="string">&quot;Jerry&quot;</span></span><br><span class="line">2) <span class="string">&quot;Mark&quot;</span></span><br><span class="line"><span class="comment"># 抽取三等奖3个</span></span><br><span class="line">&gt; SPOP lucky 3</span><br><span class="line">1) <span class="string">&quot;John&quot;</span></span><br><span class="line">2) <span class="string">&quot;Sean&quot;</span></span><br><span class="line">3) <span class="string">&quot;Lindy&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-5sorted-set类型"><a href="#2-5sorted-set类型" class="headerlink" title="2.5sorted_set类型"></a>2.5sorted_set类型</h2><ul><li><p>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</p></li><li><p>需要的存储结构：新的存储模型，可以保存可排序的数据</p></li><li><p>sorted_set类型：在set的存储结构基础上添加可排序字段</p></li></ul><h3 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">zadd</span> <span class="selector-tag">key</span> <span class="selector-tag">score1</span> <span class="selector-tag">member1</span> <span class="selector-attr">[score2 member2]</span>    添加数据</span><br><span class="line"><span class="selector-tag">zrange</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">stop</span> <span class="selector-attr">[WITHSCORES]</span></span><br><span class="line"><span class="selector-tag">zrevrange</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">stop</span> <span class="selector-attr">[WITHSCORES]</span>       获取全部数据</span><br><span class="line"><span class="selector-tag">zrem</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span> <span class="selector-attr">[member ...]</span>                删除数据</span><br><span class="line"><span class="selector-tag">zrangebyscore</span> <span class="selector-tag">key</span> <span class="selector-tag">min</span> <span class="selector-tag">max</span> <span class="selector-attr">[WITHSCORES]</span> <span class="selector-attr">[LIMIT]</span></span><br><span class="line"><span class="selector-tag">zrevrangebyscore</span> <span class="selector-tag">key</span> <span class="selector-tag">max</span> <span class="selector-tag">min</span> <span class="selector-attr">[WITHSCORES]</span>   按条件获取数据</span><br><span class="line"><span class="selector-tag">zremrangebyrank</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">stop</span></span><br><span class="line"><span class="selector-tag">zremrangebyscore</span> <span class="selector-tag">key</span> <span class="selector-tag">min</span> <span class="selector-tag">max</span>                条件删除数据</span><br><span class="line"><span class="selector-tag">zcard</span> <span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">zcount</span> <span class="selector-tag">key</span> <span class="selector-tag">min</span> <span class="selector-tag">max</span>                          获取集合数据总量</span><br><span class="line"><span class="selector-tag">zinterstore</span> <span class="selector-tag">destination</span> <span class="selector-tag">numkeys</span> <span class="selector-tag">key</span> <span class="selector-attr">[key ...]</span></span><br><span class="line"><span class="selector-tag">zunionstore</span> <span class="selector-tag">destination</span> <span class="selector-tag">numkeys</span> <span class="selector-tag">key</span> <span class="selector-attr">[key ...]</span>    集合交、并操作</span><br><span class="line"></span><br><span class="line">扩展操作</span><br><span class="line">获取数据对应的索引（排名）</span><br><span class="line"><span class="selector-tag">zrank</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span></span><br><span class="line"><span class="selector-tag">zrevrank</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">score</span>值获取与修改</span><br><span class="line"><span class="selector-tag">zscore</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span></span><br><span class="line"><span class="selector-tag">zincrby</span> <span class="selector-tag">key</span> <span class="selector-tag">increment</span> <span class="selector-tag">member</span></span><br></pre></td></tr></table></figure><h3 id="业务场景：-2"><a href="#业务场景：-2" class="headerlink" title="业务场景："></a>业务场景：</h3><p>redis 应用于计数器组合排序功能对应的排名。</p><p>redis 应用于定时任务执行顺序管理或任务过期管理。</p><p>任务/消息权重设定应用当任务或者消息待处理，形成了任务队列或消息队列时，对于高优先级的任务要保障对其优先处理。</p><h2 id="2-6geo-类型"><a href="#2-6geo-类型" class="headerlink" title="2.6geo 类型"></a>2.6geo 类型</h2><p>GEO 是 Redis 3.2 版本新增的数据类型，主要用于存储地理位置信息，并对存储的信息进行操作。</p><p>在日常生活中，我们越来越依赖搜索“附近的餐馆”、在打车软件上叫车，这些都离不开基于位置信息服务（Location-Based Service，LBS）的应用。LBS 应用访问的数据是和人或物关联的一组经纬度信息，而且要能查询相邻的经纬度范围，GEO 就非常适合应用在 LBS 服务的场景中。</p><h3 id="内部实现-4"><a href="#内部实现-4" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>GEO 本身并没有设计新的底层数据结构，而是直接使用了 Sorted Set 集合类型。</p><p>GEO 类型使用 GeoHash 编码方法实现了经纬度到 Sorted Set 中元素权重分数的转换，这其中的两个关键机制就是「对二维地图做区间划分」和「对区间进行编码」。一组经纬度落在某个区间后，就用区间的编码值来表示，并把编码值作为 Sorted Set 元素的权重分数。</p><p>这样一来，我们就可以把经纬度保存到 Sorted Set 中，利用 Sorted Set 提供的“按权重进行有序范围查找”的特性，实现 LBS 服务中频繁使用的“搜索附近”的需求。</p><h3 id="常用命令-5"><a href="#常用命令-5" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 存储指定的地理空间位置，可以将一个或多个经度(longitude)、纬度(latitude)、位置名称(member)添加到指定的 <span class="selector-tag">key</span> 中。</span><br><span class="line"><span class="selector-tag">GEOADD</span> <span class="selector-tag">key</span> <span class="selector-tag">longitude</span> <span class="selector-tag">latitude</span> <span class="selector-tag">member</span> <span class="selector-attr">[longitude latitude member ...]</span></span><br><span class="line"></span><br><span class="line"># 从给定的 <span class="selector-tag">key</span> 里返回所有指定名称(member)的位置（经度和纬度），不存在的返回 <span class="selector-tag">nil</span>。</span><br><span class="line"><span class="selector-tag">GEOPOS</span> <span class="selector-tag">key</span> <span class="selector-tag">member</span> <span class="selector-attr">[member ...]</span></span><br><span class="line"></span><br><span class="line"># 返回两个给定位置之间的距离。</span><br><span class="line"><span class="selector-tag">GEODIST</span> <span class="selector-tag">key</span> <span class="selector-tag">member1</span> <span class="selector-tag">member2</span> <span class="selector-attr">[m|km|ft|mi]</span></span><br><span class="line"></span><br><span class="line"># 根据用户给定的经纬度坐标来获取指定范围内的地理位置集合。</span><br><span class="line"><span class="selector-tag">GEORADIUS</span> <span class="selector-tag">key</span> <span class="selector-tag">longitude</span> <span class="selector-tag">latitude</span> <span class="selector-tag">radius</span> <span class="selector-tag">m</span>|<span class="selector-tag">km</span>|<span class="selector-tag">ft</span>|<span class="selector-tag">mi</span> <span class="selector-attr">[WITHCOORD]</span> <span class="selector-attr">[WITHDIST]</span> <span class="selector-attr">[WITHHASH]</span> <span class="selector-attr">[COUNT count]</span> <span class="selector-attr">[ASC|DESC]</span> <span class="selector-attr">[STORE key]</span> <span class="selector-attr">[STOREDIST key]</span></span><br></pre></td></tr></table></figure><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>这里以滴滴叫车的场景为例，介绍下具体如何使用 GEO 命令：GEOADD 和 GEORADIUS 这两个命令。</p><p>假设车辆 ID 是 33，经纬度位置是（116.034579，39.030452），我们可以用一个 GEO 集合保存所有车辆的经纬度，集合 key 是 cars:locations。</p><p>执行下面的这个命令，就可以把 ID 号为 33 的车辆的当前经纬度位置存入 GEO 集合中：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">GEOADD</span> <span class="selector-tag">cars</span>:<span class="selector-tag">locations</span> <span class="selector-tag">116</span><span class="selector-class">.034579</span> <span class="selector-tag">39</span><span class="selector-class">.030452</span> <span class="selector-tag">33</span></span><br></pre></td></tr></table></figure><p>当用户想要寻找自己附近的网约车时，LBS 应用就可以使用 GEORADIUS 命令。</p><p>例如，LBS 应用执行下面的命令时，Redis 会根据输入的用户的经纬度信息（116.054579，39.030452 ），查找以这个经纬度为中心的 5 公里内的车辆信息，并返回给 LBS 应用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GEORADIUS cars:locations <span class="number">116.054579</span> <span class="number">39.030452</span> <span class="number">5</span> km <span class="keyword">ASC</span> COUNT <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="2-7HyperLogLog"><a href="#2-7HyperLogLog" class="headerlink" title="2.7HyperLogLog"></a>2.7HyperLogLog</h2><p>HyperLogLog 是 Redis 2.8.9 版本新增的数据类型，是一种用于「统计基数」的数据集合类型，基数统计就是指统计一个集合中不重复的元素个数。但要注意，HyperLogLog 是统计规则是基于概率完成的，不是非常准确，标准误算率是 0.81%。</p><p>所以，简单来说 HyperLogLog <strong>提供不精确的去重计数</strong>。</p><p>HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的内存空间总是固定的、并且是很小的。</p><p>在 Redis 里面，<strong>每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 <code>2^64</code> 个不同元素的基数</strong>，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</p><p>这什么概念？举个例子给大家对比一下。</p><p>用 Java 语言来说，一般 long 类型占用 8 字节，而 1 字节有 8 位，即：1 byte = 8 bit，即 long 数据类型最大可以表示的数是：<code>2^63-1</code>。对应上面的<code>2^64</code>个数，假设此时有<code>2^63-1</code>这么多个数，从 <code>0 ~ 2^63-1</code>，按照<code>long</code>以及<code>1k = 1024 字节</code>的规则来计算内存总数，就是：<code>((2^63-1) * 8/1024)K</code>，这是很庞大的一个数，存储空间远远超过<code>12K</code>，而 <code>HyperLogLog</code> 却可以用 <code>12K</code> 就能统计完。</p><h3 id="内部实现-5"><a href="#内部实现-5" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>HyperLogLog 的实现涉及到很多数学问题，太费脑子了，我也没有搞懂，如果你想了解一下，课下可以看看这个：<a href="https://en.wikipedia.org/wiki/HyperLogLog">HyperLogLog</a>。</p><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a><strong>常见命令</strong></h3><p>HyperLogLog 命令很少，就三个。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定元素到 HyperLogLog 中</span></span><br><span class="line">PFADD key element [element ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回给定 HyperLogLog 的基数估算值。</span></span><br><span class="line">PFCOUNT key [key ...]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将多个 HyperLogLog 合并为一个 HyperLogLog</span></span><br><span class="line">PFMERGE destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><h4 id="百万级网页-UV-计数"><a href="#百万级网页-UV-计数" class="headerlink" title="百万级网页 UV 计数"></a>百万级网页 UV 计数</h4><p>Redis HyperLogLog 优势在于只需要花费 12 KB 内存，就可以计算接近 2^64 个元素的基数，和元素越多就越耗费内存的 Set 和 Hash 类型相比，HyperLogLog 就非常节省空间。</p><p>所以，非常适合统计百万级以上的网页 UV 的场景。</p><p>在统计 UV 时，你可以用 PFADD 命令（用于向 HyperLogLog 中添加新元素）把访问页面的每个用户都添加到 HyperLogLog 中。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PFADD</span> page1:uv user1 user2 user3 user4 user5</span><br></pre></td></tr></table></figure><p>接下来，就可以用 PFCOUNT 命令直接获得 page1 的 UV 值了，这个命令的作用就是返回 HyperLogLog 的统计结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PFCOUNT page1:uv</span><br></pre></td></tr></table></figure><p>不过，有一点需要你注意一下，HyperLogLog 的统计规则是基于概率完成的，所以它给出的统计结果是有一定误差的，标准误算率是 0.81%。</p><p>这也就意味着，你使用 HyperLogLog 统计的 UV 是 100 万，但实际的 UV 可能是 101 万。虽然误差率不算大，但是，如果你需要精确统计结果的话，最好还是继续用 Set 或 Hash 类型。</p><h2 id="2-8Bitmap"><a href="#2-8Bitmap" class="headerlink" title="2.8Bitmap"></a>2.8Bitmap</h2><p>Bitmap，即位图，是一串连续的二进制数组（0和1），可以通过偏移量（offset）定位元素。BitMap通过最小的单位bit来进行<code>0|1</code>的设置，表示某个元素的值或者状态，时间复杂度为O(1)。</p><p>由于 bit 是计算机中最小的单位，使用它进行储存将非常节省空间，特别适合一些数据量大且使用<strong>二值统计的场景</strong>。</p><h3 id="内部实现-6"><a href="#内部实现-6" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>Bitmap 本身是用 String 类型作为底层数据结构实现的一种统计二值状态的数据类型。</p><p>String 类型是会保存为二进制的字节数组，所以，Redis 就把字节数组的每个 bit 位利用起来，用来表示一个元素的二值状态，你可以把 Bitmap 看作是一个 bit 数组。</p><h3 id="常用命令-6"><a href="#常用命令-6" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><p>bitmap 基本操作：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 设置值，其中<span class="selector-tag">value</span>只能是 <span class="selector-tag">0</span> 和 <span class="selector-tag">1</span></span><br><span class="line"><span class="selector-tag">SETBIT</span> <span class="selector-tag">key</span> <span class="selector-tag">offset</span> <span class="selector-tag">value</span></span><br><span class="line"></span><br><span class="line"># 获取值</span><br><span class="line"><span class="selector-tag">GETBIT</span> <span class="selector-tag">key</span> <span class="selector-tag">offset</span></span><br><span class="line"></span><br><span class="line"># 获取指定范围内值为 <span class="selector-tag">1</span> 的个数</span><br><span class="line"># <span class="selector-tag">start</span> 和 <span class="selector-tag">end</span> 以字节为单位</span><br><span class="line"><span class="selector-tag">BITCOUNT</span> <span class="selector-tag">key</span> <span class="selector-tag">start</span> <span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p>bitmap 运算操作：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># <span class="selector-tag">BitMap</span>间的运算</span><br><span class="line"># <span class="selector-tag">operations</span> 位移操作符，枚举值</span><br><span class="line">  <span class="selector-tag">AND</span> 与运算 <span class="selector-tag">&amp;</span></span><br><span class="line">  <span class="selector-tag">OR</span> 或运算 |</span><br><span class="line">  <span class="selector-tag">XOR</span> 异或 ^</span><br><span class="line">  <span class="selector-tag">NOT</span> 取反 ~</span><br><span class="line"># <span class="selector-tag">result</span> 计算的结果，会存储在该<span class="selector-tag">key</span>中</span><br><span class="line"># <span class="selector-tag">key1</span> … <span class="selector-tag">keyn</span> 参与运算的<span class="selector-tag">key</span>，可以有多个，空格分割，<span class="selector-tag">not</span>运算只能一个<span class="selector-tag">key</span></span><br><span class="line"># 当 <span class="selector-tag">BITOP</span> 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 <span class="selector-tag">0</span>。返回值是保存到 <span class="selector-tag">destkey</span> 的字符串的长度（以字节<span class="selector-tag">byte</span>为单位），和输入 <span class="selector-tag">key</span> 中最长的字符串长度相等。</span><br><span class="line"><span class="selector-tag">BITOP</span> <span class="selector-attr">[operations]</span> <span class="selector-attr">[result]</span> <span class="selector-attr">[key1]</span> <span class="selector-attr">[keyn…]</span></span><br><span class="line"></span><br><span class="line"># 返回指定<span class="selector-tag">key</span>中第一次出现指定<span class="selector-tag">value</span>(<span class="number">0</span>/<span class="number">1</span>)的位置</span><br><span class="line"><span class="selector-tag">BITPOS</span> <span class="selector-attr">[key]</span> <span class="selector-attr">[value]</span></span><br></pre></td></tr></table></figure><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><p>Bitmap 类型非常适合二值状态统计的场景，这里的二值状态就是指集合元素的取值就只有 0 和 1 两种，在记录海量数据时，Bitmap 能够有效地节省内存空间。</p><h4 id="签到统计"><a href="#签到统计" class="headerlink" title="签到统计"></a>签到统计</h4><p>在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态。</p><p>签到统计时，每个用户一天的签到用 1 个 bit 位就能表示，一个月（假设是 31 天）的签到情况用 31 个 bit 位就可以，而一年的签到也只需要用 365 个 bit 位，根本不用太复杂的集合类型。</p><p>假设我们要统计 ID 100 的用户在 2022 年 6 月份的签到情况，就可以按照下面的步骤进行操作。</p><p>第一步，执行下面的命令，记录该用户 6 月 3 号已签到。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT uid:<span class="built_in">sign</span>:<span class="number">100</span>:<span class="number">202206</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>第二步，检查该用户 6 月 3 日是否签到。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT uid:<span class="built_in">sign</span>:<span class="number">100</span>:<span class="number">202206</span> <span class="number">2</span> </span><br></pre></td></tr></table></figure><p>第三步，统计该用户在 6 月份的签到次数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITCOUNT uid:<span class="built_in">sign</span>:<span class="number">100</span>:<span class="number">202206</span></span><br></pre></td></tr></table></figure><p>这样，我们就知道该用户在 6 月份的签到情况了。</p><blockquote><p>如何统计这个月首次打卡时间呢？</p></blockquote><p>Redis 提供了 <code>BITPOS key bitValue [start] [end]</code>指令，返回数据表示 Bitmap 中第一个值为 <code>bitValue</code> 的 offset 位置。</p><p>在默认情况下， 命令将检测整个位图， 用户可以通过可选的 <code>start</code> 参数和 <code>end</code> 参数指定要检测的范围。所以我们可以通过执行这条命令来获取 userID = 100 在 2022 年 6 月份<strong>首次打卡</strong>日期：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BITPOS uid:<span class="built_in">sign</span>:<span class="number">100</span>:<span class="number">202206</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>需要注意的是，因为 offset 从 0 开始的，所以我们需要将返回的 value + 1 。</p><h4 id="判断用户登陆态"><a href="#判断用户登陆态" class="headerlink" title="判断用户登陆态"></a>判断用户登陆态</h4><p>Bitmap 提供了 <code>GETBIT、SETBIT</code> 操作，通过一个偏移值 offset 对 bit 数组的 offset 位置的 bit 位进行读写操作，需要注意的是 offset 从 0 开始。</p><p>只需要一个 key = login_status 表示存储用户登陆状态集合数据， 将用户 ID 作为 offset，在线就设置为 1，下线设置 0。通过 <code>GETBIT</code>判断对应的用户是否在线。 50000 万 用户只需要 6 MB 的空间。</p><p>假如我们要判断 ID = 10086 的用户的登陆情况：</p><p>第一步，执行以下指令，表示用户已登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT login_status 10086 1</span><br></pre></td></tr></table></figure><p>第二步，检查该用户是否登陆，返回值 1 表示已登录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GETBIT login_status 10086</span><br></pre></td></tr></table></figure><p>第三步，登出，将 offset 对应的 value 设置成 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETBIT login_status 10086 0</span><br></pre></td></tr></table></figure><h4 id="连续签到用户总数"><a href="#连续签到用户总数" class="headerlink" title="连续签到用户总数"></a>连续签到用户总数</h4><p>如何统计出这连续 7 天连续打卡用户总数呢？</p><p>我们把每天的日期作为 Bitmap 的 key，userId 作为 offset，若是打卡则将 offset 位置的 bit 设置成 1。</p><p>key 对应的集合的每个 bit 位的数据则是一个用户在该日期的打卡记录。</p><p>一共有 7 个这样的 Bitmap，如果我们能对这 7 个 Bitmap 的对应的 bit 位做 『与』运算。同样的 UserID offset 都是一样的，当一个 userID 在 7 个 Bitmap 对应对应的 offset 位置的 bit = 1 就说明该用户 7 天连续打卡。</p><p>结果保存到一个新 Bitmap 中，我们再通过 <code>BITCOUNT</code> 统计 bit = 1 的个数便得到了连续打卡 3 天的用户总数了。</p><p>Redis 提供了 <code>BITOP operation destkey key [key ...]</code>这个指令用于对一个或者多个 key 的 Bitmap 进行位元操作。</p><ul><li><code>opration</code> 可以是 <code>and</code>、<code>OR</code>、<code>NOT</code>、<code>XOR</code>。当 BITOP 处理不同长度的字符串时，较短的那个字符串所缺少的部分会被看作 <code>0</code> 。空的 <code>key</code> 也被看作是包含 <code>0</code> 的字符串序列。</li></ul><p>举个例子，比如将三个 bitmap 进行 AND 操作，并将结果保存到 destmap 中，接着对 destmap 执行 BITCOUNT 统计。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 与操作</span></span><br><span class="line"><span class="keyword">BITOP </span><span class="keyword">AND </span>destmap <span class="keyword">bitmap:01 </span><span class="keyword">bitmap:02 </span><span class="keyword">bitmap:03</span></span><br><span class="line"><span class="keyword"># </span>统计 <span class="keyword">bit </span>位 =  <span class="number">1</span> 的个数</span><br><span class="line"><span class="keyword">BITCOUNT </span>destmap</span><br></pre></td></tr></table></figure><p>即使一天产生一个亿的数据，Bitmap 占用的内存也不大，大约占 12 MB 的内存（10^8/8/1024/1024），7 天的 Bitmap 的内存开销约为 84 MB。同时我们最好给 Bitmap 设置过期时间，让 Redis 删除过期的打卡数据，节省内存。</p><h2 id="2-9Zset"><a href="#2-9Zset" class="headerlink" title="2.9Zset"></a>2.9Zset</h2><p>Zset 类型（有序集合类型）相比于 Set 类型多了一个排序属性 score（分值），对于有序集合 ZSet 来说，每个存储元素相当于有两个值组成的，一个是有序结合的元素值，一个是排序值。</p><p>有序集合保留了集合不能有重复成员的特性（分值可以重复），但不同的是，有序集合中的元素可以排序。</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/zset.png" alt="img"></p><h3 id="内部实现-7"><a href="#内部实现-7" class="headerlink" title="内部实现"></a><strong>内部实现</strong></h3><p>Zset 类型的底层数据结构是由<strong>压缩列表或跳表</strong>实现的：</p><ul><li>如果有序集合的元素个数小于 <code>128</code> 个，并且每个元素的值小于 <code>64</code> 字节时，Redis 会使用<strong>压缩列表</strong>作为 Zset 类型的底层数据结构；</li><li>如果有序集合的元素不满足上面的条件，Redis 会使用<strong>跳表</strong>作为 Zset 类型的底层数据结构；</li></ul><p><strong>在 Redis 7.0 中，压缩列表数据结构已经废弃了，交由 listpack 数据结构来实现了。</strong></p><h3 id="常用命令-7"><a href="#常用命令-7" class="headerlink" title="常用命令"></a><strong>常用命令</strong></h3><p>Zset 常用操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 往有序集合key中加入带分值元素</span></span><br><span class="line">ZADD key score member [[score member]...]   </span><br><span class="line"><span class="comment"># 往有序集合key中删除元素</span></span><br><span class="line">ZREM key member [member...]                 </span><br><span class="line"><span class="comment"># 返回有序集合key中元素member的分值</span></span><br><span class="line">ZSCORE key member</span><br><span class="line"><span class="comment"># 返回有序集合key中元素个数</span></span><br><span class="line">ZCARD key </span><br><span class="line"></span><br><span class="line"><span class="comment"># 为有序集合key中元素member的分值加上increment</span></span><br><span class="line">ZINCRBY key increment member </span><br><span class="line"></span><br><span class="line"><span class="comment"># 正序获取有序集合key从start下标到stop下标的元素</span></span><br><span class="line">ZRANGE key start stop [WITHSCORES]</span><br><span class="line"><span class="comment"># 倒序获取有序集合key从start下标到stop下标的元素</span></span><br><span class="line">ZREVRANGE key start stop [WITHSCORES]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回有序集合中指定分数区间内的成员，分数由低到高排序。</span></span><br><span class="line">ZRANGEBYSCORE key <span class="built_in">min</span> <span class="built_in">max</span> [WITHSCORES] [LIMIT offset count]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回指定成员区间内的成员，按字典正序排列, 分数必须相同。</span></span><br><span class="line">ZRANGEBYLEX key <span class="built_in">min</span> <span class="built_in">max</span> [LIMIT offset count]</span><br><span class="line"><span class="comment"># 返回指定成员区间内的成员，按字典倒序排列, 分数必须相同</span></span><br><span class="line">ZREVRANGEBYLEX key <span class="built_in">max</span> <span class="built_in">min</span> [LIMIT offset count]</span><br></pre></td></tr></table></figure><p>Zset 运算操作（相比于 Set 类型，ZSet 类型没有支持差集运算）：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 并集计算(相同元素分值相加)，numberkeys一共多少个<span class="keyword">key</span>，WEIGHTS每个<span class="keyword">key</span>对应的分值乘积</span><br><span class="line">ZUNIONSTORE destkey numberkeys <span class="keyword">key</span> [<span class="keyword">key</span>...] </span><br><span class="line"># 交集计算(相同元素分值相加)，numberkeys一共多少个<span class="keyword">key</span>，WEIGHTS每个<span class="keyword">key</span>对应的分值乘积</span><br><span class="line">ZINTERSTORE destkey numberkeys <span class="keyword">key</span> [<span class="keyword">key</span>...]</span><br></pre></td></tr></table></figure><h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a><strong>应用场景</strong></h3><p>Zset 类型（Sorted Set，有序集合） 可以根据元素的权重来排序，我们可以自己来决定每个元素的权重值。比如说，我们可以根据元素插入 Sorted Set 的时间确定权重值，先插入的元素权重小，后插入的元素权重大。</p><p>在面对需要展示最新列表、排行榜等场景时，如果数据更新频繁或者需要分页显示，可以优先考虑使用 Sorted Set。</p><h4 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h4><p>有序集合比较典型的使用场景就是排行榜。例如学生成绩的排名榜、游戏积分排行榜、视频播放排名、电商系统中商品的销量排名等。</p><p>我们以博文点赞排名为例，小林发表了五篇博文，分别获得赞为 200、40、100、50、150。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># arcticle:1 文章获得了200个赞</span></span><br><span class="line">&gt; ZADD user:xiaolin:ranking 200 arcticle:1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># arcticle:2 文章获得了40个赞</span></span><br><span class="line">&gt; ZADD user:xiaolin:ranking 40 arcticle:2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># arcticle:3 文章获得了100个赞</span></span><br><span class="line">&gt; ZADD user:xiaolin:ranking 100 arcticle:3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># arcticle:4 文章获得了50个赞</span></span><br><span class="line">&gt; ZADD user:xiaolin:ranking 50 arcticle:4</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"><span class="comment"># arcticle:5 文章获得了150个赞</span></span><br><span class="line">&gt; ZADD user:xiaolin:ranking 150 arcticle:5</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><p>文章 arcticle:4 新增一个赞，可以使用 ZINCRBY 命令（为有序集合key中元素member的分值加上increment）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> ZINCRBY <span class="keyword">user</span>:xiaolin:ranking <span class="number">1</span> arcticle:<span class="number">4</span></span><br><span class="line">&quot;51&quot;</span><br></pre></td></tr></table></figure><p>查看某篇文章的赞数，可以使用 ZSCORE 命令（返回有序集合key中元素个数）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> ZSCORE <span class="keyword">user</span>:xiaolin:ranking arcticle:<span class="number">4</span></span><br><span class="line">&quot;50&quot;</span><br></pre></td></tr></table></figure><p>获取小林文章赞数最多的 3 篇文章，可以使用 ZREVRANGE 命令（倒序获取有序集合 key 从start下标到stop下标的元素）：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># WITHSCORES 表示把 score 也显示出来</span></span><br><span class="line">&gt; ZREVRANGE <span class="keyword">user</span>:xiaolin:ranking <span class="number">0</span> <span class="number">2</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;arcticle:1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;200&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;arcticle:5&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;150&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;arcticle:3&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure><p>获取小林 100 赞到 200 赞的文章，可以使用 ZRANGEBYSCORE 命令（返回有序集合中指定分数区间内的成员，分数由低到高排序）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> ZRANGEBYSCORE <span class="keyword">user</span>:xiaolin:ranking <span class="number">100</span> <span class="number">200</span> WITHSCORES</span><br><span class="line"><span class="number">1</span>) &quot;arcticle:3&quot;</span><br><span class="line"><span class="number">2</span>) &quot;100&quot;</span><br><span class="line"><span class="number">3</span>) &quot;arcticle:5&quot;</span><br><span class="line"><span class="number">4</span>) &quot;150&quot;</span><br><span class="line"><span class="number">5</span>) &quot;arcticle:1&quot;</span><br><span class="line"><span class="number">6</span>) &quot;200&quot;</span><br></pre></td></tr></table></figure><h4 id="电话、姓名排序"><a href="#电话、姓名排序" class="headerlink" title="电话、姓名排序"></a>电话、姓名排序</h4><p>使用有序集合的 <code>ZRANGEBYLEX</code> 或 <code>ZREVRANGEBYLEX</code> 可以帮助我们实现电话号码或姓名的排序，我们以 <code>ZRANGEBYLEX</code> （返回指定成员区间内的成员，按 key 正序排列，分数必须相同）为例。</p><p><strong>注意：不要在分数不一致的 SortSet 集合中去使用 ZRANGEBYLEX和 ZREVRANGEBYLEX 指令，因为获取的结果会不准确。</strong></p><p><em>1、电话排序</em></p><p>我们可以将电话号码存储到 SortSet 中，然后根据需要来获取号段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZADD phone 0 13100111100 0 13110114300 0 13132110901 </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">&gt; ZADD phone 0 13200111100 0 13210414300 0 13252110901 </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">&gt; ZADD phone 0 13300111100 0 13310414300 0 13352110901 </span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure><p>获取所有号码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX phone - +</span><br><span class="line">1) <span class="string">&quot;13100111100&quot;</span></span><br><span class="line">2) <span class="string">&quot;13110114300&quot;</span></span><br><span class="line">3) <span class="string">&quot;13132110901&quot;</span></span><br><span class="line">4) <span class="string">&quot;13200111100&quot;</span></span><br><span class="line">5) <span class="string">&quot;13210414300&quot;</span></span><br><span class="line">6) <span class="string">&quot;13252110901&quot;</span></span><br><span class="line">7) <span class="string">&quot;13300111100&quot;</span></span><br><span class="line">8) <span class="string">&quot;13310414300&quot;</span></span><br><span class="line">9) <span class="string">&quot;13352110901&quot;</span></span><br></pre></td></tr></table></figure><p>获取 132 号段的号码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX phone [132 (133</span><br><span class="line">1) <span class="string">&quot;13200111100&quot;</span></span><br><span class="line">2) <span class="string">&quot;13210414300&quot;</span></span><br><span class="line">3) <span class="string">&quot;13252110901&quot;</span></span><br></pre></td></tr></table></figure><p>获取132、133号段的号码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX phone [132 (134</span><br><span class="line">1) <span class="string">&quot;13200111100&quot;</span></span><br><span class="line">2) <span class="string">&quot;13210414300&quot;</span></span><br><span class="line">3) <span class="string">&quot;13252110901&quot;</span></span><br><span class="line">4) <span class="string">&quot;13300111100&quot;</span></span><br><span class="line">5) <span class="string">&quot;13310414300&quot;</span></span><br><span class="line">6) <span class="string">&quot;13352110901&quot;</span></span><br></pre></td></tr></table></figure><p><em>2、姓名排序</em></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; zadd names <span class="number">0</span> Toumas <span class="number">0</span> <span class="keyword">Jake </span><span class="number">0</span> <span class="keyword">Bluetuo </span><span class="number">0</span> Gaodeng <span class="number">0</span> Aimini <span class="number">0</span> Aidehua </span><br><span class="line">(integer) <span class="number">6</span></span><br></pre></td></tr></table></figure><p>获取所有人的名字:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX names - +</span><br><span class="line">1) <span class="string">&quot;Aidehua&quot;</span></span><br><span class="line">2) <span class="string">&quot;Aimini&quot;</span></span><br><span class="line">3) <span class="string">&quot;Bluetuo&quot;</span></span><br><span class="line">4) <span class="string">&quot;Gaodeng&quot;</span></span><br><span class="line">5) <span class="string">&quot;Jake&quot;</span></span><br><span class="line">6) <span class="string">&quot;Toumas&quot;</span></span><br></pre></td></tr></table></figure><p>获取名字中大写字母A开头的所有人：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX names [A (B</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;Aidehua&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;Aimini&quot;</span></span><br></pre></td></tr></table></figure><p>获取名字中大写字母 C 到 Z 的所有人：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; ZRANGEBYLEX names [C [Z</span><br><span class="line">1) <span class="string">&quot;Gaodeng&quot;</span></span><br><span class="line">2) <span class="string">&quot;Jake&quot;</span></span><br><span class="line">3) <span class="string">&quot;Toumas&quot;</span></span><br></pre></td></tr></table></figure><h2 id="2-10-Stream"><a href="#2-10-Stream" class="headerlink" title="2.10 Stream"></a>2.10 Stream</h2><p> Redis 5.0 版本新增加的数据结构。</p><p>如下所示，它有一个消息链表，将所有加入的消息都串起来，每个消息都有一个唯一的 ID 和对应的内容：</p><p><img src="/images/img/blog/image-20220616175948239.png" alt="image-20220616175948239"></p><p>每个 Stream 都有唯一的名称，它就是 Redis 的 key，在我们首次使用 xadd 指令追加消息时自动创建。</p><ul><li>Consumer Group ：消费组，使用 XGROUP CREATE 命令创建，一个消费组有多个消费者(Consumer)。</li><li>last_delivered_id ：游标，每个消费组会有个游标 last_delivered_id，任意一个消费者读取了消息都会使游标 last_delivered_id 往前移动。</li><li>pending_ids ：消费者(Consumer)的状态变量，作用是维护消费者的未确认的 id。 pending_ids 记录了当前已经被客户端读取的消息，但是还没有 ack (Acknowledge character：确认字符）。</li></ul><h3 id="Redis-Stream-相关命令"><a href="#Redis-Stream-相关命令" class="headerlink" title="Redis Stream 相关命令"></a>Redis Stream 相关命令</h3><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><ul><li><code>xadd</code> ：添加消息到末尾</li><li><code>xtrim</code> ：对流进行修剪，限制长度</li><li><code>xdel</code> ：删除消息</li><li><code>xlen</code> ：获取流包含的元素数量，即消息长度</li><li><code>xrange</code> ：获取消息列表，会自动过滤已经删除的消息</li><li><code>xrevrange</code> ：反向获取消息列表，ID 从大到小</li><li><code>xread</code> ：以阻塞或非阻塞方式获取消息列表</li></ul><h4 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h4><ul><li><code>xgroup create</code> ：创建消费者组</li><li><code>xreadgroup group</code> ：读取消费者组中的消息</li><li><code>xack</code> ：将消息标记为”已处理”</li><li><code>xgroup setid</code> ：为消费者组设置新的最后递送消息ID</li><li><code>xgroup delconsumer</code> ：删除消费者</li><li><code>xgroup destroy</code> ：删除消费者组</li><li><code>xpending</code> ：显示待处理消息的相关信息</li><li><code>xclaim</code> ：转移消息的归属权</li><li><code>xinfo</code> ：查看流和消费者组的相关信息</li><li><code>xinfo groups</code> ：打印消费者组的信息</li><li><code>xinfo stream</code> ：打印流信息</li></ul><p>帮助命令</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; help xadd</span><br><span class="line"></span><br><span class="line">  XADD key ID field value [field value ...]</span><br><span class="line">  summary: Appends a new entry to a stream</span><br><span class="line">  since: 5.0.0</span><br><span class="line">  group: stream</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; help xgroup</span><br><span class="line"></span><br><span class="line">  XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]</span><br><span class="line">  summary: Create, destroy, and manage consumer groups.</span><br><span class="line">  since: 5.0.0</span><br><span class="line">  group: stream</span><br><span class="line"></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; xgroup help</span><br><span class="line"><span class="number">1</span>) XGROUP &lt;subcommand&gt; arg arg ... arg. Subcommands are:</span><br><span class="line"><span class="number">2</span>) CREATE      &lt;<span class="keyword">key</span>&gt; &lt;groupname&gt; &lt;id <span class="keyword">or</span> $&gt; [opt] -- Create a <span class="keyword">new</span> consumer group.</span><br><span class="line"><span class="number">3</span>)             <span class="keyword">option</span> MKSTREAM: create the empty stream <span class="keyword">if</span> it does <span class="keyword">not</span> exist.</span><br><span class="line"><span class="number">4</span>) SETID       &lt;<span class="keyword">key</span>&gt; &lt;groupname&gt; &lt;id <span class="keyword">or</span> $&gt;  -- Set the current group ID.</span><br><span class="line"><span class="number">5</span>) DESTROY     &lt;<span class="keyword">key</span>&gt; &lt;groupname&gt;            -- <span class="comment">Remove the specified group.</span></span><br><span class="line"><span class="number">6</span>) DELCONSUMER &lt;<span class="keyword">key</span>&gt; &lt;groupname&gt; &lt;consumer&gt; -- <span class="comment">Remove the specified consumer.</span></span><br><span class="line"><span class="number">7</span>) HELP                                     -- Prints this help.</span><br></pre></td></tr></table></figure><h3 id="Redis-Stream-命令解析"><a href="#Redis-Stream-命令解析" class="headerlink" title="Redis Stream 命令解析"></a>Redis Stream 命令解析</h3><h4 id="xadd-添加消息"><a href="#xadd-添加消息" class="headerlink" title="xadd 添加消息"></a>xadd 添加消息</h4><p>使用 <code>xadd</code> 向队列添加消息，如果指定的队列不存在，则创建一个队列。</p><p>语法格式： <code>XADD key ID field value [field value ...]</code> </p><ul><li>key：队列名称，如果不存在就创建</li><li>ID：消息 id，使用 * 表示由 redis 生成，可以自定义，但要自己保证唯一</li><li>field value：记录</li></ul><p>消息的全局唯一 ID 由两部分组成，第一部分“1619578295075”是数据插入时，以毫秒为单位计算的当前服务器时间，第二部分表示插入消息在当前毫秒内的消息序号，这是从 0 开始编号的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xadd mystream * name tingfeng</span><br><span class="line"><span class="string">&quot;1619578295075-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mystream * name balaili</span><br><span class="line"><span class="string">&quot;1619578304192-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mystream * f1 v1 f2 v2 f3 v3</span><br><span class="line"><span class="string">&quot;1619578307667-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xlen mystream</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; xrange mystream - +</span><br><span class="line">1) 1) <span class="string">&quot;1619578295075-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;tingfeng&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1619578304192-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;balaili&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;1619578307667-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;f1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;v1&quot;</span></span><br><span class="line">      3) <span class="string">&quot;f2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">      5) <span class="string">&quot;f3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h4 id="xtrim-修剪流"><a href="#xtrim-修剪流" class="headerlink" title="xtrim 修剪流"></a>xtrim 修剪流</h4><p>使用 <code>xtrim</code> 对流进行范围修剪（取尾部数据），限制长度。</p><p>语法格式： <code>XTRIM key MAXLEN [~] count</code> </p><ul><li>key：队列名称</li><li>MAXLEN：长度</li><li>count：数量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xtrim mystream maxlen 2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; xrange mystream - +</span><br><span class="line">1) 1) <span class="string">&quot;1619578304192-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;balaili&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1619578307667-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;f1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;v1&quot;</span></span><br><span class="line">      3) <span class="string">&quot;f2&quot;</span></span><br><span class="line">      4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">      5) <span class="string">&quot;f3&quot;</span></span><br><span class="line">      6) <span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure><h4 id="xlen-流长度"><a href="#xlen-流长度" class="headerlink" title="xlen 流长度"></a>xlen 流长度</h4><p>使用 <code>xlen</code> 获取流包含的元素数量，即消息长度。</p><p>语法格式： <code>XLEN key</code> </p><ul><li>key：队列名称</li></ul><h4 id="xdel-删除消息"><a href="#xdel-删除消息" class="headerlink" title="xdel 删除消息"></a>xdel 删除消息</h4><p>使用 <code>xdel</code> 删除消息</p><p>语法格式： <code>XDEL key ID [ID ...]</code> </p><ul><li>key：队列名称</li><li>ID：消息 ID</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xadd mydemo * a 1</span><br><span class="line"><span class="string">&quot;1619579142062-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * b 2</span><br><span class="line"><span class="string">&quot;1619579145385-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * c 3 d 4 e 5</span><br><span class="line"><span class="string">&quot;1619579158816-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xlen mydemo</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; xdel mydemo 1619579145385-0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; xrange mydemo - +</span><br><span class="line">1) 1) <span class="string">&quot;1619579142062-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;a&quot;</span></span><br><span class="line">      2) <span class="string">&quot;1&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1619579158816-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;c&quot;</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span></span><br><span class="line">      3) <span class="string">&quot;d&quot;</span></span><br><span class="line">      4) <span class="string">&quot;4&quot;</span></span><br><span class="line">      5) <span class="string">&quot;e&quot;</span></span><br><span class="line">      6) <span class="string">&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del mydemo <span class="comment"># 删除key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="xrange-消息列表"><a href="#xrange-消息列表" class="headerlink" title="xrange 消息列表"></a>xrange 消息列表</h4><p>使用 <code>xrange</code> 获取消息列表，会自动过滤已经删除的消息。</p><p>语法格式： <code>XRANGE key start end [COUNT count]</code> </p><ul><li>key：队列名</li><li>start：开始值， <code>-</code> 表示最小值</li><li>end：结束值， <code>+</code> 表示最大值</li><li>count：数量（取头部数据）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xadd mydemo * name aaa</span><br><span class="line"><span class="string">&quot;1619579326631-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name bbb</span><br><span class="line"><span class="string">&quot;1619579328639-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name ccc</span><br><span class="line"><span class="string">&quot;1619579330732-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name ddd</span><br><span class="line"><span class="string">&quot;1619579333019-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name eee</span><br><span class="line"><span class="string">&quot;1619579335736-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xlen mydemo</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; xrange mydemo - + count 2</span><br><span class="line">1) 1) <span class="string">&quot;1619579326631-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1619579328639-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; del mydemo <span class="comment"># 删除key</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="xrevrange-消息列表"><a href="#xrevrange-消息列表" class="headerlink" title="xrevrange 消息列表"></a>xrevrange 消息列表</h4><p>使用 <code>xrevrange</code> 获取消息列表，会自动过滤已经删除的消息。<br>语法格式： <code>XREVRANGE key end start [COUNT count]</code> </p><ul><li>key：队列名</li><li>end：结束值，<code>+</code> 表示最大值</li><li>start：开始值，<code>-</code> 表示最小值</li><li>count：数量</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xadd mydemo * name aaa</span><br><span class="line"><span class="string">&quot;1619579822470-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name bbb</span><br><span class="line"><span class="string">&quot;1619579825203-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name ccc</span><br><span class="line"><span class="string">&quot;1619579827369-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xlen mydemo</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; xrevrange mydemo + -</span><br><span class="line">1) 1) <span class="string">&quot;1619579827369-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;ccc&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;1619579825203-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;bbb&quot;</span></span><br><span class="line">3) 1) <span class="string">&quot;1619579822470-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xrevrange mydemo + - count 1</span><br><span class="line">1) 1) <span class="string">&quot;1619579827369-0&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">      2) <span class="string">&quot;ccc&quot;</span></span><br></pre></td></tr></table></figure><h4 id="xread-消息列表"><a href="#xread-消息列表" class="headerlink" title="xread 消息列表"></a>xread 消息列表</h4><p>使用 <code>xread</code> 以阻塞或非阻塞方式获取消息列表。</p><p>语法格式： <code>XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id [id ...]</code> </p><ul><li><code>count</code> ：数量</li><li><code>milliseconds</code> / <code>block</code> ：阻塞毫秒数，没有设置就是非阻塞模式，取到一个结果就退出。</li><li><code>key</code> ：队列名</li><li><code>id</code> ：消息 ID</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建两个流</span></span><br><span class="line">127.0.0.1:6379&gt; xadd demo1 * name aaa</span><br><span class="line"><span class="string">&quot;1619580212875-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd demo1 * name bbb</span><br><span class="line"><span class="string">&quot;1619580215254-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd demo2 * name ccc</span><br><span class="line"><span class="string">&quot;1619580226876-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd demo2 * name ddd</span><br><span class="line"><span class="string">&quot;1619580230966-0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取所有</span></span><br><span class="line"><span class="comment"># 0-0 从头消费</span></span><br><span class="line">127.0.0.1:6379&gt; xread streams demo1 0-0</span><br><span class="line">1) 1) <span class="string">&quot;demo1&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619580212875-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">      2) 1) <span class="string">&quot;1619580215254-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;bbb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取1个头部消息</span></span><br><span class="line">127.0.0.1:6379&gt; xread count 1 streams demo1 0-0</span><br><span class="line">1) 1) <span class="string">&quot;demo1&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619580212875-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取两个key的头部消息</span></span><br><span class="line">127.0.0.1:6379&gt; xread count 1 streams demo1 demo2 0-0 0-0</span><br><span class="line">1) 1) <span class="string">&quot;demo1&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619580212875-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;demo2&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619580226876-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;ccc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阻塞30秒监听demo3消息，有一个结果就退出</span></span><br><span class="line"><span class="comment"># $ 表示最新消息</span></span><br><span class="line">127.0.0.1:6379&gt; xread block 30000 streams demo3 $</span><br><span class="line">1) 1) <span class="string">&quot;demo3&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619580596131-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;ttt&quot;</span></span><br><span class="line">(1.84s)</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>命令最后的“ <code>$</code> ”符号表示读取最新的消息，同时，我们设置了 block 30000 的配置项，单位是毫秒，表明在读取最新消息时，如果没有消息到来，将阻塞30000 毫秒（即 30 秒），然后再返回。</p><h4 id="xgroup-create-创建消费者组"><a href="#xgroup-create-创建消费者组" class="headerlink" title="xgroup create 创建消费者组"></a>xgroup create 创建消费者组</h4><p>Streams 本身可以使用 xgroup 创建消费组，创建消费组之后，Streams 可以使用 xreadgroup 命令让消费组内的消费者读取消息。</p><p>使用 <code>xgroup create</code> 创建消费者组。</p><p>语法格式： <code>XGROUP [CREATE key groupname id-or-$] [SETID key groupname id-or-$] [DESTROY key groupname] [DELCONSUMER key groupname consumername]</code> </p><ul><li>key：队列名称，如果不存在就创建</li><li>groupname：组名。</li><li>$：从尾部开始消费，只接受新消息，当前 Stream 消息会全部忽略。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从头开始消费</span></span><br><span class="line">xgroup create mystream consumer-group-name 0-0  </span><br><span class="line"></span><br><span class="line"><span class="comment">#从尾部开始消费</span></span><br><span class="line">xgroup create mystream consumer-group-name $</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xadd mydemo * name aaa</span><br><span class="line"><span class="string">&quot;1619581865830-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name bbb</span><br><span class="line"><span class="string">&quot;1619581868367-0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; xadd mydemo * name ccc</span><br><span class="line"><span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 group1 消费组，消费 mydemo 队列消息</span></span><br><span class="line">127.0.0.1:6379&gt; xgroup create mydemo group1 0</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment"># 让 group1 消费组里的消费者 consumer1 从 mydemo 中读取所有消息</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group group1 consumer1 streams mydemo &gt;</span><br><span class="line">1) 1) <span class="string">&quot;mydemo&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619581865830-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">      2) 1) <span class="string">&quot;1619581868367-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;bbb&quot;</span></span><br><span class="line">      3) 1) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;ccc&quot;</span></span><br></pre></td></tr></table></figure><p>命令最后的参数“ <code>&gt;</code> ”，表示从第一条尚未被消费的消息开始读取。因为在 consumer1 读取消息前，group1 中没有其他消费者读取过消息，所以 consumer1 就得到 mydemo 消息队列中的所有消息了（消息队列中的消息一旦被消费组里的一个消费者读取了，就不能再被该消费组内的其他消费者读取了）。</p><h4 id="xreadgroup-group-读取消费者组消息"><a href="#xreadgroup-group-读取消费者组消息" class="headerlink" title="xreadgroup group 读取消费者组消息"></a>xreadgroup group 读取消费者组消息</h4><p>使用 <code>xreadgroup group</code> 读取消费组中的消息。</p><p>语法格式： <code>XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]</code> </p><ul><li>group：消费组名</li><li>consumer：消费者名</li><li>count：读取数量</li><li>milliseconds / block：阻塞毫秒数</li><li>key：队列名</li><li>ID：消息 ID</li></ul><p>使用消费组的目的是让组内的多个消费者共同分担读取消息，所以，我们通常会让每个消费者读取部分消息，从而实现消息读取负载在多个消费者间是均衡分布的。</p><p>例如，我们执行下列命令，让 group2 中的 consumer1、2、3 各自读取一条消息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP group group2 consumer1 count 1 streams mqstream &gt;</span><br><span class="line">1) 1) <span class="string">&quot;mqstream&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1599203861727-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;repo&quot;</span></span><br><span class="line">            2) <span class="string">&quot;5&quot;</span></span><br><span class="line"></span><br><span class="line">XREADGROUP group group2 consumer2 count 1 streams mqstream &gt;</span><br><span class="line">1) 1) <span class="string">&quot;mqstream&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1599274912765-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;repo&quot;</span></span><br><span class="line">            2) <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line">XREADGROUP group group2 consumer3 count 1 streams mqstream &gt;</span><br><span class="line">1) 1) <span class="string">&quot;mqstream&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1599274925823-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;repo&quot;</span></span><br><span class="line">            2) <span class="string">&quot;2&quot;</span></span><br></pre></td></tr></table></figure><p>为了保证消费者在发生故障或宕机再次重启后，仍然可以读取未处理完的消息，Streams 会自动使用内部队列（也称为 PENDING List）留存消费组里每个消费者读取的消息，直到消费者使用 <code>xack</code> 命令通知 Streams“消息已经处理完成”。如果消费者没有成功处理消息，它就不会给 Streams 发送 <code>xack</code> 命令，消息仍然会留存。此时，消费者可以在重启后，用 <code>xpending</code> 命令查看已读取、但尚未确认处理完成的消息。</p><h4 id="xpending-待处理消息信息"><a href="#xpending-待处理消息信息" class="headerlink" title="xpending 待处理消息信息"></a>xpending 待处理消息信息</h4><p><code>xpending</code> 命令是检查待处理消息列表的接口，用于观察和了解消费者组正在发生的事情：哪些客户端是活跃的，哪些消息在等待消费，或者查看是否有空闲的消息。</p><p>此命令与 <code>xclaim</code> 一起使用，用于实现长时间故障的消费者的恢复。</p><p>语法格式： <code>xpendign key groupName [start end count] [consumerName]</code> </p><p>xpending是一个只读的命令，会输出指定group中所有处于pending message中的消息总个数、开始ID、结束ID、每个consumer中pending message中消息的个数。可以通过指定开始结束id和consumerName来获取更加详细的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xpending mydemo group1</span><br><span class="line">1) (<span class="built_in">integer</span>) 3</span><br><span class="line">2) <span class="string">&quot;1619581865830-0&quot;</span>  <span class="comment"># 消息开始ID</span></span><br><span class="line">3) <span class="string">&quot;1619581870373-0&quot;</span>  <span class="comment"># 消息结束ID</span></span><br><span class="line">4) 1) 1) <span class="string">&quot;consumer1&quot;</span>  <span class="comment"># 消费者</span></span><br><span class="line">      2) <span class="string">&quot;3&quot;</span>                  <span class="comment"># 消费数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制消息数量</span></span><br><span class="line">127.0.0.1:6379&gt; xpending mydemo group1 - + 3</span><br><span class="line">1) 1) <span class="string">&quot;1619581865830-0&quot;</span>       <span class="comment"># 消息id</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span>                 <span class="comment"># 消费者</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12258065    <span class="comment"># 自上次将此消息传递给该消费者以来，经过的毫秒数</span></span><br><span class="line">   4) (<span class="built_in">integer</span>) 1                   <span class="comment"># 读取的次数</span></span><br><span class="line">2) 1) <span class="string">&quot;1619581868367-0&quot;</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12258065</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">3) 1) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12258065</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制指定消费者消息数量</span></span><br><span class="line">127.0.0.1:6379&gt; xpending mydemo group1 - + 2 consumer1</span><br><span class="line">1) 1) <span class="string">&quot;1619581865830-0&quot;</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12352110</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) 1) <span class="string">&quot;1619581868367-0&quot;</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">   3) (<span class="built_in">integer</span>) 12352110</span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="11、xack-消息标记"><a href="#11、xack-消息标记" class="headerlink" title="11、xack 消息标记"></a>11、xack 消息标记</h4><p>消息标记确认</p><p>使用 <code>xack</code> 命令通知 Streams，然后这条消息就会被删除。当我们再使用 <code>xpending</code> 命令查看时，就可以看到，consumer1 已经没有已读取、但尚未确认处理的消息了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让 group1 消费组里的消费者 consumer1 从 mydemo 中读取所有消息</span></span><br><span class="line">127.0.0.1:6379&gt; xreadgroup group group1 consumer1 streams mydemo &gt;</span><br><span class="line">1) 1) <span class="string">&quot;mydemo&quot;</span></span><br><span class="line">   2) 1) 1) <span class="string">&quot;1619581865830-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">      2) 1) <span class="string">&quot;1619581868367-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;bbb&quot;</span></span><br><span class="line">      3) 1) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">         2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">            2) <span class="string">&quot;ccc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ack 确认</span></span><br><span class="line">127.0.0.1:6379&gt; xack mydemo group1 1619581868367-0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; xack mydemo group1 1619581865830-0</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; xpending mydemo group1</span><br><span class="line">1) (<span class="built_in">integer</span>) 1</span><br><span class="line">2) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">3) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">4) 1) 1) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">      2) <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure><h4 id="xgroup-setid-消费者组设置新的最后递送消息ID"><a href="#xgroup-setid-消费者组设置新的最后递送消息ID" class="headerlink" title="xgroup setid 消费者组设置新的最后递送消息ID"></a>xgroup setid 消费者组设置新的最后递送消息ID</h4><p>使用 <code>setid</code> 子命令设置要传递的下一条消息。 通常情况，在消费者创建时设置下一个ID，作为 <code>xgroup create</code> 最后一个参数。 但是使用这种形式，可以在以后修改下一个ID，而无需再次删除和创建使用者组。</p><p>例如，如果你希望消费者组中的消费者重新处理流中的所有消息，你可能希望将其下一个ID设置为0。</p><h4 id="xgroup-delconsumer-删除消费者"><a href="#xgroup-delconsumer-删除消费者" class="headerlink" title="xgroup delconsumer 删除消费者"></a>xgroup delconsumer 删除消费者</h4><p>从消费者组中移除给定的消费者，使用以下命令格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xgroup delconsumer mydemo group1 consumer1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="xgroup-destroy-删除消费者组"><a href="#xgroup-destroy-删除消费者组" class="headerlink" title="xgroup destroy 删除消费者组"></a>xgroup destroy 删除消费者组</h4><p>即使存在活动的消费者和待处理消息，消费者组也将被销毁，因此请确保仅在真正需要时才调用此命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xgroup destroy mydemo group1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure><h4 id="xclaim-转移消息归属权"><a href="#xclaim-转移消息归属权" class="headerlink" title="xclaim 转移消息归属权"></a>xclaim 转移消息归属权</h4><p>语法格式： <code>xclaim key groupName comsumer minIdleTime id [id ...] [IDLE ms] [TIME msUnixTime] [RETRYCOUNT count] [force] [justid]</code> </p><h4 id="xinfo-流和消费者组信息"><a href="#xinfo-流和消费者组信息" class="headerlink" title="xinfo 流和消费者组信息"></a>xinfo 流和消费者组信息</h4><p>检索关于流和关联的消费者组的不同的信息。</p><p>语法格式： <code>XINFO STREAM &lt;key&gt;</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xinfo stream mydemo</span><br><span class="line"> 1) <span class="string">&quot;length&quot;</span>  </span><br><span class="line">2) (<span class="built_in">integer</span>) 3          <span class="comment"># 流元素的数量</span></span><br><span class="line"> 3) <span class="string">&quot;radix-tree-keys&quot;</span></span><br><span class="line"> 4) (<span class="built_in">integer</span>) 1</span><br><span class="line"> 5) <span class="string">&quot;radix-tree-nodes&quot;</span></span><br><span class="line"> 6) (<span class="built_in">integer</span>) 2</span><br><span class="line"> 7) <span class="string">&quot;last-generated-id&quot;</span></span><br><span class="line">8) <span class="string">&quot;1619581870373-0&quot;</span>  <span class="comment"># 最后消息ID</span></span><br><span class="line"> 9) <span class="string">&quot;groups&quot;</span></span><br><span class="line">10) (<span class="built_in">integer</span>) 1             <span class="comment"># 消费者组数量</span></span><br><span class="line">11) <span class="string">&quot;first-entry&quot;</span>             <span class="comment"># 第一个消息</span></span><br><span class="line">12) 1) <span class="string">&quot;1619581865830-0&quot;</span></span><br><span class="line">    2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">       2) <span class="string">&quot;aaa&quot;</span></span><br><span class="line">13) <span class="string">&quot;last-entry&quot;</span>              <span class="comment"># 最后一个消息</span></span><br><span class="line">14) 1) <span class="string">&quot;1619581870373-0&quot;</span></span><br><span class="line">    2) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">       2) <span class="string">&quot;ccc&quot;</span></span><br></pre></td></tr></table></figure><h4 id="xinfo-groups-消费者组的信息"><a href="#xinfo-groups-消费者组的信息" class="headerlink" title="xinfo groups 消费者组的信息"></a>xinfo groups 消费者组的信息</h4><p>只获得与流关联的所有消费者组的输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xinfo groups mydemo</span><br><span class="line">1) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">   2) <span class="string">&quot;group1&quot;</span></span><br><span class="line">   3) <span class="string">&quot;consumers&quot;</span></span><br><span class="line">   4) (<span class="built_in">integer</span>) 1</span><br><span class="line">   5) <span class="string">&quot;pending&quot;</span></span><br><span class="line">   6) (<span class="built_in">integer</span>) 3</span><br><span class="line">   7) <span class="string">&quot;last-delivered-id&quot;</span></span><br><span class="line">   8) <span class="string">&quot;1619581870373-0&quot;</span></span><br></pre></td></tr></table></figure><h4 id="xinfo-stream-流信息"><a href="#xinfo-stream-流信息" class="headerlink" title="xinfo stream 流信息"></a>xinfo stream 流信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; xinfo consumers mydemo group1</span><br><span class="line">1) 1) <span class="string">&quot;name&quot;</span></span><br><span class="line">   2) <span class="string">&quot;consumer1&quot;</span></span><br><span class="line">   3) <span class="string">&quot;pending&quot;</span></span><br><span class="line">   4) (<span class="built_in">integer</span>) 3</span><br><span class="line">   5) <span class="string">&quot;idle&quot;</span></span><br><span class="line">   6) (<span class="built_in">integer</span>) 417812</span><br></pre></td></tr></table></figure><h3 id="2-11总结"><a href="#2-11总结" class="headerlink" title="2.11总结"></a>2.11总结</h3><p>Redis 五种数据类型的应用场景：</p><ul><li>String 类型的应用场景：缓存对象、常规计数、分布式锁、共享session信息等。</li><li>List 类型的应用场景：消息队列（有两个问题：1. 生产者需要自行实现全局唯一 ID；2. 不能以消费组形式消费数据）等。</li><li>Hash 类型：缓存对象、购物车等。</li><li>Set 类型：聚合计算（并集、交集、差集）场景，比如点赞、共同关注、抽奖活动等。</li><li>Zset 类型：排序场景，比如排行榜、电话和姓名排序等。</li></ul><p>Redis 后续版本又支持四种数据类型，它们的应用场景如下：</p><ul><li>BitMap（2.2 版新增）：二值状态统计的场景，比如签到、判断用户登陆状态、连续签到用户总数等；</li><li>HyperLogLog（2.8 版新增）：海量数据基数统计的场景，比如百万级网页 UV 计数等；</li><li>GEO（3.2 版新增）：存储地理位置信息的场景，比如滴滴叫车；</li><li>Stream（5.0 版新增）：消息队列，相比于基于 List 类型实现的消息队列，有这两个特有的特性：自动生成全局唯一消息ID，支持以消费组形式消费数据。</li></ul><h1 id="3-通用指令"><a href="#3-通用指令" class="headerlink" title="3.通用指令"></a>3.通用指令</h1><h2 id="3-1key通用指令"><a href="#3-1key通用指令" class="headerlink" title="3.1key通用指令"></a>3.1key通用指令</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">del</span> <span class="selector-tag">key</span>      删除指定<span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">exists</span> <span class="selector-tag">key</span>   获取<span class="selector-tag">key</span>是否存在</span><br><span class="line"><span class="selector-tag">type</span> <span class="selector-tag">key</span>     获取<span class="selector-tag">key</span>的类型</span><br><span class="line"></span><br><span class="line">扩展操作（时效性控制）</span><br><span class="line">为指定<span class="selector-tag">key</span>设置有效期</span><br><span class="line"><span class="selector-tag">expire</span> <span class="selector-tag">key</span> <span class="selector-tag">seconds</span></span><br><span class="line"><span class="selector-tag">pexpire</span> <span class="selector-tag">key</span> <span class="selector-tag">milliseconds</span></span><br><span class="line"><span class="selector-tag">expireat</span> <span class="selector-tag">key</span> <span class="selector-tag">timestamp</span></span><br><span class="line"><span class="selector-tag">pexpireat</span> <span class="selector-tag">key</span> <span class="selector-tag">milliseconds-timestamp</span></span><br><span class="line"></span><br><span class="line">获取<span class="selector-tag">key</span>的有效时间</span><br><span class="line"><span class="selector-tag">ttl</span> <span class="selector-tag">key</span></span><br><span class="line"><span class="selector-tag">pttl</span> <span class="selector-tag">key</span></span><br><span class="line"></span><br><span class="line">切换<span class="selector-tag">key</span>从时效性转换为永久性</span><br><span class="line"><span class="selector-tag">persist</span> <span class="selector-tag">key</span></span><br><span class="line"></span><br><span class="line">查询模式</span><br><span class="line"><span class="selector-tag">keys</span> <span class="selector-tag">pattern</span></span><br><span class="line">查询模式规则：* 匹配任意数量的任意符号 ? 配合一个任意符号 <span class="selector-attr">[]</span> 匹配一个指定符号</span><br><span class="line"></span><br><span class="line">其他操作</span><br><span class="line">为<span class="selector-tag">key</span>改名</span><br><span class="line"><span class="selector-tag">rename</span> <span class="selector-tag">key</span> <span class="selector-tag">newkey</span></span><br><span class="line"><span class="selector-tag">renamenx</span> <span class="selector-tag">key</span> <span class="selector-tag">newkey</span></span><br><span class="line"></span><br><span class="line">对所有<span class="selector-tag">key</span>排序</span><br><span class="line"><span class="selector-tag">sort</span></span><br><span class="line"></span><br><span class="line">其他<span class="selector-tag">key</span>通用操作</span><br><span class="line"><span class="selector-tag">help</span> @<span class="selector-tag">generic</span></span><br></pre></td></tr></table></figure><h2 id="3-2数据库通用指令"><a href="#3-2数据库通用指令" class="headerlink" title="3.2数据库通用指令"></a>3.2数据库通用指令</h2><p>为了防止redis使用过程中，数据量急剧增加产生重复和冲突，redis为每个服务创建16个数据库，编号从0到15且数据库之间的数据相互独立。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">select</span> <span class="selector-tag">index</span>  切换数据库</span><br><span class="line"><span class="selector-tag">quit</span></span><br><span class="line"><span class="selector-tag">ping</span></span><br><span class="line"><span class="selector-tag">echo</span> <span class="selector-tag">message</span>   其他操作</span><br><span class="line"><span class="selector-tag">move</span> <span class="selector-tag">key</span> <span class="selector-tag">db</span>    数据移动</span><br><span class="line"><span class="selector-tag">dbsize</span></span><br><span class="line"><span class="selector-tag">flushdb</span></span><br><span class="line"><span class="selector-tag">flushall</span>       数据清除</span><br></pre></td></tr></table></figure><h1 id="4-redis持久化"><a href="#4-redis持久化" class="headerlink" title="4.redis持久化"></a>4.redis持久化</h1><p>持久化：利用永久性存储介质将数据进行保存，在特定的时间将保存的数据进行恢复的工作机制称为持久化。</p><p>redis持久化技术有RDB持久化和AOF持久化</p><h2 id="4-1RDB持久化"><a href="#4-1RDB持久化" class="headerlink" title="4.1RDB持久化"></a>4.1RDB持久化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">RDB启动方式——save指令</span><br><span class="line"></span><br><span class="line">save   手动执行一次保存操作</span><br><span class="line">save 900 1</span><br><span class="line">说明： 当 900 秒内有至少有 1 个键被改动时，自动进行数据集保存操作</span><br><span class="line">save 300 10</span><br><span class="line">说明： 当 300 秒内有至少有 10 个键被改动时，自动进行数据集保存操作</span><br><span class="line">save 60 10000</span><br><span class="line">说明： 当 60 秒内有至少有 10000 个键被改动时，自动进行数据集保存操作</span><br><span class="line"></span><br><span class="line">save指令相关配置</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">说明：后台存储过程中如果出现错误现象，是否停止保存操作</span><br><span class="line">经验：通常默认为开启状态</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">说明：设置本地数据库文件名，默认值为 dump.rdb</span><br><span class="line">经验：通常设置为dump-端口号.rdb</span><br><span class="line">dir /var/lib/redis</span><br><span class="line">说明：设置存储.rdb文件的路径</span><br><span class="line">经验：通常设置成存储空间较大的目录中，目录名称data</span><br><span class="line">rdbcompression yes</span><br><span class="line">说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩</span><br><span class="line">经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</span><br><span class="line">rdbchecksum yes</span><br><span class="line">说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行</span><br><span class="line">经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。</strong>（单线程任务执行序列）</p><p>bgsave指令工作原理</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/20200502185440745.png" alt="在这里插入图片描述"></p><p>注意： bgsave命令是针对save阻塞问题做的优化。Redis内部所有涉及到RDB操作都采用bgsave的方式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RDB自动启动--save</span><br><span class="line">save second changes    满足限定时间范围内key的变化数量达到指定数量即进行持久化</span><br><span class="line">second：监控时间范围     changes：监控key的变化量</span><br><span class="line">在conf文件中进行配置</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RDB特殊启动方式--全量复制</span><br><span class="line">debug reload       服务器运行过程中重启</span><br><span class="line">shutdown save      关闭服务器时指定保存数据</span><br></pre></td></tr></table></figure><p><strong>注意：默认情况下执行shutdown命令时，自动执行 bgsave(如果没有开启AOF持久化功能)</strong></p><p>RDB优点：</p><ul><li> RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul><p>RDB缺点：</p><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h2 id="4-2AOP持久化"><a href="#4-2AOP持久化" class="headerlink" title="4.2AOP持久化"></a>4.2AOP持久化</h2><p>AOF持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令 达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程。（相比RDB，解决了数据持久化的实时性）。</p><p><strong>AOF写数据的三种策略：always(每次，数据零误差，性能较低)，everysec(每秒，准确率较高，性能较高，推荐使用也是默认配置)，no(系统控制，由操作系统控制同步到AOF文件的周期，不可控)。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">配置:appendonly yes|no</span><br><span class="line">作用:是否开启AOF持久化功能，默认为不开启状态</span><br><span class="line">配置AOF写数据的三种策略: appendfsync always|everysec|no</span><br><span class="line"></span><br><span class="line"># appendfsync always   &#x2F;&#x2F; 每收到写命令就立即强制写入磁盘，最慢的，但是保证完全的持久化，不推荐使用</span><br><span class="line"></span><br><span class="line">appendfsync everysec   &#x2F;&#x2F; 每秒强制写入磁盘一次，性能和持久化方面做了折中，只会丢失一秒钟的数据，推荐</span><br><span class="line">    </span><br><span class="line"># appendfsync no       &#x2F;&#x2F; 从不进行写入，更不安全的选择</span><br><span class="line"></span><br><span class="line">配置:appendfilename filename</span><br><span class="line">作用:AOF持久化文件名，默认文件名未appendonly.aof，建议配置为appendonly-端口号.aof</span><br><span class="line"></span><br><span class="line">配置:dir</span><br><span class="line">作用:AOF持久化文件保存路径，与RDB持久化文件保持一致即可</span><br></pre></td></tr></table></figure><p>AOF重写：随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。（简单说就是将对同一个数据的若干个条命令执行结 果转化成最终结果数据对应的指令进行记录）</p><p>AOF重写规则：</p><ul><li> 进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令</li><li>对同一数据的多条写命令合并为一条命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AOF重写方式</span><br><span class="line">手动重写:bgrewriteaof</span><br><span class="line">自动重写:auto-aof-rewrite-min-size size</span><br><span class="line">           auto-aof-rewrite-percentage percentage</span><br><span class="line">           </span><br><span class="line">AOF自动重写方式</span><br><span class="line">自动重写触发条件设置</span><br><span class="line">auto-aof-rewrite-min-size size</span><br><span class="line">auto-aof-rewrite-percentage percent</span><br><span class="line"></span><br><span class="line">自动重写触发比对参数（ 运行指令info Persistence获取具体信息 ）</span><br><span class="line">aof_current_size</span><br><span class="line">aof_base_size</span><br><span class="line"></span><br><span class="line">自动重写触发条件</span><br><span class="line">aof_current_size &gt; auto-aof-rewrite-min-size</span><br><span class="line">aof_current_size - aof_base_size &gt;&#x3D; auto-aof-rewrite-percentage * aof_base_size</span><br></pre></td></tr></table></figure><h2 id="4-3混合持久化"><a href="#4-3混合持久化" class="headerlink" title="4.3混合持久化"></a>4.3混合持久化</h2><p>　　重启 Redis 时，我们很少使用 RDB来恢复内存状态，因为会丢失大量数据。我们通常使用 AOF 日志重放，但是重放 AOF 日志性能相对 RDB来说要慢很多，这样在 Redis 实例很大的情况下，启动需要花费很长的时间。 Redis 4.0 为了解决这个问题，带来了一个新的持久化选项——混合持久化。集成了 RDB 和 AOF 的优点</p><p>　　通过如下配置可以开启混合持久化(<strong>必须先开启aof</strong>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof‐use‐rdb‐preamble yes  &#x2F;&#x2F; 开启混合持久化，必须先开启AOF</span><br></pre></td></tr></table></figure><p>　　如果开启了混合持久化，AOF在重写时，不再是单纯将内存数据转换为RESP命令写入AOF文件，而是将重写这一刻之前的内存做RDB快照处理，并且将RDB快照内容和增量的AOF修改内存数据的命令存在一起，都写入新的AOF文件，新的文件一开始不叫appendonly.aof，等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换。于是在 Redis 重启的时候，可以先加载 RDB 的内容，然后再重放增量 AOF 日志就可以完全替代之前的AOF 全量文件重放，因此重启效率大幅得到提升。</p><p>　　混合持久化AOF文件结构如下：</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/image-20220617093438692.png" alt="image-20220617093438692"></p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/1087394-20220301161931027-1274941271.png" alt="img"></p><p> <strong>Redis数据备份策略：</strong></p><p>　　1. 写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48小时的备份<br>　　2. 每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份<br>　　3. 每次copy备份的时候，都把太旧的备份给删了<br>　　4. 每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏</p><h1 id="5-redis事务"><a href="#5-redis事务" class="headerlink" title="5.redis事务"></a>5.redis事务</h1><h2 id="5-1事务基本操作"><a href="#5-1事务基本操作" class="headerlink" title="5.1事务基本操作"></a>5.1事务基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">事务的基本操作</span><br><span class="line">multi    开启事务（开始位置）</span><br><span class="line">exec     执行事务（结束位置）</span><br><span class="line">discard  取消事务（开始与结束之间）</span><br></pre></td></tr></table></figure><p>注意：①如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。②已经执行完毕的命令对应的数据不会自动回滚，需要程序员自己在代码中实现回滚。</p><h2 id="5-2锁"><a href="#5-2锁" class="headerlink" title="5.2锁"></a>5.2锁</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">watch key1 [key2……]    对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行</span><br><span class="line">unwatch                取消对所有 key 的监视</span><br></pre></td></tr></table></figure><h2 id="5-3基于特定事务执行——分布式锁"><a href="#5-3基于特定事务执行——分布式锁" class="headerlink" title="5.3基于特定事务执行——分布式锁"></a>5.3基于特定事务执行——分布式锁</h2><p>例如超卖场景：天猫双11热卖过程中，对已经售罄的货物追加补货，且补货完成。客户购买热情高涨，3秒内将所有商品购买完毕。本次补货已经将库存全部清空，如何避免最后一件商品不被多人同时购买？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决方案</span><br><span class="line">setnx lock-key value   使用 setnx 设置一个公共锁</span><br><span class="line">利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</span><br><span class="line">对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</span><br><span class="line">对于返回设置失败的，不具有控制权，排队或等待</span><br><span class="line">操作完毕通过del操作释放锁</span><br></pre></td></tr></table></figure><p>特定事务2场景：依赖分布式锁的机制，某个用户操作时对应客户端宕机，且此时已经获取到锁。如何解决？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用 expire 为锁key添加时间限定，到时不释放，放弃锁</span><br><span class="line">expire lock-key second</span><br><span class="line">pexpire lock-key milliseconds</span><br></pre></td></tr></table></figure><h1 id="6-redis删除策略"><a href="#6-redis删除策略" class="headerlink" title="6.redis删除策略"></a>6.redis删除策略</h1><h2 id="6-1数据删除策略"><a href="#6-1数据删除策略" class="headerlink" title="6.1数据删除策略"></a>6.1数据删除策略</h2><p>数据删除策略的目标：在内存占用与CPU占用之间寻找一种平衡，顾此失彼都会造成整体redis性能的下降，甚至引发服务器宕机或 内存泄露。</p><h2 id="1-定时删除"><a href="#1-定时删除" class="headerlink" title="1.定时删除"></a>1.定时删除</h2><ul><li>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作</li><li>优点：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li><li>总结：用处理器性能换取存储空间（拿时间换空间）</li></ul><h2 id="2-惰性删除"><a href="#2-惰性删除" class="headerlink" title="2.惰性删除"></a>2.惰性删除</h2><ul><li>数据到达过期时间，不做处理。等下次访问该数据时：1. 如果未过期，返回数据。2. 发现已过期，删除，返回不存在。</li><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li><li>总结：用存储空间换取处理器性能（拿空间换时间）</li></ul><h2 id="3-定期删除（随机抽查，重点抽查）"><a href="#3-定期删除（随机抽查，重点抽查）" class="headerlink" title="3.定期删除（随机抽查，重点抽查）"></a>3.定期删除（随机抽查，重点抽查）</h2><p>定时删除和惰性删除的折中方案</p><ul><li><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p></li><li><p>每秒钟执行server.hz次serverCron()  –&gt;  databasesCron()  –&gt;  activeExpireCycle()</p></li><li><p>activeExpireCycle()对每个expires[*]逐一进行检测，每次执行250ms/server.hz</p></li><li><p>对某个expires[*]检测时，随机挑选W个key检测：</p><ul><li> 如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程</li><li>如果一轮中删除的key的数量≤W<em>25%，检查下一个expires[</em>]，0-15循环</li><li>W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值</li></ul></li><li><p> 参数current_db用于记录activeExpireCycle() 进入哪个expires[*] 执行</p></li><li><p>如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行                               </p></li></ul><h2 id="6-2逐出算法"><a href="#6-2逐出算法" class="headerlink" title="6.2逐出算法"></a>6.2逐出算法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">逐出算法的相关配置</span><br><span class="line">maxmemory      最大可使用内存（生产环境一般设置为50%）</span><br><span class="line">maxmemory-samples    每次选取待删除数据的个数（选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。）</span><br><span class="line">maxmemory-policy     删除策略（达到最大内存后的，对被挑选出来的数据进行删除的策略）</span><br></pre></td></tr></table></figure><p>逐出算法：</p><ul><li><p>检测易失数据（可能会过期的数据集server.db[i].expires ）</p><ul><li>volatile-lru：挑选最近最少使用的数据淘汰</li><li>volatile-lfu：挑选最近使用次数最少的数据淘汰</li><li>volatile-ttl：挑选将要过期的数据淘汰</li><li>volatile-random：任意选择数据淘汰</li></ul></li><li><p> 检测全库数据（所有数据集server.db[i].dict ）</p></li><li><p>allkeys-lru：挑选最近最少使用的数据淘汰</p></li><li><p>allkeys-lfu：挑选最近使用次数最少的数据淘汰</p></li><li><p> allkeys-random：任意选择数据淘汰</p></li><li><p>放弃数据驱逐</p><ul><li>no-enviction（驱逐）：禁止驱逐数据（redis4.0中默认策略），会引发错误OOM（Out Of Memory）</li></ul></li></ul><h1 id="7-redis核心配置"><a href="#7-redis核心配置" class="headerlink" title="7.redis核心配置"></a>7.redis核心配置</h1><p>服务端设定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes|no   设置服务器以守护进程的方式运行</span><br><span class="line">bind 127.0.0.1     绑定主机地址</span><br><span class="line">port 6379          设置服务器端口号</span><br><span class="line">databases 16       设置数据库数量</span><br><span class="line"></span><br><span class="line">日志配置</span><br><span class="line">loglevel debug|verbose|notice|warning    设置服务器以指定日志记录级别</span><br><span class="line">logfile 端口号.log    日志记录文件名</span><br><span class="line"></span><br><span class="line">多服务器快捷配置</span><br><span class="line">include &#x2F;path&#x2F;server-端口号.conf   导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护</span><br></pre></td></tr></table></figure><p>注意：日志级别开发期设置为verbose即可，生产环境中配置为notice，简化日志输出量，降低写日志IO的频度。</p><p>客户端配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">maxclients 0       设置同一时间最大客户端连接数，默认无限制。当客户端连接到达上限，Redis会关闭新的连接</span><br><span class="line">timeout 300        客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭该功能，设置为 0</span><br></pre></td></tr></table></figure><h1 id="8-高级数据类型"><a href="#8-高级数据类型" class="headerlink" title="8.高级数据类型"></a>8.高级数据类型</h1><h2 id="8-1Bitmaps"><a href="#8-1Bitmaps" class="headerlink" title="8.1Bitmaps"></a>8.1Bitmaps</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">基础操作</span><br><span class="line">getbit key offset        获取指定key对应偏移量上的bit值</span><br><span class="line">setbit key offset value  设置指定key对应偏移量上的bit值，value只能是1或0</span><br><span class="line"></span><br><span class="line">扩展操作</span><br><span class="line">bitop op destKey key1 [key2...]   对指定key按位进行交、并、非、异或操作，并将结果保存到destKey中</span><br><span class="line">bitcount key [start end]          统计指定key中1的数量</span><br></pre></td></tr></table></figure><p>业务场景：应用于信息状态统计</p><p>电影网站</p><ul><li>统计每天某一部电影是否被点播</li><li>统计每天有多少部电影被点播</li><li>统计每周/月/年有多少部电影被点播</li><li>统计年度哪部电影没有被点播</li></ul><h2 id="8-2HyperLogLog"><a href="#8-2HyperLogLog" class="headerlink" title="8.2HyperLogLog"></a>8.2HyperLogLog</h2><p>基数： 基数是数据集去重后元素个数</p><p>HyperLogLog 是用来做<strong>基数</strong>统计的，运用了LogLog的算法</p><p>eg：{1, 3, 5, 7, 5, 7, 8}    基数集： {1, 3, 5 ,7, 8}    基数：5</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pfadd key element [element ...]             添加数据</span><br><span class="line">pfcount key [key ...]                       统计数据</span><br><span class="line">pfmerge destkey sourcekey [sourcekey...]    合并数据</span><br></pre></td></tr></table></figure><p>业务场景：应用于独立信息的统计</p><p>注意：</p><ul><li> 用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据</li><li>核心是基数估算算法，最终数值存在一定误差</li><li>误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值</li><li>消耗空间极小，每个hyperloglog key占用了12K的内存用于标记基数</li><li>pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大</li><li>Pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量多少</li></ul><h2 id="8-3GEO"><a href="#8-3GEO" class="headerlink" title="8.3GEO"></a>8.3GEO</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基本操作</span><br><span class="line">geoadd key longitude latitude member [longitude latitude member ...]    添加坐标点</span><br><span class="line">geopos key member [member ...]                                          获取坐标点</span><br><span class="line">geodist key member1 member2 [unit]                                      计算坐标点距离</span><br><span class="line"></span><br><span class="line">georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]  添加坐标点</span><br><span class="line">georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]      获取坐标点</span><br><span class="line">geohash key member [member ...]     计算经纬度</span><br></pre></td></tr></table></figure><h1 id="9-主从复制"><a href="#9-主从复制" class="headerlink" title="9.主从复制"></a>9.主从复制</h1><p>目的：为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续 提供服务，<strong>实现Redis的高可用</strong>，同时实现数据冗余备份。</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/197e2c59c438ede485bd9989d8e33e9d.png" alt="image-20210531151105863"></p><h2 id="9-1-单机redis的风险与问题"><a href="#9-1-单机redis的风险与问题" class="headerlink" title="9.1.单机redis的风险与问题"></a>9.1.单机redis的风险与问题</h2><p>问题1：机器故障<br>    现象：硬盘故障、系统崩溃<br>    本质：数据丢失，很可能对业务造成灾难性打击<br>    结论：基本上会放弃使用redis<br>问题2：容量瓶颈<br>    现象：内存不足，从16G升级到64G，从64G升级到128G，无限升级内存<br>    本质：穷，硬件条件跟不上<br>    结论：放弃使用redis<br>结论： 为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续 提供服务，实现Redis的高可用，同时实现数据冗余备份。</p><h2 id="9-2-多台服务器连接方案"><a href="#9-2-多台服务器连接方案" class="headerlink" title="9.2.多台服务器连接方案"></a>9.2.多台服务器连接方案</h2><ul><li><p>提供数据方：master</p><pre><code>主服务器，主节点，主库（主客户端）</code></pre></li><li><p>接收数据方：slave</p><pre><code>从服务器，从节点，从库（从客户端）</code></pre></li><li><p>需要解决的问题： 数据同步</p></li><li><p>核心工作： master的数据复制到slave中</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/1920a90c9788fed6355bbe5ce91c8d94.png" alt="image-20210531151942161"></p></li></ul><p>其中，为了避免数据产生大大小小的问题，我们需要对多台服务器的连接方案进行一些规定限制</p><p>主从复制即将master中的数据即时、有效的复制到slave中</p><p>特征：一个master可以拥有多个slave，一个slave只对应一个master</p><p>职责：</p><ul><li><p>master:</p><pre><code>写数据执行写操作时，将出现变化的数据自动同步到slave读数据（可忽略）</code></pre></li><li><p>slave:</p><pre><code>读数据写数据（禁止）</code></pre></li></ul><h2 id="9-3-高可用集群"><a href="#9-3-高可用集群" class="headerlink" title="9.3.高可用集群"></a>9.3.高可用集群</h2><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/291889f858f8fc2bad4c784d0f1ad6bf.png" alt="image-20210531152453098"></p><h3 id="主从复制的作用"><a href="#主从复制的作用" class="headerlink" title="主从复制的作用"></a>主从复制的作用</h3><ul><li>读写分离：master写、slave读，提高服务器的读写负载能力</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>总述：大致上分为三个步骤</p><p>建立连接阶段（即准备阶段）<br>数据同步阶段<br>命令传播阶段</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/4c43d58dc1998052e4674d976d5b10b0.png" alt="image-20210531153020881"></p><h4 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h4><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/3b18785535cca2c5164cda6a4025fb3a.png" alt="image-20210531153652475"></p><p>步骤1：设置master的地址和端口，保存master信息<br>步骤2：建立socket连接<br>步骤3：发送ping命令（定时器任务）<br>步骤4：身份验证<br>步骤5：发送slave端口信息 至此，主从连接成功！<br>状态：<br>slave： 保存master的地址与端口<br>master： 保存slave的端口<br>总体： 之间创建了连接的socket</p><h4 id="阶段一、主从连接（slave连接master）"><a href="#阶段一、主从连接（slave连接master）" class="headerlink" title="阶段一、主从连接（slave连接master）"></a>阶段一、主从连接（slave连接master）</h4><p>方式一：客户端发送命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>方式二：启动服务器参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>方式三：服务器配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>slave系统信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master_link_down_since_seconds</span><br><span class="line">masterhost</span><br><span class="line">masterport </span><br></pre></td></tr></table></figure><p>master系统信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slave_listening_port(多个)</span><br></pre></td></tr></table></figure><p>现在的启动方式一般不直接在从服务器上敲连接主服务器的命令，而是直接在从服务器的配置文件中添加对应的连接配置信息redis-6380.conf</p><p>关闭守护进程、关闭日志文件的输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/99208f9242d7ced9e3c18cbbe139352c.png" alt="image-20210531155505870"></p><p>连接成功之后，可以在服务器的启动页面看到对应的连接master的相关信息</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/8092bc718a2df0879e7f15b5af1bd964.png" alt="image-20210531155735351"></p><p>这样就简单完成了主从服务器的搭建，根据业务的建议逻辑，我们只在master中写入数据，而在slave中读取数据，这样可以有效地避免数据的同步的一些问题。</p><p>这样配置，就可以完成上述的操作了</p><p>在服务器端输入info指令，可以看到关于连接的一些信息</p><p>其他配置</p><p>客户端发送命令</p><p><code>slaveof no one</code></p><p>说明： slave断开连接后，不会删除已有数据，只是不再接受master发送的数据</p><p>因为主服务器上可能存在多个连接，所以断开连接只能是在从服务器这一侧断开，也就是在从服务器的客户端发送断开指令，由主服务器接受指令之后，执行断开操作</p><p>授权访问</p><p>master客户端发送命令设置密码</p><p><code>config get requirepass  requirepass</code></p><p>master配置文件设置密码</p><p><code>config set requirepass</code></p><p>slave客户端发送命令设置密码</p><p><code>auth &lt;password&gt;</code></p><p>slave配置文件设置密码</p><p><code>masterauth &lt;password&gt;</code></p><p>slave启动服务器设置密码</p><p><code>redis-server –a &lt;password&gt;</code></p><h4 id="阶段二、数据同步阶段（master和slave数据同步）"><a href="#阶段二、数据同步阶段（master和slave数据同步）" class="headerlink" title="阶段二、数据同步阶段（master和slave数据同步）"></a>阶段二、数据同步阶段（master和slave数据同步）</h4><p>数据同步的过程目的分析</p><ul><li>在slave初次连接master后，复制master中的所有数据到slave</li><li>将slave的数据库状态更新成master当前的数据库状态</li></ul><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/7d27ee2e0e873e5d5317c223bc3a11aa.png" alt="image-20210531161531762"></p><p>数据同步整个过程为上图的1-8条，分为全量复制和部分复制（增量复制）</p><p>全量复制，主要复制的是master中从开始到连接状态完成之间的数据部分；这一部分主要使用的是RDB的形式恢复数据。</p><p>增量复制，主要复制的是全量复制过程中master可能产生的新数据，这些数据一般数据量不是非常大，主要利用AOF形式进行数据备份和恢复，这样更符合现实情况。这一阶段产生的新数据放在复制缓冲区内。</p><ul><li><p>步骤1：请求同步数据</p></li><li><p>步骤2：创建RDB同步数据</p></li><li><p>步骤3：恢复RDB同步数据</p></li><li><p>步骤4：请求部分同步数据</p></li><li><p>步骤5：恢复部分同步数据<br>至此，数据同步工作完成！</p></li><li><p>状态：</p><ul><li>slave： 具有master端全部数据，包含RDB过程接收的数据</li><li>master： 保存slave当前数据同步的位置</li></ul></li><li><p>总体： 之间完成了数据克隆</p></li></ul><h5 id="注意事项（master说明）"><a href="#注意事项（master说明）" class="headerlink" title="注意事项（master说明）"></a>注意事项（master说明）</h5><ol><li><p>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</p></li><li><p>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。</p></li></ol><p><code>repl-backlog-size 1mb</code></p><p>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执 行bgsave命令和创建复制缓冲区</p><p>这里涉及到的问题主要是复制缓冲区的内存大小，设置不合理要么导致全量复制阶段产生的新数据部分丢失（后产生的数据溢出就会挤掉最先产生的数据），要么导致还速度下降（复制缓冲区内存过大，导致分配给其他部分的内存太小，影响IO性能）</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/65a94f35719900c82edfa7efee302888.png" alt="image-20210531162933595"></p><h5 id="注意事项（slave后期）"><a href="#注意事项（slave后期）" class="headerlink" title="注意事项（slave后期）"></a>注意事项（slave后期）</h5><ol><li><p>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务、</p><p><code>slave-serve-stale-data yes|no</code></p></li><li><p>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</p></li><li><p>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果 master带宽不足，因此数据同步需要根据业务需求，适量错峰</p></li><li><p>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是 slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟 较大，数据一致性变差，应谨慎选择</p></li></ol><p>这里的问题主要是：根据设计原理，关闭slave的对外写数据服务；slave数量过多时候如何处理slave的数据复制问题。</p><h4 id="阶段三：命令传播阶段"><a href="#阶段三：命令传播阶段" class="headerlink" title="阶段三：命令传播阶段"></a>阶段三：命令传播阶段</h4><p>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的 状态，同步的动作称为命令传播</p><p>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</p><p>主从复制过程大体可以分为3个阶段</p><ol><li><p>建立连接阶段（即准备阶段）</p></li><li><p>数据同步阶段</p></li><li><p>命令传播阶段</p></li></ol><h5 id="命令传播阶段的部分复制"><a href="#命令传播阶段的部分复制" class="headerlink" title="命令传播阶段的部分复制"></a>命令传播阶段的部分复制</h5><p>命令传播阶段出现了断网现象</p><ol><li>网络闪断闪连 忽略</li><li>短时间网络中断 部分复制</li><li>长时间网络中断 全量复制</li></ol><p>部分复制的三个核心要素</p><ol><li><p>服务器的运行 id（run id）</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/7a578d4798b24da753478fd1ae19d122.png" alt="image-20210531163605924"></p></li><li><p>主服务器的复制积压缓冲区</p></li><li><p>主从服务器的复制偏移量</p></li></ol><h5 id="服务器运行ID（runid）"><a href="#服务器运行ID（runid）" class="headerlink" title="服务器运行ID（runid）"></a>服务器运行ID（runid）</h5><ul><li>概念：服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id</li><li>组成：运行id由40位字符组成，是一个随机的十六进制字符；例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce</li><li>作用：运行id被用于在服务器间进行传输，识别身份 如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别</li><li>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid</li></ul><h5 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h5><ul><li>概念：复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区<br>复制缓冲区默认数据存储空间大小是1M，由于存储空间大小是固定的，当入队元素的数量大于队列长度时，最先入队的元素会被弹出，而新元素会被放入队列</li><li>由来：每台服务器启动时，如果开启有AOF或被连接成为master节点，即创建复制缓冲区</li><li>作用：用于保存master收到的所有指令（仅影响数据变更的指令，例如set，select）</li><li>数据来源：当master接收到主客户端的指令时，除了将指令执行，会将该指令存储到缓冲区中</li></ul><p>内部工作原理：</p><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/51eb156981ab136d7fa9df43f954389f.png" alt="image-20210531164646455"></p><h5 id="主从服务器复制偏移量（offset）"><a href="#主从服务器复制偏移量（offset）" class="headerlink" title="主从服务器复制偏移量（offset）"></a>主从服务器复制偏移量（offset）</h5><ul><li>概念：一个数字，描述复制缓冲区中的指令字节位置</li><li>分类：<pre><code>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</code></pre></li><li>数据来源：<pre><code>master端：发送一次记录一次slave端：接收一次记录一次</code></pre></li><li>作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</li></ul><h5 id="数据同步-命令传播阶段工作流程"><a href="#数据同步-命令传播阶段工作流程" class="headerlink" title="数据同步+命令传播阶段工作流程"></a>数据同步+命令传播阶段工作流程</h5><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/54f6cad86aab6e25fe622bc2fc794f4e.png" alt="image-20210531165411947"></p><h5 id="心跳机制"><a href="#心跳机制" class="headerlink" title="心跳机制"></a>心跳机制</h5><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线</p><p>master心跳：<br>    指令：PING<br>    周期：由repl-ping-slave-period决定，默认10秒<br>    作用：判断slave是否在线<br>    查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常<br>slave心跳任务<br>    指令：REPLCONF ACK {offset}<br>    周期：1秒<br>    作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令<br>    作用2：判断master是否在线</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><ul><li>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 2</span><br><span class="line">min-slaves-max-lag 8</span><br></pre></td></tr></table></figure><ul><li><p>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</p></li><li><p>slave数量由slave发送REPLCONF ACK命令做确认</p></li><li><p>slave延迟由slave发送REPLCONF ACK命令做确认</p></li></ul><h5 id="主从复制工作流程"><a href="#主从复制工作流程" class="headerlink" title="主从复制工作流程"></a>主从复制工作流程</h5><p><img src="https://gitee.com/wyl1924/cdn/raw/master/img/blog/b590f9dfbf30a2d6e12908e11d6e759c.png" alt="image-20210531170127664"></p><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><h5 id="频繁的全量复制（1）"><a href="#频繁的全量复制（1）" class="headerlink" title="频繁的全量复制（1）"></a>频繁的全量复制（1）</h5><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</p><ul><li><p>内部优化调整方案：</p><pre><code>    master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave</code></pre></li><li><p>在master关闭时执行命令 shutdown save，进行RDB持久化，将runid与offset保存到RDB文件中</p><pre><code>1.repl-id repl-offset</code></pre><p>​    2.通过redis-check-rdb命令可以查看该信息</p></li><li><p>master重启后加载RDB文件，恢复数据重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中</p><pre><code>1.master_repl_id = repl master_repl_offset = repl-offset</code></pre><p>​    2.通过info命令可以查看该信息</p></li></ul><p>作用： 本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</p><h5 id="频繁的全量复制（2）"><a href="#频繁的全量复制（2）" class="headerlink" title="频繁的全量复制（2）"></a>频繁的全量复制（2）</h5><p>问题现象：网络环境不佳，出现网络中断，slave不提供服务</p><p>问题原因：复制缓冲区过小，断网后slave的offset越界，触发全量复制</p><p>最终结果：slave反复进行全量复制</p><p>解决方案：修改复制缓冲区大小</p><p><code>repl-backlog-size</code></p><p>建议设置如下：</p><ol><li>测算从master到slave的重连平均时长second</li><li>获取master平均每秒产生写命令数据总量write_size_per_second</li><li>最优复制缓冲区空间 = 2 * second * write_size_per_second</li></ol><h5 id="频繁的网络中断（1）"><a href="#频繁的网络中断（1）" class="headerlink" title="频繁的网络中断（1）"></a>频繁的网络中断（1）</h5><p>问题现象：master的CPU占用过高 或 slave频繁断开连接</p><p>问题原因：</p><ul><li>slave每1秒发送REPLCONF ACK命令到master</li><li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li></ul><p>最终结果：master各种资源（输出缓冲区、带宽、连接等）被严重占用</p><p>解决方案：通过设置合理的超时时间，确认是否释放slave 该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</p><h5 id="频繁的网络中断（2）"><a href="#频繁的网络中断（2）" class="headerlink" title="频繁的网络中断（2）"></a>频繁的网络中断（2）</h5><p>问题现象：slave与master连接断开</p><p>问题原因：</p><ul><li>master发送ping指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul><p>解决方案：</p><p>​    提高ping指令发送的频度</p><p>```repl-ping-slave-period``</p><p>超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时</p><h5 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h5><p>问题现象：多个slave获取相同数据不同步</p><p>问题原因：网络信息不同步，数据发送有延迟</p><p>解决方案：</p><p>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象</p><p>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问</p><p><code>slave-serve-stale-data yes|no</code><br>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</p><h1 id="10-哨兵模式"><a href="#10-哨兵模式" class="headerlink" title="10.哨兵模式"></a>10.哨兵模式</h1><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的 master并将所有slave连接到新的master。</p><p>哨兵的作用：</p><ul><li><p>监控     不断的检查master和slave是否正常运行。 master存活检测、master与slave运行情况检测。</p></li><li><p>通知（提醒）  当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</p></li><li><p>自动故障转移    断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址。</p><p>哨兵也是一台redis服务器，只是不提供数据服务。通常哨兵配置数量为单数</p></li></ul><h1 id="11-cluster"><a href="#11-cluster" class="headerlink" title="11.cluster"></a>11.cluster</h1><p>集群：集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果。</p><p>集群作用：</p><ul><li>分散单台服务器的访问压力，实现负载均衡。</li><li>分散单台服务器的存储压力，实现可扩展性。</li><li>降低单台服务器宕机带来的业务灾难。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cluster配置</span><br><span class="line">cluster-enabled yes|no               添加节点</span><br><span class="line">cluster-config-file &lt;filename&gt;       cluster配置文件名，该文件属于自动生成，仅用于快速查找文件并查询文件内容</span><br><span class="line">cluster-node-timeout &lt;milliseconds&gt;  节点服务响应超时时间，用于判定该节点是否下线或切换为从节点</span><br><span class="line">cluster-migration-barrier &lt;count&gt;    master连接的slave最小数量</span><br><span class="line"></span><br><span class="line">cluster节点操作</span><br><span class="line">cluster nodes                        查看集群节点信息</span><br><span class="line">cluster replicate &lt;master-id&gt;        进入一个从节点 redis，切换其主节点</span><br><span class="line">cluster meet ip:port                 发现一个新节点，新增主节点</span><br><span class="line">cluster forget &lt;id&gt;                  忽略一个没有solt的节点</span><br><span class="line">cluster failover                     手动故障转移</span><br><span class="line"></span><br><span class="line">redis-trib命令</span><br><span class="line">redis-trib.rb add-node               添加节点</span><br><span class="line">redis-trib.rb del-node               删除节点</span><br><span class="line">redis-trib.rb reshard                重新分片</span><br></pre></td></tr></table></figure><h1 id="12企业级解决方案"><a href="#12企业级解决方案" class="headerlink" title="12企业级解决方案"></a>12企业级解决方案</h1><h2 id="1-缓存预热"><a href="#1-缓存预热" class="headerlink" title="1.缓存预热"></a>1.缓存预热</h2><p>问题排查：</p><ol><li>请求数量较高</li><li>主从之间数据吞吐量较大，数据同步操作频度较高</li></ol><p>解决方案：</p><ul><li><p>前置准备工作：</p><ul><li>日常例行统计数据访问记录，统计访问频度较高的热点数据。</li><li>利用LRU数据删除策略，构建数据留存队列。   例如：storm与kafka配合</li></ul></li><li><p>准备工作：</p><ul><li>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</li><li>利用分布式多服务器同时进行数据读取，提速数据加载过程</li><li>热点数据主从同时预热</li></ul></li><li><p>实施：</p><ul><li>使用脚本程序固定触发数据预热过程。</li><li>如果条件允许，使用了CDN（内容分发网络），效果会更好</li></ul></li><li><p>总结：</p><ul><li>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</li></ul></li></ul><h2 id="2-缓存雪崩"><a href="#2-缓存雪崩" class="headerlink" title="2.缓存雪崩"></a>2.缓存雪崩</h2><p>问题排查：</p><ol><li> <strong>在一个较短的时间内，缓存中较多的key集中过期</strong></li><li> 数据库同时接收到大量的请求无法及时处理</li><li> Redis服务器资源被严重占用，Redis服务器崩溃</li></ol><p>解决方案：</p><ul><li><p>思路</p><ul><li><p>更多的页面静态化处理</p></li><li><p>构建多级缓存架构     Nginx缓存+redis缓存+ehcache缓存</p></li><li><p>检测Mysql严重耗时业务进行优化     对数据库的瓶颈排查：例如超时查询、耗时较高事务等</p></li><li><p>灾难预警机制：监控redis服务器性能指标</p><ul><li>CPU占用、CPU使用率</li><li>内存容量</li><li>查询平均响应时间</li><li>线程数</li></ul></li><li><p>限流、降级    短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</p></li></ul></li><li><p>方法</p><ul><li><p>LRU与LFU切换</p></li><li><p>数据有效期策略调整</p><ul><li>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</li><li>过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</li></ul></li><li><p> 超热数据使用永久key</p></li><li><p>定期维护（自动+人工） 对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</p></li><li><p>加锁（慎用）</p></li></ul></li><li><p>总结：缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现 （约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p></li></ul><h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><ul><li><p>问题排查：</p><ul><li>Redis中某个key过期，该key访问量巨大</li><li>多个数据请求从服务器直接压到Redis后，均未命中</li><li>Redis在短时间内发起了大量对数据库中同一数据的访问</li></ul></li><li><p>问题分析</p><ul><li>单个key高热数据</li><li> key过期</li></ul></li><li><p>解决方案</p><ul><li><p>预先设定</p><p>以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长。   注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</p></li><li><p>现场调整     监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</p></li><li><p>后台刷新数据     启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</p></li><li><p>二级缓存     设置不同的失效时间，保障不会被同时淘汰就行</p></li><li><p>加锁      分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</p></li></ul></li><li><p>总结：缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度 较高，配合雪崩处理策略即可。</p></li></ul><h2 id="4-缓存穿透"><a href="#4-缓存穿透" class="headerlink" title="4.缓存穿透"></a>4.缓存穿透</h2><ul><li><p>问题排查：</p><ul><li>Redis中大面积出现未命中</li><li> 出现非正常URL访问</li></ul></li><li><p>问题分析：</p><ul><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li><li> Redis获取到null数据未进行持久化，直接返回</li><li> 下次此类数据到达重复上述过程</li><li>出现黑客攻击服务器</li></ul></li><li><p>解决方案：</p><ul><li><p>缓存null     对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</p></li><li><p>白名单策略：</p><ul><li>提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）</li><li>使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li></ul></li><li><p>实施监控     实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比</p><ul><li>非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</li><li>活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象 根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li></ul></li><li><p>key加密     问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验。例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问</p></li><li><p>总结：缓存击穿访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。 无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双机热备 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux拉取部署git上的项目到docker</title>
      <link href="2022/03/25/Linux/linux%E6%8B%89%E5%8F%96%E9%83%A8%E7%BD%B2git%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%88%B0docker/"/>
      <url>2022/03/25/Linux/linux%E6%8B%89%E5%8F%96%E9%83%A8%E7%BD%B2git%E4%B8%8A%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%88%B0docker/</url>
      
        <content type="html"><![CDATA[<h1 id="shell-命令"><a href="#shell-命令" class="headerlink" title="shell 命令"></a>shell 命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ban=$(date +%s)</span><br><span class="line">aim_path=~/app/project/AIM</span><br><span class="line">web_path=~/app/project/WEB</span><br><span class="line"></span><br><span class="line">logError()&#123;</span><br><span class="line">  echo -e &quot;\033[31;1m$1\033[0m&quot;</span><br><span class="line">  exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logInfo()&#123;</span><br><span class="line">  echo -e &quot;\033[36;1m$1\033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showVersion()&#123;</span><br><span class="line">  logInfo &quot;run version 2.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showBranch()&#123;</span><br><span class="line">  logInfo &quot;run dev&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage() &#123;</span><br><span class="line">  logError &quot;Usage: run [gateway|bp|nps|mps|web] [-v] [-b]&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 WEB 工程</span></span><br><span class="line">pullWeb()&#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 是否有 WEB 工程</span></span><br><span class="line">  if [ -d $web_path ]</span><br><span class="line">  then</span><br><span class="line">    logInfo &quot;cd $web_path&quot;</span><br><span class="line">    cd $web_path</span><br><span class="line">    logInfo &quot;git clone WEB&quot;</span><br><span class="line">    sshpass -p devops git clone -b dev http://url.git $web_path</span><br><span class="line">  fi</span><br><span class="line">  logInfo &quot;$1 pulled successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建 WEB 工程</span></span><br><span class="line">buildWeb()&#123;</span><br><span class="line">  logInfo &quot;cd $web_path/ai-meeting-admin&quot;</span><br><span class="line">  cd $web_path/ai-meeting-admin</span><br><span class="line">  logInfo &quot;yarn install&quot;</span><br><span class="line">  yarn install</span><br><span class="line">  logInfo &quot;yarn build&quot;</span><br><span class="line">  yarn build</span><br><span class="line">  logInfo &quot;$1 builed successfully!&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 将打完包的前端代码复制到 aim 下 gateway static 目录下</span></span><br><span class="line">  logInfo &quot;rm -rf $aim_path/gateway/src/main/resources/static/*&quot;</span><br><span class="line">  rm -rf $aim_path/gateway/src/main/resources/static/*</span><br><span class="line">  logInfo &quot;cp -rf $web_path/ai-meeting-admin/dist/. $aim_path/gateway/src/main/resources/static&quot;</span><br><span class="line">  cp -rf $web_path/ai-meeting-admin/dist/. $aim_path/gateway/src/main/resources/static</span><br><span class="line">  logInfo &quot;cd $aim_path/gateway/src/main/resources/static&quot;</span><br><span class="line">  cd $aim_path/gateway/src/main/resources/static</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 提交代码</span></span><br><span class="line">  git config --global user.email &quot;devops@163.com&quot;</span><br><span class="line">  git config --global user.name &quot;devops&quot;</span><br><span class="line">  git add -A</span><br><span class="line">  git commit -m &quot;更新web_$ban&quot;</span><br><span class="line">  git config --global push.default simple</span><br><span class="line">  sshpass -p devops git pull --rebase origin dev</span><br><span class="line">  sshpass -p devops git push -u origin dev</span><br><span class="line">  logInfo &quot;$1 pushed successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 Java 工程</span></span><br><span class="line">pullJava()&#123;</span><br><span class="line">  if [ -d $aim_path ]</span><br><span class="line">  then</span><br><span class="line">    logInfo &quot;cd $aim_path&quot;</span><br><span class="line">    cd $aim_path</span><br><span class="line">    logInfo &quot;git pull AIM&quot;</span><br><span class="line">    sshpass -p devops git pull</span><br><span class="line">  else</span><br><span class="line">    logInfo &quot;git clone AIM&quot;</span><br><span class="line">    sshpass -p devops git clone -b dev http://url.git $aim_path</span><br><span class="line">  fi</span><br><span class="line">  logInfo &quot;$1 pulled successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建 Java 工程</span></span><br><span class="line">buildJava()&#123;</span><br><span class="line">  logInfo &quot;cd $aim_path&quot;</span><br><span class="line">  cd $aim_path</span><br><span class="line">  logInfo &quot;mvn clean package -pl $1 -am&quot;</span><br><span class="line">  mvn clean package -pl $1 -am</span><br><span class="line">  logInfo &quot;cd $1&quot;</span><br><span class="line">  cd $1</span><br><span class="line">  logInfo &quot;cp -rf target/*.jar support&quot;</span><br><span class="line">  cp -rf target/*.jar support</span><br><span class="line">  logInfo &quot;cd support&quot;</span><br><span class="line">  cd support</span><br><span class="line">  logInfo &quot;docker build -t $1:$ban ./&quot;</span><br><span class="line">  docker build -t $1:$ban ./</span><br><span class="line">  logInfo &quot;docker rm -f $1&quot;</span><br><span class="line">  docker rm -f $1</span><br><span class="line">  logInfo &quot;sh deploy.sh $1:$ban sit&quot;</span><br><span class="line">  sh deploy.sh $1:$ban sit</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">ban=$(date +%s)</span><br><span class="line">aim_path=~/app/project/AIM</span><br><span class="line">web_path=~/app/project/WEB</span><br><span class="line"></span><br><span class="line">logError()&#123;</span><br><span class="line">  echo -e &quot;\033[31;1m$1\033[0m&quot;</span><br><span class="line">  exit 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logInfo()&#123;</span><br><span class="line">  echo -e &quot;\033[36;1m$1\033[0m&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showVersion()&#123;</span><br><span class="line">  logInfo &quot;run version 2.0&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showBranch()&#123;</span><br><span class="line">  logInfo &quot;run dev&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">usage() &#123;</span><br><span class="line">  logError &quot;Usage: run [gateway|bp|nps|mps|web] [-v] [-b]&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 WEB 工程</span></span><br><span class="line">pullWeb()&#123;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 是否有 WEB 工程</span></span><br><span class="line">  if [ -d $web_path ]</span><br><span class="line">  then</span><br><span class="line">    logInfo &quot;cd $web_path&quot;</span><br><span class="line">    cd $web_path</span><br><span class="line">    logInfo &quot;git pull WEB&quot;</span><br><span class="line">    sshpass -p devops git pull</span><br><span class="line">  else</span><br><span class="line">    logInfo &quot;git clone WEB&quot;</span><br><span class="line">    sshpass -p devops git clone -b dev http://devops@10.1.8.8:8080/r/AIM/web.git $web_path</span><br><span class="line">  fi</span><br><span class="line">  logInfo &quot;$1 pulled successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建 WEB 工程</span></span><br><span class="line">buildWeb()&#123;</span><br><span class="line">  logInfo &quot;cd $web_path/ai-meeting-admin&quot;</span><br><span class="line">  cd $web_path/ai-meeting-admin</span><br><span class="line">  logInfo &quot;yarn install&quot;</span><br><span class="line">  yarn install</span><br><span class="line">  logInfo &quot;yarn build&quot;</span><br><span class="line">  yarn build</span><br><span class="line">  logInfo &quot;$1 builed successfully!&quot;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 将打完包的前端代码复制到 aim 下 gateway static 目录下</span></span><br><span class="line">  logInfo &quot;rm -rf $aim_path/gateway/src/main/resources/static/*&quot;</span><br><span class="line">  rm -rf $aim_path/gateway/src/main/resources/static/*</span><br><span class="line">  logInfo &quot;cp -rf $web_path/ai-meeting-admin/dist/. $aim_path/gateway/src/main/resources/static&quot;</span><br><span class="line">  cp -rf $web_path/ai-meeting-admin/dist/. $aim_path/gateway/src/main/resources/static</span><br><span class="line">  logInfo &quot;cd $aim_path/gateway/src/main/resources/static&quot;</span><br><span class="line">  cd $aim_path/gateway/src/main/resources/static</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 提交代码</span></span><br><span class="line">  git config --global user.email &quot;devops@163.com&quot;</span><br><span class="line">  git config --global user.name &quot;devops&quot;</span><br><span class="line">  git add -A</span><br><span class="line">  git commit -m &quot;更新web_$ban&quot;</span><br><span class="line">  git config --global push.default simple</span><br><span class="line">  sshpass -p devops git pull --rebase origin dev</span><br><span class="line">  sshpass -p devops git push -u origin dev</span><br><span class="line">  logInfo &quot;$1 pushed successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取 Java 工程</span></span><br><span class="line">pullJava()&#123;</span><br><span class="line">  if [ -d $aim_path ]</span><br><span class="line">  then</span><br><span class="line">    logInfo &quot;cd $aim_path&quot;</span><br><span class="line">    cd $aim_path</span><br><span class="line">    logInfo &quot;git pull AIM&quot;</span><br><span class="line">    sshpass -p devops git pull</span><br><span class="line">  else</span><br><span class="line">    logInfo &quot;git clone AIM&quot;</span><br><span class="line">    sshpass -p devops git clone -b dev http://devops@10.1.8.8:8080/r/AIM/AIM.git $aim_path</span><br><span class="line">  fi</span><br><span class="line">  logInfo &quot;$1 pulled successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 构建 Java 工程</span></span><br><span class="line">buildJava()&#123;</span><br><span class="line">  logInfo &quot;cd $aim_path&quot;</span><br><span class="line">  cd $aim_path</span><br><span class="line">  logInfo &quot;mvn clean package -pl $1 -am&quot;</span><br><span class="line">  mvn clean package -pl $1 -am</span><br><span class="line">  logInfo &quot;cd $1&quot;</span><br><span class="line">  cd $1</span><br><span class="line">  logInfo &quot;cp -rf target/*.jar support&quot;</span><br><span class="line">  cp -rf target/*.jar support</span><br><span class="line">  logInfo &quot;cd support&quot;</span><br><span class="line">  cd support</span><br><span class="line">  logInfo &quot;docker build -t $1:$ban ./&quot;</span><br><span class="line">  docker build -t $1:$ban ./</span><br><span class="line">  logInfo &quot;docker rm -f $1&quot;</span><br><span class="line">  docker rm -f $1</span><br><span class="line">  logInfo &quot;sh deploy.sh $1:$ban sit&quot;</span><br><span class="line">  sh deploy.sh $1:$ban sit</span><br><span class="line">  logInfo &quot;docker images | grep $1 | awk &#x27;&#123;print $1&quot;:&quot;$2&#125;&#x27; | xargs docker rmi&quot;</span><br><span class="line">  docker images | grep $1 | awk &#x27;&#123;print $1&quot;:&quot;$2&#125;&#x27; | xargs docker rmi</span><br><span class="line">  logInfo &quot;$1 builded successfully!&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 校验口令</span></span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">  &quot;web&quot;)</span><br><span class="line">    pullWeb $1</span><br><span class="line">    pullJava gateway</span><br><span class="line">    buildWeb $1</span><br><span class="line">    buildJava gateway ;;</span><br><span class="line">  &quot;gateway&quot;)</span><br><span class="line">    pullJava $1</span><br><span class="line">    buildJava $1 ;;</span><br><span class="line">  &quot;bp&quot;)</span><br><span class="line">    pullJava $1</span><br><span class="line">    buildJava $1 ;;</span><br><span class="line">  &quot;nps&quot;)</span><br><span class="line">    pullJava $1</span><br><span class="line">    buildJava $1 ;;</span><br><span class="line">  &quot;mps&quot;)</span><br><span class="line">    pullJava $1</span><br><span class="line">    buildJava $1 ;;</span><br><span class="line">  &quot;-v&quot;)</span><br><span class="line">    showVersion ;;</span><br><span class="line">  &quot;-b&quot;)</span><br><span class="line">    showBranch ;;</span><br><span class="line">  *)</span><br><span class="line">    usage ;;</span><br><span class="line">esac</span><br><span class="line"></span><br><span class="line">exit 0</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h1 id="support"><a href="#support" class="headerlink" title="support"></a>support</h1><h2 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a>deploy.sh</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8761:8761 --network host -e <span class="string">&quot;spring_profiles_active=<span class="variable">$&#123;2&#125;</span>&quot;</span> -v /usr/<span class="built_in">local</span>/dockerStorage/bp/files:/opt/files  --name=<span class="string">&#x27;bp&#x27;</span>   <span class="variable">$1</span></span><br></pre></td></tr></table></figure><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> adoptopenjdk:<span class="number">8</span>-jre-openj9</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/aimbp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir logs</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> bp*.jar ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> java -jar bp*.jar </span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus快速入门</title>
      <link href="2021/11/09/java/firststage/MyBatis-Plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/11/09/java/firststage/MyBatis-Plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>MyBatis-Plus （简称 MP）是一个 <strong>MyBatis</strong> 的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><h2 id="1-1-特性"><a href="#1-1-特性" class="headerlink" title="1.1.特性"></a>1.1.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="1-2-支持数据库"><a href="#1-2-支持数据库" class="headerlink" title="1.2.支持数据库"></a>1.2.支持数据库</h2><blockquote><p>任何能使用 <code>mybatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>mysql，oracle，db2，h2，hsql，sqlite，postgresql，sqlserver，Phoenix，Gauss ，clickhouse，Sybase，OceanBase，Firebird，cubrid，goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="1-3-框架结构"><a href="#1-3-框架结构" class="headerlink" title="1.3.框架结构"></a>1.3.框架结构</h2><p><img src="/images/img/blog/image-20211110150643496.png" alt="image-20211110150643496"></p><h1 id="2-快速上手"><a href="#2-快速上手" class="headerlink" title="2.快速上手"></a>2.快速上手</h1><h2 id="2-1-pom-xml导入MyBatis-Plus依赖"><a href="#2-1-pom-xml导入MyBatis-Plus依赖" class="headerlink" title="2.1.pom.xml导入MyBatis Plus依赖"></a>2.1.pom.xml导入MyBatis Plus依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>Latest Version<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-在application-yml中配置数据源"><a href="#2-2-在application-yml中配置数据源" class="headerlink" title="2.2.在application.yml中配置数据源"></a>2.2.在application.yml中配置数据源</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据源</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/wyl?</span> <span class="string">useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span> </span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志，输出更详细日志信息</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="2-3-根据数据库表创建实体类"><a href="#2-3-根据数据库表创建实体类" class="headerlink" title="2.3.根据数据库表创建实体类"></a>2.3.根据数据库表创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-创建Mapper接口"><a href="#2-4-创建Mapper接口" class="headerlink" title="2.4.创建Mapper接口"></a>2.4.创建Mapper接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在对应的mapper上面继承基本的接口BaseMapper</span></span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="comment">//代表持久层</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//所有的CRUD操作都已经编写完成了</span></span><br><span class="line">    <span class="comment">//你不需要像以前的配置一大堆文件了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5.测试"></a>2.5.测试</h2><p>启动类需要加 @MapperScan(“mapper所在的包”)，否则无法加载mapper bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="comment">//继承了BaseMapper，所有的方法都来自父类</span></span><br><span class="line">    <span class="comment">//我们也可以编写自己的扩展方法</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//参数是一个Wrapper，条件构造器，这里我们先不用 null</span></span><br><span class="line">        <span class="comment">//查询全部用户</span></span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我的sql 谁写的，方法又去哪了，其实都是mybatis plus。</p><h1 id="3-配置日志"><a href="#3-配置日志" class="headerlink" title="3.配置日志"></a>3.配置日志</h1><p>我们所有的sql现在是不可见的，我们希望知道他是怎么执行的，所以我们必须要看日志！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置日志</span></span><br><span class="line"><span class="string">mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h1 id="4-CRUD"><a href="#4-CRUD" class="headerlink" title="4.CRUD"></a>4.CRUD</h1><h2 id="4-1-Service-CRUD-接口"><a href="#4-1-Service-CRUD-接口" class="headerlink" title="4.1.Service CRUD 接口"></a>4.1.Service CRUD 接口</h2><h3 id="4-1-1-Save"><a href="#4-1-1-Save" class="headerlink" title="4.1.1.Save"></a>4.1.1.Save</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录（选择字段，策略插入）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">save</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 插入（批量）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-2-SaveOrUpdate"><a href="#4-1-2-SaveOrUpdate" class="headerlink" title="4.1.2.SaveOrUpdate"></a>4.1.2.SaveOrUpdate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TableId 注解存在更新记录，否插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdate</span><span class="params">(T entity, Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 批量修改插入</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">saveOrUpdateBatch</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-3-Remove"><a href="#4-1-3-Remove" class="headerlink" title="4.1.3.Remove"></a>4.1.3.Remove</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">removeByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-4-Update"><a href="#4-1-4-Update" class="headerlink" title="4.1.4.Update"></a>4.1.4.Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Wrapper&lt;T&gt; updateWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">update</span><span class="params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 选择修改</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateById</span><span class="params">(T entity)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line"><span class="comment">// 根据ID 批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">updateBatchById</span><span class="params">(Collection&lt;T&gt; entityList, <span class="keyword">int</span> batchSize)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-5-Get"><a href="#4-1-5-Get" class="headerlink" title="4.1.5.Get"></a>4.1.5.Get</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">getById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">getOne</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, <span class="keyword">boolean</span> throwEx)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line"><span class="function">Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper，查询一条记录</span></span><br><span class="line">&lt;V&gt; <span class="function">V <span class="title">getObj</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-6-List"><a href="#4-1-6-List" class="headerlink" title="4.1.6.List"></a>4.1.6.List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps();</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper, Function&lt;? <span class="keyword">super</span> Object, V&gt; mapper)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-7-Page"><a href="#4-1-7-Page" class="headerlink" title="4.1.7.Page"></a>4.1.7.Page</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page)</span></span>;</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">page</span><span class="params">(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 无条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page);</span><br><span class="line"><span class="comment">// 条件分页查询</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; pageMaps(IPage&lt;T&gt; page, Wrapper&lt;T&gt; queryWrapper);</span><br></pre></td></tr></table></figure><h3 id="4-1-8-Count"><a href="#4-1-8-Count" class="headerlink" title="4.1.8.Count"></a>4.1.8.Count</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-1-9-Chain"><a href="#4-1-9-Chain" class="headerlink" title="4.1.9.Chain"></a>4.1.9.Chain</h3><h4 id="query"><a href="#query" class="headerlink" title="query"></a>query</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式查询 普通</span></span><br><span class="line"><span class="function">QueryChainWrapper&lt;T&gt; <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 链式查询 lambda 式。注意：不支持 Kotlin</span></span><br><span class="line"><span class="function">LambdaQueryChainWrapper&lt;T&gt; <span class="title">lambdaQuery</span><span class="params">()</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">query().eq(<span class="string">&quot;column&quot;</span>, value).one();</span><br><span class="line">lambdaQuery().eq(Entity::getId, value).list();</span><br></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式更改 普通</span></span><br><span class="line"><span class="function">UpdateChainWrapper&lt;T&gt; <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 链式更改 lambda 式。注意：不支持 Kotlin </span></span><br><span class="line"><span class="function">LambdaUpdateChainWrapper&lt;T&gt; <span class="title">lambdaUpdate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例：</span></span><br><span class="line">update().eq(<span class="string">&quot;column&quot;</span>, value).remove();</span><br><span class="line">lambdaUpdate().eq(Entity::getId, value).update(entity);</span><br></pre></td></tr></table></figure><h2 id="4-2-Mapper-CRUD-接口"><a href="#4-2-Mapper-CRUD-接口" class="headerlink" title="4.2.Mapper CRUD 接口"></a>4.2.Mapper CRUD 接口</h2><h3 id="4-2-1-Insert"><a href="#4-2-1-Insert" class="headerlink" title="4.2.1.Insert"></a>4.2.1.Insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-Delete"><a href="#4-2-2-Delete" class="headerlink" title="4.2.2.Delete"></a>4.2.2.Delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 entity 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; wrapper)</span></span>;</span><br><span class="line"><span class="comment">// 删除（根据ID 批量删除）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 columnMap 条件，删除记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-Update"><a href="#4-2-3-Update" class="headerlink" title="4.2.3.Update"></a>4.2.3.Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 whereWrapper 条件，更新记录</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T updateEntity, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; whereWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 ID 修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateById</span><span class="params">(<span class="meta">@Param(Constants.ENTITY)</span> T entity)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-Select"><a href="#4-2-4-Select" class="headerlink" title="4.2.4.Select"></a>4.2.4.Select</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 ID 查询</span></span><br><span class="line"><span class="function">T <span class="title">selectById</span><span class="params">(Serializable id)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询一条记录</span></span><br><span class="line"><span class="function">T <span class="title">selectOne</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectBatchIds</span><span class="params">(<span class="meta">@Param(Constants.COLLECTION)</span> Collection&lt;? extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectList</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">selectByMap</span><span class="params">(<span class="meta">@Param(Constants.COLUMN_MAP)</span> Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; selectMaps(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span></span><br><span class="line"><span class="function">List&lt;Object&gt; <span class="title">selectObjs</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据 entity 条件，查询全部记录（并翻页）</span></span><br><span class="line"><span class="function">IPage&lt;T&gt; <span class="title">selectPage</span><span class="params">(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span></span><br><span class="line">IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, <span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询总记录数</span></span><br><span class="line"><span class="function">Integer <span class="title">selectCount</span><span class="params">(<span class="meta">@Param(Constants.WRAPPER)</span> Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; userList1 = user.selectList(</span><br><span class="line">        <span class="keyword">new</span> EntityWrapper&lt;User&gt;().eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王延领&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询 10 条姓名为‘wyl’的用户记录</span></span><br><span class="line">List&lt;User&gt; userList = user.selectPage(</span><br><span class="line">        <span class="keyword">new</span> Page&lt;User&gt;(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        <span class="keyword">new</span> EntityWrapper&lt;User&gt;().eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;wyl&quot;</span>)</span><br><span class="line">).getRecords();</span><br></pre></td></tr></table></figure><p>结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页查询 10 条姓名为‘wyl’、性别为男，且年龄在18至50之间的用户记录</span></span><br><span class="line">List&lt;User&gt; userList = userMapper.selectPage(</span><br><span class="line">        <span class="keyword">new</span> Page&lt;User&gt;(<span class="number">1</span>, <span class="number">10</span>),</span><br><span class="line">        <span class="keyword">new</span> EntityWrapper&lt;User&gt;().eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;wyl&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;sex&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                .between(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;50&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="4-3-mapper-层-选装件"><a href="#4-3-mapper-层-选装件" class="headerlink" title="4.3.mapper 层 选装件"></a>4.3.mapper 层 选装件</h2><h3 id="AlwaysUpdateSomeColumnById"><a href="#AlwaysUpdateSomeColumnById" class="headerlink" title="AlwaysUpdateSomeColumnById"></a>AlwaysUpdateSomeColumnById</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">alwaysUpdateSomeColumnById</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="insertBatchSomeColumn"><a href="#insertBatchSomeColumn" class="headerlink" title="insertBatchSomeColumn"></a>insertBatchSomeColumn</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertBatchSomeColumn</span><span class="params">(List&lt;T&gt; entityList)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="logicDeleteByIdWithFill"><a href="#logicDeleteByIdWithFill" class="headerlink" title="logicDeleteByIdWithFill"></a>logicDeleteByIdWithFill</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicDeleteByIdWithFill</span><span class="params">(T entity)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="4-4-条件构造器"><a href="#4-4-条件构造器" class="headerlink" title="4.4.条件构造器"></a>4.4.条件构造器</h2><p>十分重要：Wappper</p><p>我们写一些复杂的SQL就可以使用他来替代！<br><img src="https://img2020.cnblogs.com/blog/688939/202111/688939-20211111142123337-1343574374.png" alt="image-20211111141359754"><br>1、测试一，记住查看输出的SQL进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询name不为空的用户，并且邮箱不为空的用户，年龄大于12</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.isNotNull(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">            .isNotNull(<span class="string">&quot;email&quot;</span>)</span><br><span class="line">            .ge(<span class="string">&quot;age&quot;</span>, <span class="number">12</span>);</span><br><span class="line">    userMapper.selectList(wrapper).forEach(System.out::println); <span class="comment">//和我们刚刚学习的map对比一下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试二，记住查看输出的SQL进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询名字Chanv</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Chanv&quot;</span>);</span><br><span class="line">    User user = userMapper.selectOne(wrapper);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、测试三</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询年龄在19到30岁之间的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    wrapper.between(<span class="string">&quot;age&quot;</span>, <span class="number">19</span>, <span class="number">30</span>); <span class="comment">//区间</span></span><br><span class="line">    Integer count = userMapper.selectCount(wrapper);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、测试四，记住查看输出的SQL进行分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询年龄在19到30岁之间的用户</span></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//左和右</span></span><br><span class="line">    wrapper.notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">            .likeRight(<span class="string">&quot;email&quot;</span>, <span class="string">&quot;t&quot;</span>);</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(wrapper);</span><br><span class="line">    maps.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试五</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//id 在子查询中查出来</span></span><br><span class="line">    wrapper.inSql(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;select id from user where id &lt; 3&quot;</span>);</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(wrapper);</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、测试六</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//通过id进行排序</span></span><br><span class="line">    wrapper.orderByDesc(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-代码生成器"><a href="#5-代码生成器" class="headerlink" title="5.代码生成器"></a>5.代码生成器</h1><p>dao、pojo、service、controller都给我自己去编写完成！</p><p>AutoGenerator 是 MyBatis-Plus 的代码生成器，通过 AutoGenerator 可以快速生成 Entity、Mapper、Mapper XML、Service、Controller 等各个模块的代码，极大的提升了开发效率。</p><h2 id="5-1-导入依赖"><a href="#5-1-导入依赖" class="headerlink" title="5.1.导入依赖"></a>5.1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码生成器依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1.tmp<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成器需要根据模板生成各种组件，所以模板也需要导入 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- velocity是默认的模板，除了它以外常用的还有：Freemarker、Beetl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5-2、启动类，任意一个main、-Test方法都行"><a href="#5-2、启动类，任意一个main、-Test方法都行" class="headerlink" title="5.2、启动类，任意一个main、@Test方法都行"></a>5.2、启动类，任意一个main、@Test方法都行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.mybatisplus;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Code</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要构建一个 代码自动生成器 对象</span></span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        <span class="comment">//配置策略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">        gc.setOutputDir(projectPath + <span class="string">&quot;/src/main/java&quot;</span>);</span><br><span class="line">        gc.setAuthor(<span class="string">&quot;ChanV&quot;</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>);  <span class="comment">//是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">//去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、设置数据源</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-plus?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8&quot;</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、包的配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;blog&quot;</span>);</span><br><span class="line">        pc.setParent(<span class="string">&quot;com.chanv&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;pojo&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>);    <span class="comment">//设置要映射的表名</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>);    <span class="comment">//自动lombok</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);</span><br><span class="line">        <span class="comment">//自动填充配置</span></span><br><span class="line">        TableFill createTime = <span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        TableFill updateTime = <span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFills.add(createTime);</span><br><span class="line">        tableFills.add(updateTime);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line">        <span class="comment">//乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>);     <span class="comment">//localhost:8080/hello_id_2</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        mpg.execute();  <span class="comment">//执行代码构造器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两步即可完成生成代码功能！</p><p>启动类上扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  <span class="comment">// 启动类</span></span><br><span class="line"><span class="meta">@MapperScan(value = &#123;&quot;com.wyl.mybatisplus.generator.mapper&quot;&#125;)</span>  <span class="comment">// 扫描mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisplusApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisplusApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类上扫描</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@MapperScan(value = &#123;&quot;com.wyl.mybatisplus.generator.mapper&quot;&#125;)</span>  <span class="comment">// @MapperScan(&quot;mapper的包位置&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mapper.selectList(<span class="keyword">null</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-测试MVC"><a href="#5-3-测试MVC" class="headerlink" title="5.3.测试MVC"></a>5.3.测试MVC</h2><h3 id="5-3-1-后端：controller-java"><a href="#5-3-1-后端：controller-java" class="headerlink" title="5.3.1.后端：controller.java"></a>5.3.1.后端：controller.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.mybatisplus.generator.controller;</span><br><span class="line"><span class="keyword">import</span> com.wyl.mybatisplus.generator.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/generator/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/success&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        mav.setViewName(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        mav.addObject(<span class="string">&quot;list&quot;</span>,userService.list());</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-2-前端：html"><a href="#5-3-2-前端：html" class="headerlink" title="5.3.2.前端：html"></a>5.3.2.前端：html</h3><p>记得放在templates下哦</p><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Index Page...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/generator/user/success&quot;</span>&gt;</span>展示数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>succuss.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置thymeleaf模板标签库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Success Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Success Page...<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.userAge&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前端用到thymeleaf模板引擎，需要配置application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># 视图解析</span></span><br><span class="line">  <span class="attr">thymeleaf:</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">classpath:/templates/</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br></pre></td></tr></table></figure><h1 id="6-MybatisX-快速开发插件"><a href="#6-MybatisX-快速开发插件" class="headerlink" title="6.MybatisX 快速开发插件"></a>6.MybatisX 快速开发插件</h1><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><h2 id="XML跳转"><a href="#XML跳转" class="headerlink" title="XML跳转"></a>XML跳转<img src="https://mp.baomidou.com/img/mybatisx-jump.gif" alt="跳转"></h2><h2 id="生成代码-需先在idea配置Database配置数据源"><a href="#生成代码-需先在idea配置Database配置数据源" class="headerlink" title="生成代码(需先在idea配置Database配置数据源)"></a>生成代码(需先在idea配置Database配置数据源)</h2><p> <img src="https://mp.baomidou.com/img/mybatisx-generate.gif" alt="生成代码"></p><h2 id="重置模板"><a href="#重置模板" class="headerlink" title="重置模板"></a>重置模板<img src="https://mp.baomidou.com/img/mybatisx-reset-template.gif" alt="生成代码"></h2><h2 id="JPA提示"><a href="#JPA提示" class="headerlink" title="JPA提示"></a>JPA提示</h2><p>生成新增<br><img src="https://mp.baomidou.com/img/mybatisx-tip-insert.gif" alt="生成新增"></p><h2 id="生成查询"><a href="#生成查询" class="headerlink" title="生成查询"></a>生成查询</h2><p><img src="https://mp.baomidou.com/img/mybatisx-tip-select.gif" alt="生成查询"></p><h2 id="生成修改"><a href="#生成修改" class="headerlink" title="生成修改"></a>生成修改</h2><p><img src="https://mp.baomidou.com/img/mybatisx-tip-update.gif" alt="生成修改"></p><h2 id="生成删除"><a href="#生成删除" class="headerlink" title="生成删除"></a>生成删除</h2><p><img src="https://mp.baomidou.com/img/mybatisx-tip-delete.gif" alt="生成删除"></p><h1 id="8-乐观锁"><a href="#8-乐观锁" class="headerlink" title="8.乐观锁"></a>8.乐观锁</h1><p>在面试过程中，我们经常会被问到乐观锁，悲观锁！这个其实非常简单！</p><p>原子引用！</p><blockquote><p>乐观锁：顾名思义十分乐观，他总是认为不会出现问题，无论干什么不去上锁！如果出现了问题，再次更新值测试！</p><p>悲观锁：顾名思义十分悲观，他总是任务总是出现问题，无论干什么都会上锁！再去操作！</p></blockquote><p>我们这里主要讲解，乐观锁机制！</p><p>乐观锁实现方式：</p><ul><li>取出记录，获取当前version</li><li>更新时，带上这个version</li><li>执行更新时，set version = new version where version = oldversion</li><li>如果version不对，就更新失败</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">乐观锁：<span class="number">1</span>、先查询，获得版本号 version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="comment">-- A</span></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;wyl&quot;, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- B 线程抢先完成，这个时候 version = 2，会导致 A 修改失败！</span></span><br><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> name <span class="operator">=</span> &quot;wjm&quot;, version <span class="operator">=</span> version <span class="operator">+</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> version <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>测试一下MP的乐观锁插件</p></blockquote><p>1、给数据库中增加version字段！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试乐观锁成功！</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1、查询用户信息</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1330080433207046145L</span>);</span><br><span class="line">    <span class="comment">//2、修改用户信息</span></span><br><span class="line">    user.setName(<span class="string">&quot;ChanV&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;1277077741@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//3、执行更新操作</span></span><br><span class="line">    userMapper.updateById(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试乐观锁失败！多线程下</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//线程1</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">5L</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;ChanV111&quot;</span>);</span><br><span class="line">    user.setEmail(<span class="string">&quot;1277077741@qq.com&quot;</span>);</span><br><span class="line">    <span class="comment">//模拟另一个线程执行了插队操作</span></span><br><span class="line">    User user2 = userMapper.selectById(<span class="number">5L</span>);</span><br><span class="line">    user2.setName(<span class="string">&quot;ChanV222&quot;</span>);</span><br><span class="line">    user2.setEmail(<span class="string">&quot;1277077741@qq.com&quot;</span>);</span><br><span class="line">    userMapper.updateById(user2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自旋锁多次尝试提交</span></span><br><span class="line">    userMapper.updateById(user);    <span class="comment">//如果没有乐观锁就会覆盖队线程的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="9-全局策略配置："><a href="#9-全局策略配置：" class="headerlink" title="9.全局策略配置："></a>9.全局策略配置：</h1><p>通过上面的小案例我们可以发现，实体类需要加@TableName注解指定数据库表名，通过@TableId注解指定id的增长策略。实体类少倒也无所谓，实体类一多的话也麻烦。所以可以在spring-dao.xml的文件中进行全局策略配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5、mybatisplus的全局策略配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;globalConfiguration&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.entity.GlobalConfiguration&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.3版本后，驼峰命名默认值就是true，所以可不配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;property name=&quot;dbColumnUnderline&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 全局主键自增策略，0表示auto --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 全局表前缀配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tablePrefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tb_&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里配置了还没用，还需要在sqlSessionFactory中注入配置才会生效。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3、配置mybatisplus的sqlSessionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.zhu.mybatisplus.entity&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入全局配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;globalConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;globalConfiguration&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如此一来，实体类中的@TableName注解和@TableId注解就可以去掉了。</p>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot快速入门</title>
      <link href="2021/11/01/java/firststage/spring%20boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/11/01/java/firststage/spring%20boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是SpringBoot"><a href="#1-什么是SpringBoot" class="headerlink" title="1.什么是SpringBoot"></a>1.什么是SpringBoot</h1><ul><li><p>一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说是简化开发，约定大于配置，  you can “just run”，能迅速的开发web应用，几行代码开发一个http接口。</p></li><li><p>所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡“约定大于配置”，进而衍生出一些一站式的解决方案。</p></li><li><p>是的这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</p></li><li><p>随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，甚至人称配置地狱。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p></li><li><p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p></li><li><p>简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。</p></li><li><p>Spring Boot 出生名门，从一开始就站在一个比较高的起点，又经过这几年的发展，生态足够完善，Spring Boot 已经当之无愧成为 Java 领域最热门的技术。</p></li></ul><p><strong>Spring Boot的主要优点：</strong></p><p>● 能够快速创建基于Spring的应用程序</p><p>● 能够直接使用java main方法启动内嵌的Tomcat服务器运行SpringBoot程序，不需要部署war包文件</p><p>● 提供约定的starter POM来简化Maven配置，让Maven的配置变得简单</p><p>● 自动化配置，根据项目的Maven依赖配置，Springboot自动配置Spring、Spring mvc等</p><p>● 提供了程序的健康检查等功能</p><p>● 基本可以完全不使用XML配置文件，采用注解配置</p><p><strong>SpringBoot四大核心</strong></p><p>● 自动配置</p><p>针对很多Spring应用程序和常见的应用功能，SpringBoot能自动提供相关配置</p><p>● 起步依赖</p><p>告诉SpringBoot需要什么功能，它就能引入需要的依赖库</p><p>● Actuator</p><p>让你能够深入运行中的SpringBoot应用程序，一探SpringBoot程序的内部信息</p><p>● 命令行界面</p><p>这是SpringBoot的可选特性，主要针对Groovy语言使用；</p><p>Groovy是一种基于JVM(Java虚拟机) 的敏捷开发语言，它结合了Python、Ruby和Smalltalk的许多强大的特性，Groovy 代码能够与Java代码很好地结合，也能用于扩展现有代码，由于其运行在JVM上的特性，Groovy可以使用其他Java语言编写的库。</p><h1 id="2-第一个spring-boot程序"><a href="#2-第一个spring-boot程序" class="headerlink" title="2.第一个spring boot程序"></a>2.第一个spring boot程序</h1><h2 id="2-1-使用-IDEA-直接创建项目"><a href="#2-1-使用-IDEA-直接创建项目" class="headerlink" title="2.1.使用 IDEA 直接创建项目"></a>2.1.使用 IDEA 直接创建项目</h2><p>1、创建一个新项目</p><p>2、选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p><p>3、填写项目信息</p><p>4、选择初始化的组件（初学勾选 Web 即可）</p><p>5、填写项目路径</p><p>6、等待项目构建成功</p><p><img src="/images/img/blog/image-20211108104225240.png" alt="image-20211108104225240"></p><p><img src="/images/img/blog/image-20211108104244944.png" alt="image-20211108104244944"></p><p><img src="/images/img/blog/616891-20190614102100336-1542213687.png" alt="img"></p><h2 id="2-2-pom-xml-分析"><a href="#2-2-pom-xml-分析" class="headerlink" title="2.2.pom.xml 分析"></a>2.2.pom.xml 分析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 父依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootOne<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springbootOne<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- web场景启动器 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web依赖：tomcat,dispatcherServlet，xml...--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-boot-starter：所有的springboot依赖都是使用这个开头的--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- springboot单元测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 剔除依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 打包插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>项目元数据：创建时候输入的Project Metadata部分，也就是Maven项目的基本元素，包括：groupId、artifactId、version、name、description等</p></li><li><p>parent：继承<code>spring-boot-starter-parent</code>的依赖管理，控制版本与打包等内容</p></li><li><p>dependencies：项目具体依赖，这里包含了<code>spring-boot-starter-web</code>用于实现HTTP接口（该依赖中包含了Spring MVC），官网对它的描述是：使用Spring MVC构建Web（包括RESTful）应用程序的入门者，使用Tomcat作为默认嵌入式容器。<code>spring-boot-starter-test</code>用于编写单元测试的依赖包。更多功能模块的使用将在后面逐步展开。</p></li><li><p>build：构建配置部分。默认使用了<code>spring-boot-maven-plugin</code>，配合<code>spring-boot-starter-parent</code>就可以把Spring Boot应用打包成JAR来直接运行。</p></li></ul><h2 id="2-3-编写一个http接口"><a href="#2-3-编写一个http接口" class="headerlink" title="2.3.编写一个http接口"></a>2.3.编写一个http接口</h2><p>1、在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</p><p>![image-20211108111755801](/images/img/blog/image-20211108111755801.png</p><p><img src="/images/img/blog/image-20211108111933347.png" alt="image-20211108111933347"></p><p><img src="/images/img/blog/image-20211108112414293.png" alt="image-20211108112414293"></p><h2 id="2-4-将项目打成jar包"><a href="#2-4-将项目打成jar包" class="headerlink" title="2.4.将项目打成jar包"></a>2.4.将项目打成jar包</h2><p>点击 maven的 package,等待生成。</p><p><img src="/images/img/blog/image-20211108112805061.png" alt="image-20211108112805061"></p><p>如果测试用例影响到打包，可以跳过</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    在工作中,很多情况下我们打包是不想执行测试用例的</span></span><br><span class="line"><span class="comment">    可能是测试用例不完事,或是测试用例会影响数据库数据</span></span><br><span class="line"><span class="comment">    跳过测试用例执</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--跳过项目运行测试用例--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打成了jar包后，就可以在任何地方运行了</p><p><img src="/images/img/blog/image-20211108113444005.png" alt="image-20211108113444005"></p><h2 id="2-5-端口"><a href="#2-5-端口" class="headerlink" title="2.5.端口"></a>2.5.端口</h2><p>有没有看到我的端口被占用了</p><p><img src="/images/img/blog/image-20211108113910276.png" alt="image-20211108113910276"></p><h2 id="2-6-生成项目模板"><a href="#2-6-生成项目模板" class="headerlink" title="2.6.生成项目模板"></a>2.6.生成项目模板</h2><p>为方便我们初始化项目，Spring Boot给我们提供一个项目模板生成网站。</p><ol><li><p>打开浏览器，访问：<a href="https://start.spring.io/">https://start.spring.io/</a></p></li><li><p>根据页面提示，选择构建工具，开发语言，项目信息等。</p></li><li><p>点击 Generate the project，生成项目模板，生成之后会将压缩包下载到本地。</p></li></ol><p><img src="/images/img/blog/image-20211108171343805.png" alt="image-20211108171343805"></p><h1 id="3-运行原理探究"><a href="#3-运行原理探究" class="headerlink" title="3.运行原理探究"></a>3.运行原理探究</h1><p>我们之前写的HelloSpringBoot，到底是怎么运行的呢，我们从pom.xml文件探究起；</p><h2 id="3-1-父依赖"><a href="#3-1-父依赖" class="headerlink" title="3.1.父依赖"></a>3.1.父依赖</h2><blockquote><p><strong>pom.xml</strong></p></blockquote><ul><li>spring-boot-dependencies：核心依赖在父工程中！</li><li>我们在写或者引入一些Springboot依赖的时候，不需要指定版本，就因为有这些版本仓库</li></ul><p>1、其中它主要是依赖一个父项目，主要是管理项目的资源过滤及插件！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、点进去，发现还有一个父依赖</p><p><img src="C:/Users/17144/AppData/Roaming/Typora/typora-user-images/image-20211108135229517.png" alt="image-20211108135229517"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、这里才是真正管理SpringBoot应用里面所有依赖版本的地方，SpringBoot的版本控制中心；</p><p>4、以后我们导入依赖默认是不需要写版本；但是如果导入的包没有在依赖中管理着就需要手动配置版本了</p><h2 id="3-2-启动器-spring-boot-starter"><a href="#3-2-启动器-spring-boot-starter" class="headerlink" title="3.2.启动器 spring-boot-starter"></a>3.2.启动器 spring-boot-starter</h2><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>springboot-boot-starter-xxx</strong>，说白了就是Springboot的启动场景</p></li><li><p>比如<strong>spring-boot-starter-web</strong>，他就会帮我们自动导入web的所有依赖</p></li><li><p>springboot会将所有的功能场景，都变成一个个的启动器</p></li><li><p>我们要使用什么功能，就只需要找到对应的启动器就好了<code>start</code></p></li></ul><h2 id="3-3-主程序"><a href="#3-3-主程序" class="headerlink" title="3.3.主程序"></a>3.3.主程序</h2><h3 id="3-3-1-默认的主启动类"><a href="#3-3-1-默认的主启动类" class="headerlink" title="3.3.1.默认的主启动类"></a>3.3.1.默认的主启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="comment">//@SpringBootApplication 来标注一个主程序类</span></span><br><span class="line"><span class="comment">//说明这是一个Spring Boot应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootOneApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootOneApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-2注解（-SpringBootApplication）"><a href="#3-3-2注解（-SpringBootApplication）" class="headerlink" title="3.3.2注解（@SpringBootApplication）"></a>3.3.2注解（@SpringBootApplication）</h3><ul><li><p>作用：标注在某个类上说明这个类是SpringBoot的主配置</p></li><li><p>SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p></li><li><p>进入这个注解：可以看到上面还有很多其他注解！</p></li></ul><p><img src="/images/img/blog/image-20211108135746831.png" alt="image-20211108135746831"></p><h4 id="ComponentScan"><a href="#ComponentScan" class="headerlink" title="@ComponentScan"></a>@ComponentScan</h4><ul><li><p>这个注解在Spring中很重要 ,它对应XML配置中的元素。</p></li><li><p>作用：自动扫描并加载符合条件的组件或者bean ， 将这个bean定义加载到IOC容器中</p></li></ul><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><ul><li><p>作用：<font color=red>SpringBoot的配置类 </font>，标注在某个类上 ， 表示这是一个SpringBoot的配置类；</p></li><li><p>我们继续进去这个注解查看</p></li></ul><p><img src="/images/img/blog/image-20211108135926732.png" alt="image-20211108135926732"></p><ul><li><p>这里的 <strong>@Configuration</strong>，说明这是一个<font color=red>spring的配置类</font> ，配置类就是对应Spring的xml 配置文件；</p></li><li><p><strong>@Component</strong> 这就说明，启动类本身也是<font color=red>Spring中的一个组件</font>而已，负责启动应用！</p></li><li><p>我们回到 SpringBootApplication 注解中继续看。</p></li></ul><h4 id="EnableAutoConfiguration"><a href="#EnableAutoConfiguration" class="headerlink" title="@EnableAutoConfiguration"></a>@EnableAutoConfiguration</h4><ul><li><p><strong><font color=red>开启自动配置功能</font></strong></p><ul><li>以前我们需要自己配置的东西，而现在SpringBoot可以自动帮我们配置 ；</li><li>@EnableAutoConfiguration告诉SpringBoot开启自动配置功能，这样自动配置才能生效；</li></ul><p>点进注解接续查看：</p></li><li><p><strong>@AutoConfigurationPackage ：<font color=red>自动配置包</font></strong></p></li></ul><p><img src="/images/img/blog/image-20211108140054846.png" alt="image-20211108140054846"></p><p><img src="/images/img/blog/image-20211108140207428.png" alt="image-20211108140207428"></p><ul><li><ul><li><p><strong>@import</strong> ：Spring底层注解@import ， 给容器中导入一个组件</p></li><li><p><strong>Registrar.class</strong> 作用：<font color=red>自动配置包注册</font>，将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 ；</p></li><li><p>这个分析完了，退到上一步，继续看</p></li></ul></li><li><p><strong>@Import({AutoConfigurationImportSelector.class}) ：给容器导入组件 ；</strong></p><ul><li><strong>AutoConfigurationImportSelector</strong> ：<font color=red>自动配置导入选择器</font>，那么它会导入哪些组件的选择器呢？我们点击去这个类看源码：</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有的配置</span></span><br><span class="line">List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br></pre></td></tr></table></figure><ul><li><p>获得候选的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 和下面的方法对应</span></span><br><span class="line">    <span class="comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span></span><br><span class="line">    <span class="comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span></span><br><span class="line">  List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//和上面的类的方法loadFactoryNames里面的第一个参数对应</span></span><br><span class="line"><span class="comment">//这里的getSpringFactoriesLoaderFactoryClass（）方法</span></span><br><span class="line"><span class="comment">//返回的就是我们最开始看的启动自动导入配置文件的注解类；EnableAutoConfiguration</span></span><br><span class="line"> <span class="keyword">protected</span> Class&lt;?&gt; getSpringFactoriesLoaderFactoryClass() &#123;</span><br><span class="line">     <span class="keyword">return</span> EnableAutoConfiguration.class;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>这个方法<code>getCandidateConfigurations()</code>又调用了  <code>SpringFactoriesLoader</code> 类的静态方法！我们进入<code>SpringFactoriesLoader</code>类loadFactoryNames() 方法，<font color=red>获取所有的加载配置</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, <span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">//这里它又调用了 loadSpringFactories 方法</span></span><br><span class="line">    <span class="keyword">return</span> (List)loadSpringFactories(classLoader).getOrDefault(factoryClassName, Collections.emptyList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们继续点击查看 loadSpringFactories 方法</p><ul><li>项目资源:<code>META-INF/spring.factories</code></li><li>系统资源:<code>META-INF/spring.factories</code></li><li>从这些资源中配置了所有的nextElement（自动配置），分装成properties</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将所有的资源加载到配置类中（将下面的抽离出来分析，第15行）</span></span><br><span class="line">Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(<span class="meta">@Nullable</span> ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//获得classLoader ， 我们返回可以看到这里得到的就是EnableAutoConfiguration标注的类本身</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; result = (MultiValueMap)cache.get(classLoader);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//去获取一个资源 &quot;META-INF/spring.factories&quot;</span></span><br><span class="line">            Enumeration&lt;URL&gt; urls = classLoader != <span class="keyword">null</span> ? classLoader.getResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>) : ClassLoader.getSystemResources(<span class="string">&quot;META-INF/spring.factories&quot;</span>);</span><br><span class="line">            LinkedMultiValueMap result = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">            <span class="comment">//判断有没有更多的元素，将读取到的资源循环遍历，封装成为一个Properties</span></span><br><span class="line">            <span class="keyword">while</span>(urls.hasMoreElements()) &#123;</span><br><span class="line">              URL url = (URL)urls.nextElement();</span><br><span class="line">                UrlResource resource = <span class="keyword">new</span> UrlResource(url);</span><br><span class="line">                Properties properties = PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">                Iterator var6 = properties.entrySet().iterator();</span><br><span class="line">                <span class="keyword">while</span>(var6.hasNext()) &#123;</span><br><span class="line">                    Entry&lt;?, ?&gt; entry = (Entry)var6.next();</span><br><span class="line">                    String factoryClassName = ((String)entry.getKey()).trim();</span><br><span class="line">                    String[] var9 = StringUtils.commaDelimitedListToStringArray((String)entry.getValue());</span><br><span class="line">                    <span class="keyword">int</span> var10 = var9.length;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> var11 = <span class="number">0</span>; var11 &lt; var10; ++var11) &#123;</span><br><span class="line">                        String factoryName = var9[var11];</span><br><span class="line">                        result.add(factoryClassName, factoryName.trim());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cache.put(classLoader, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Unable to load factories from location [META-INF/spring.factories]&quot;</span>, var13);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发现一个多次出现的文件：spring.factories</p></li></ul><h3 id="3-3-3-spring-factories"><a href="#3-3-3-spring-factories" class="headerlink" title="3.3.3.spring.factories"></a>3.3.3.spring.factories</h3><p>我们根据源头打开spring.factories ， 看到了很多自动配置的文件；这就是自动配置根源所在！</p><p><img src="/images/img/blog/image-20211108140808447.png" alt="image-20211108140808447"></p><h3 id="3-3-4-WebMvcAutoConfiguration"><a href="#3-3-4-WebMvcAutoConfiguration" class="headerlink" title="3.3.4.WebMvcAutoConfiguration"></a>3.3.4.WebMvcAutoConfiguration</h3><p>在上面的自动配置类随便找一个打开看看，比如 ：WebMvcAutoConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SERVLET_LOCATIONS = &#123; <span class="string">&quot;/&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(HiddenHttpMethodFilter.class)</span></span><br></pre></td></tr></table></figure><p>可以看到这些一个个的都是JavaConfig配置类，而且都注入了一些Bean，可以找一些自己认识的类，看着熟悉一下！</p><p>所以，自动配置真正实现是从classpath中搜寻所有的META-INF/spring.factories配置文件 ，并将其中对应的 org.springframework.boot.autoconfigure. 包下的配置项，通过反射实例化为对应标注了 @Configuration的JavaConfig形式的IOC容器配置类 ， 然后将这些都汇总成为一个实例并加载到IOC容器中</p><h3 id="3-3-5-结论："><a href="#3-3-5-结论：" class="headerlink" title="3.3.5.结论："></a>3.3.5.结论：</h3><ol><li><p>SpringBoot在启动的时候从类路径下的<code>META-INF/spring.factories</code>中获取<code>EnableAutoConfiguration</code>指定的值</p></li><li><p>将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；</p></li><li><p>以前我们需要自动配置的东西，现在springboot帮我们做了</p></li><li><p>整合JavaEE，整体解决方案和自动配置的东西都在<code>springboot-autoconfigure</code>的jar包中；</p></li><li><p>它会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器中</p></li><li><p>它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并自动配置，@Configuration（javaConfig） ；</p></li><li><p>有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；</p><p><img src="/images/img/blog/2031311-20200822164847152-975932169.png" alt="img"></p></li></ol><h2 id="3-4启动"><a href="#3-4启动" class="headerlink" title="3.4启动"></a>3.4启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HellowordApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//该方法返回一个ConfigurableApplicationContext对象</span></span><br><span class="line"> <span class="comment">//参数一：应用入口的类； 参数二：命令行参数  </span></span><br><span class="line">        SpringApplication.run(Springboot01HellowordApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SpringApplication.run分析</strong></p><ul><li>分析该方法主要分两部分</li><li>一是SpringApplication的实例化，</li><li>二是run方法的执行；</li></ul><h3 id="3-4-1-SpringApplication"><a href="#3-4-1-SpringApplication" class="headerlink" title="3.4.1.SpringApplication"></a>3.4.1.SpringApplication</h3><p><img src="/images/img/blog/image-20211108141346936.png" alt="image-20211108141346936"></p><p><strong>这个类主要做了以下四件事情：</strong></p><ol><li><p>推断应用的类型是普通的项目还是Web项目</p></li><li><p>查找并加载所有可用初始化器 ， 设置到initializers属性中</p></li><li><p>找出所有的应用程序监听器，设置到listeners属性中</p></li><li><p>推断并设置main方法的定义类，找到运行的主类</p></li></ol><p><strong>查看构造器</strong>：</p><p><img src="/images/img/blog/image-20211108141446936.png" alt="image-20211108141446936"></p><h3 id="3-4-2-run方法流程分析"><a href="#3-4-2-run方法流程分析" class="headerlink" title="3.4.2.run方法流程分析"></a>3.4.2.run方法流程分析</h3><p><img src="/images/img/blog/2031311-20200822164917336-1930528197.png" alt="img"></p><h1 id="4-yaml语法学习"><a href="#4-yaml语法学习" class="headerlink" title="4.yaml语法学习"></a>4.yaml语法学习</h1><h2 id="4-1-配置文件"><a href="#4-1-配置文件" class="headerlink" title="4.1.配置文件"></a>4.1.配置文件</h2><p>SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的</p><ul><li><p>application.properties</p></li><li><ul><li>语法结构 ：key=value</li></ul></li><li><p>application.yaml</p></li><li><ul><li>语法结构 ：key：<font color=red>空格</font> value</li></ul></li></ul><p><strong>配置文件的作用 ：</strong>修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了；</p><p>比如我们可以在配置文件中修改Tomcat 默认启动的端口号！测试一下！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure><h2 id="4-2-YAML"><a href="#4-2-YAML" class="headerlink" title="4.2.YAML"></a>4.2.YAML</h2><h3 id="yaml概述"><a href="#yaml概述" class="headerlink" title="yaml概述"></a>yaml概述</h3><ul><li><p>YAML是 “YAML Ain’t a Markup Language” （YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p></li><li><p>这种语言以<strong>数据</strong>作为中心，而不是以标记语言为重点！</p></li><li><p>以前的配置文件，大多数都是使用xml来配置；比如一个简单的端口配置，我们来对比下yaml和xml</p><ul><li><p>传统xml配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8081<span class="tag">&lt;<span class="name">port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>yaml配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server：</span></span><br><span class="line">  <span class="attr">prot:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="yaml基础语法"><a href="#yaml基础语法" class="headerlink" title="yaml基础语法"></a>yaml基础语法</h3><p><strong>说明：语法要求严格！</strong></p><ol><li><p>空格不能省略</p></li><li><p>以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。</p></li><li><p>属性和值的大小写都是十分敏感的。</p></li></ol><p><strong>字面量：普通的值  [ 数字，布尔值，字符串  ]</strong></p><ul><li><p>字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；<code>k: v</code></p><p>注意：</p><ul><li><p><font color=red>“ ” 双引号</font>，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；</p><p>比如 ：name: “wang\n jingmo”   输出 ：wang换行   jingmo</p></li><li><p><font color=red>‘’ 单引号</font>，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出</p><p>比如 ：name: ‘wang\n jingmo’   输出 ：wang\n   jingmo</p></li></ul></li></ul><p><strong>对象、Map（键值对）</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对象、Map格式</span></span><br><span class="line"><span class="attr">k:</span> </span><br><span class="line">    <span class="attr">v1:</span></span><br><span class="line">    <span class="attr">v2:</span></span><br></pre></td></tr></table></figure><p>在下一行来写对象的属性和值得关系，注意缩进；比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">wangyanling</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">student:</span> &#123;<span class="attr">name:</span> <span class="string">wangyanling</span>,<span class="attr">age:</span> <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>数组（ List、set ）</strong></p><p>用 - 值表示数组中的一个元素,比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure><p>行内写法</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">cat</span>,<span class="string">dog</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure><p><strong>修改SpringBoot的默认端口号</strong></p><p>配置文件中添加，端口号的参数，就可以切换端口；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><h2 id="4-3-注入配置文件"><a href="#4-3-注入配置文件" class="headerlink" title="4.3.注入配置文件"></a>4.3.注入配置文件</h2><p>yaml文件强大的地方在于可以给实体类<strong>直接注入匹配值</strong></p><h3 id="4-3-1-yaml注入配置文件"><a href="#4-3-1-yaml注入配置文件" class="headerlink" title="4.3.1. yaml注入配置文件"></a>4.3.1. yaml注入配置文件</h3><p>① 在springboot项目中的resources目录下新建一个文件 application.yml</p><p>② 编写一个实体类 Dog</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.springboot.pojo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>  <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ 试着用@Value给bean注入属性值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;旺财&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>④ 在SpringBoot的测试类下注入并输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//将狗狗自动注入进来</span></span><br><span class="line">    Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(dog); <span class="comment">//打印看下狗狗对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果成功输出，@Value注入成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dog&#123;name&#x3D;&#39;旺财&#39;, age&#x3D;1&#125;</span><br></pre></td></tr></table></figure><p>⑤ 再编写一个复杂点的实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//有参无参构造、get、set方法、toString()方法  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑥ 使用yaml配置的方式进行注入</p><p>写的时候注意区别和优势，首先编写一个yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">wjm</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">  <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">  <span class="attr">lists:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">旺财</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>⑦ 把对象的所有值都写好后，注入到类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">@ConfigurationProperties作用：</span></span><br><span class="line"><span class="comment">将配置文件中配置的每一个属性的值，映射到这个组件中；</span></span><br><span class="line"><span class="comment">告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定</span></span><br><span class="line"><span class="comment">参数 prefix = “person” : 将配置文件中的person下面的所有属性一一对应</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Boolean happy;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; lists;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⑧ IDEA 提示，springboot配置注解处理器没有找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Not Found</span><br><span class="line"></span><br><span class="line">The requested URL &#x2F;spring-boot&#x2F;docs&#x2F;2.3.3.RELEASE&#x2F;reference&#x2F;html&#x2F;configuration-metadata.html was not found on this server.</span><br></pre></td></tr></table></figure><p>查看文档(在网址中更改版本获得，如回到2.1.9)，找到一个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置文件处理器，配置文件进行绑定就会有提示，需要重启 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>⑨ 确认以上配置都完成后，去测试类中测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Person person; <span class="comment">//将person自动注入进来</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(person); <span class="comment">//打印person信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：所有值全部注入成功</p><h3 id="4-3-2-加载指定配置文件"><a href="#4-3-2-加载指定配置文件" class="headerlink" title="4.3.2. 加载指定配置文件"></a>4.3.2. 加载指定配置文件</h3><p><strong>@PropertySource</strong> ：加载指定的配置文件；<br><strong>@configurationProperties</strong>：默认从全局配置文件中获取值</p><ol><li>在resources目录下新建一个person.properties文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name&#x3D;hello</span><br></pre></td></tr></table></figure><ol><li>在代码中指定加载person.properties文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:person.properties&quot;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>再次输出测试，指定配置文件绑定成功</li></ol><h3 id="4-3-3-配置文件占位符"><a href="#4-3-3-配置文件占位符" class="headerlink" title="4.3.3.配置文件占位符"></a>4.3.3.配置文件占位符</h3><p>配置文件还可以编写占位符生成随机数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">wangjingmo$&#123;random.uuid&#125;</span> <span class="comment"># 随机uuid</span></span><br><span class="line">    <span class="attr">age:</span> <span class="string">$&#123;random.int&#125;</span>  <span class="comment"># 随机int</span></span><br><span class="line">    <span class="attr">happy:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">birth:</span> <span class="number">2000</span><span class="string">/01/01</span></span><br><span class="line">    <span class="attr">maps:</span> &#123;<span class="attr">k1:</span> <span class="string">v1</span>,<span class="attr">k2:</span> <span class="string">v2</span>&#125;</span><br><span class="line">    <span class="attr">lists:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">code</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">girl</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">music</span></span><br><span class="line">    <span class="attr">dog:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">$&#123;person.hello:other&#125;_旺财</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-回顾properties配置"><a href="#4-3-4-回顾properties配置" class="headerlink" title="4.3.4.回顾properties配置"></a>4.3.4.回顾properties配置</h3><p>上面采用的yaml方法都是最简单的方式，也是开发中最常用的、pringboot所推荐的</p><p>接下来看看其他的实现方式，原理都是相同的，写还是那样写</p><p>配置文件除了yml还有之前常用的properties</p><p>【注意】properties配置文件在写中文的时候会有乱码 ， 需要去IDEA中设置编码格式为UTF-8：settings–&gt;FileEncodings 中配置</p><p><strong>测试步骤</strong></p><ol><li>新建一个实体类User</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>编辑配置文件 user.properties</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">user1.name</span>=<span class="string">wyl</span></span><br><span class="line"><span class="meta">user1.age</span>=<span class="string">18</span></span><br><span class="line"><span class="meta">user1.sex</span>=<span class="string">男</span></span><br></pre></td></tr></table></figure><ol><li>在User类上使用@Value来进行注入</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:user.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">//直接使用@value</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span> <span class="comment">//从配置文件中取值</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value(&quot;#&#123;9*2&#125;&quot;)</span>  <span class="comment">// #&#123;SPEL&#125; Spring表达式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Value(&quot;男&quot;)</span>  <span class="comment">// 字面量</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Springboot测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SpringBootTest</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    User user;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果正常输出</p><h3 id="4-3-4-对比小结"><a href="#4-3-4-对比小结" class="headerlink" title="4.3.4.对比小结"></a>4.3.4.对比小结</h3><p>@Value使用起来并不友好！我们需要为每个属性单独注解赋值比较麻烦<br><img src="/images/img/blog/2031311-20200822165221145-1827257767.png" alt="img"></p><ol><li>@ConfigurationProperties只需要写一次即可 ， @Value则需要每个字段都添加</li><li>松散绑定：这个什么意思呢? 比如yml中写的last-name，这个和lastName是一样的，<code>-</code> 后面跟着的字母默认是大写的。这就是松散绑定</li><li>JSR303数据校验 ，可以在字段是增加一层过滤器验证 ， 保证数据的合法性</li><li>复杂类型封装，yml中可以封装对象 ， 使用value就不支持</li></ol><p><strong>结论：</strong></p><ol><li>配置yml和配置properties都可以获取到值 ， 强烈推荐 yml；</li><li>如果在某个业务中，只需要获取配置文件中的某个值，可以使用一下 @value；</li><li>如果专门编写了一个JavaBean来和配置文件进行一一映射，就直接使用@configurationProperties</li></ol><h1 id="5-JSR303数据校验"><a href="#5-JSR303数据校验" class="headerlink" title="5.JSR303数据校验"></a>5.JSR303数据校验</h1><p>Springboot中可以用@validated来校验数据，如果数据异常则会统一抛出异常，方便异常中心统一处理。这里来写个注解让name只能支持Email格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注册bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="meta">@Validated</span> <span class="comment">//数据校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email(message=&quot;邮箱格式错误&quot;)</span> <span class="comment">//name必须是邮箱格式</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<code>default message [不是一个合法的电子邮件地址]</code></p><p><strong>使用数据校验，可以保证数据的正确性；</strong> 下面列出一些常见的使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@NotNull(message&#x3D;&quot;名字不能为空&quot;)</span><br><span class="line">private String userName;</span><br><span class="line">@Max(value&#x3D;120,message&#x3D;&quot;年龄最大不能查过120&quot;)</span><br><span class="line">private int age;</span><br><span class="line">@Email(message&#x3D;&quot;邮箱格式错误&quot;)</span><br><span class="line">private String email;</span><br><span class="line"></span><br><span class="line">空检查</span><br><span class="line">@Null 验证对象是否为null</span><br><span class="line">@NotNull 验证对象是否不为null, 无法查检长度为0的字符串</span><br><span class="line">@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空</span><br><span class="line">格.</span><br><span class="line">@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</span><br><span class="line">Booelan检查</span><br><span class="line">@AssertTrue 验证 Boolean 对象是否为 true</span><br><span class="line">@AssertFalse 验证 Boolean 对象是否为 false</span><br><span class="line">长度检查</span><br><span class="line">@Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内</span><br><span class="line">@Length(min&#x3D;, max&#x3D;) string is between min and max included.</span><br><span class="line">日期检查</span><br><span class="line">@Past 验证 Date 和 Calendar 对象是否在当前时间之前</span><br><span class="line">@Future 验证 Date 和 Calendar 对象是否在当前时间之后</span><br><span class="line">@Pattern 验证 String 对象是否符合正则表达式的规则</span><br><span class="line">.......等等</span><br><span class="line">除此以外，我们还可以自定义一些数据校验规则</span><br></pre></td></tr></table></figure><h2 id="5-1-多环境切换"><a href="#5-1-多环境切换" class="headerlink" title="5.1.多环境切换"></a>5.1.多环境切换</h2><p>profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境</p><h3 id="5-1-1-多配置文件"><a href="#5-1-1-多配置文件" class="headerlink" title="5.1.1.多配置文件"></a>5.1.1.多配置文件</h3><p>在主配置文件编写的时候，文件名可以是<code>application-&#123;profile&#125;.properties/yml</code> , 用来指定多个环境版本。例如：<code>application-test.properties</code> 代表测试环境配置 <code>application-dev.properties</code>代表开发环境配置<br>但是Springboot并不会直接启动这些配置文件，它默认使用application.properties主配置文件。但可以通过配置来选择需要激活的环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；</span><br><span class="line">#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；</span><br><span class="line">spring.profiles.active&#x3D;dev</span><br></pre></td></tr></table></figure><h3 id="5-1-2-yml的多文档块"><a href="#5-1-2-yml的多文档块" class="headerlink" title="5.1.2.yml的多文档块"></a>5.1.2.yml的多文档块</h3><p>和properties配置文件中一样，但使用yml去实现不需要创建多个配置文件，更加方便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">port: 8081</span><br><span class="line">#选择要激活那个环境块</span><br><span class="line">spring:</span><br><span class="line">profiles:</span><br><span class="line">active: prod</span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">port: 8083</span><br><span class="line">spring:</span><br><span class="line">profiles: dev #配置环境的名称</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">server:</span><br><span class="line">port: 8084</span><br><span class="line">spring:</span><br><span class="line">profiles: prod #配置环境的名称</span><br></pre></td></tr></table></figure><p>注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的</p><h3 id="5-1-3-配置文件加载位置"><a href="#5-1-3-配置文件加载位置" class="headerlink" title="5.1.3.配置文件加载位置"></a>5.1.3.配置文件加载位置</h3><p>外部加载配置文件的方式很多，一般选择最常用的即可，在开发的资源文件中进行配置</p><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">优先级1：项目路径下的config文件夹配置文件</span><br><span class="line">优先级2：项目路径下配置文件</span><br><span class="line">优先级3：资源路径下的config文件夹配置文件</span><br><span class="line">优先级4：资源路径下配置文件</span><br></pre></td></tr></table></figure><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；<br>SpringBoot会从这四个位置全部加载主配置文件；互补配置</p><h3 id="4-4-4-运维小技巧"><a href="#4-4-4-运维小技巧" class="headerlink" title="4.4.4.运维小技巧"></a>4.4.4.运维小技巧</h3><p>指定位置加载配置文件</p><p>我们还可以通过<code>spring.config.location</code>来改变默认的配置文件位置</p><p>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；</p><p>这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar spring-boot-config.jar --spring.config.location=F:/application.properties</span><br></pre></td></tr></table></figure><h1 id="6-自动配置原理"><a href="#6-自动配置原理" class="headerlink" title="6.自动配置原理"></a>6.自动配置原理</h1><p><font color=red>—-联系—-</font> <code>spring.factories</code></p><p>SpringBoot官方文档中有大量的配置，我们无法全部记住,官网：<a href="https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties">https://docs.spring.io/spring-boot/docs/2.3.1.RELEASE/reference/html/appendix-application-properties.html#core-properties</a></p><p><img src="/images/img/blog/1595493746481.png" alt="1595493746481"></p><h2 id="6-1-分析自动配置原理"><a href="#6-1-分析自动配置原理" class="headerlink" title="6.1.分析自动配置原理"></a>6.1.分析自动配置原理</h2><ol><li><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration</p></li><li><p>@EnableAutoConfiguration 作用</p><ul><li><p>利用EnableAutoConfigurationImportSelector给容器中导入一些组件</p></li><li><p>可以查看selectImports()方法的内容,他返回了一个autoConfigurationEnty,来自<code>this.getAutoConfigurationEntry(autoConfigurationMetadata,annotationMetadata);</code>这个方法我们继续来跟踪：</p></li><li><p>这个方法有一个值：<code>List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata, attributes);</code>叫做获取候选的配置 ，我们点击继续跟踪</p><ul><li><code>SpringFactoriesLoader.loadFactoryNames()</code></li><li>扫描所有jar包类路径下<code>META-INF/spring.factories</code></li><li>把扫描到的这些文件的内容包装成properties对象</li><li>从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</li></ul></li><li><p><font color=red>在类路径下,<code>META-INF/spring.factories</code>里面配置的所有EnableAutoConfiguration的值加入到容器中：</font></p></li></ul></li></ol><p><img src="/images/img/blog/image-20211108144552231.png" alt="image-20211108144552231"></p><ol><li><ul><li>每一个这样的 xxxAutoConfiguration类都是容器中的一个<strong>组件，都加入到容器中；用他们来做自动配置；</strong></li></ul></li><li><p>每一个自动配置类进行自动配置功能；</p></li><li><p>我们以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类，和以前编写的配置文件一样，也可以给容器中添加组件；</span></span><br><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line">   </span><br><span class="line"><span class="comment">//启动指定类的ConfigurationProperties功能；</span></span><br><span class="line">  <span class="comment">//进入这个HttpProperties查看，将配置文件中对应的值和HttpProperties绑定起来；</span></span><br><span class="line">  <span class="comment">//并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;HttpProperties.class&#125;)</span> </span><br><span class="line">   </span><br><span class="line"><span class="comment">//Spring底层@Conditional注解</span></span><br><span class="line">  <span class="comment">//根据不同的条件判断，如果满足指定的条件，整个配置类里面的配置就会生效；</span></span><br><span class="line">  <span class="comment">//这里的意思就是判断当前应用是否是web应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(</span></span><br><span class="line"><span class="meta">    type = Type.SERVLET</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;CharacterEncodingFilter.class&#125;)</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//判断配置文件中是否存在某个配置：spring.http.encoding.enabled；</span></span><br><span class="line">  <span class="comment">//如果不存在，判断也是成立的</span></span><br><span class="line">  <span class="comment">//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(</span></span><br><span class="line"><span class="meta">    prefix = &quot;spring.http.encoding&quot;,</span></span><br><span class="line"><span class="meta">    value = &#123;&quot;enabled&quot;&#125;,</span></span><br><span class="line"><span class="meta">    matchIfMissing = true</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和SpringBoot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Encoding properties;</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//给容器中添加一个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span> <span class="comment">//判断容器没有这个组件？</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">        filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">        filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.REQUEST));</span><br><span class="line">        filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(org.springframework.boot.autoconfigure.http.HttpProperties.Encoding.Type.RESPONSE));</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//。。。。。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>一句话总结 ：根据当前不同的条件判断，决定这个配置类是否生效！</strong></p><ul><li><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；</p></li><li><p>这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p></li><li><p>所有在配置文件中能配置的属性都是在xxxxProperties类中封装着；</p></li><li><p>配置文件能配置什么就可以参照某个功能对应的这个属性类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>我们去配置文件里面试试前缀，看提示！</p><p><img src="/images/img/blog/1595493884773.png" alt="1595493884773"></p><p><strong>这就是自动装配的原理！</strong></p><h2 id="6-2-总结"><a href="#6-2-总结" class="headerlink" title="6.2.总结"></a>6.2.总结</h2><ol><li><p>SpringBoot启动会加载大量的自动配置类</p></li><li><p>我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；</p></li><li><p>我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）</p></li><li><p>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；</p><p><strong>xxxxAutoConfigurartion：自动配置类；</strong>给容器中添加组件</p><p><strong>xxxxProperties:封装配置文件中相关属性；</strong></p></li></ol><h2 id="6-3-Conditional"><a href="#6-3-Conditional" class="headerlink" title="6.3.@Conditional"></a>6.3.@Conditional</h2><p>了解完自动装配的原理后，我们来关注一个细节问题，<strong>自动配置类必须在一定的条件下才能生效；</strong></p><p><strong>@Conditional派生注解（<font color=red>Spring注解版原生的@Conditional作用</font>）</strong></p><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用(判断是否满足当前指定条件)</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnJava</td><td>容器中存在指定Bean ;</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean ;</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean ,或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>那么多的自动配置类，必须在一定的条件下才能生效；也就是说，我们加载了这么多的配置类，但不是所有的都生效了。</strong></p><h2 id="6-4-自动配置类是否生效"><a href="#6-4-自动配置类是否生效" class="headerlink" title="6.4.自动配置类是否生效"></a>6.4.自动配置类是否生效</h2><p><strong>我们可以在application.properties通过启用 <code>debug=true</code>属性；</strong></p><p><strong>在控制台打印自动配置报告，这样我们就可以很方便的知道哪些自动配置类生效；</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启springboot的调试类</span></span><br><span class="line"><span class="string">debug=true</span> </span><br></pre></td></tr></table></figure><ul><li><p><strong>Positive matches:（自动配置类启用的：正匹配）</strong></p></li><li><p><strong>Negative matches:（没有启动，没有匹配成功的自动配置类：负匹配）</strong></p></li><li><p><strong>Unconditional classes: （没有条件的类）</strong></p></li></ul><h2 id="6-5-自定义Starter"><a href="#6-5-自定义Starter" class="headerlink" title="6.5.自定义Starter"></a>6.5.自定义Starter</h2><p>我们分析完毕了源码以及自动装配的过程，我们可以尝试自定义一个启动器来玩玩！</p><h3 id="6-5-1-说明"><a href="#6-5-1-说明" class="headerlink" title="6.5.1.说明"></a>6.5.1.说明</h3><p>启动器模块是一个 空 jar 文件，仅提供辅助性依赖管理，这些依赖可能用于自动装配或者其他类库；</p><p><strong>命名归约：</strong></p><p>官方命名：</p><ul><li>前缀：spring-boot-starter-xxx</li><li>比如：spring-boot-starter-web….</li></ul><p>自定义命名：</p><ul><li>xxx-spring-boot-starter</li><li>比如：mybatis-spring-boot-starter</li></ul><h3 id="6-5-2-编写启动器"><a href="#6-5-2-编写启动器" class="headerlink" title="6.5.2.编写启动器"></a>6.5.2.编写启动器</h3><ol><li><p>在IDEA中新建一个空项目 spring-boot-starter-diy</p></li><li><p>新建一个普通Maven模块：kuang-spring-boot-starter</p></li><li><p>新建一个Springboot模块：kuang-spring-boot-starter-autoconfigure</p></li><li><p>点击apply即可，基本结构</p></li><li><p>在我们的 starter 中 导入  autoconfigure 的依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 启动器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  引入自动配置模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kuang-spring-boot-starter-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将 autoconfigure 项目下多余的文件都删掉，Pom中只留下一个 starter，这是所有的启动器基本配置！</p></li><li><p>我们编写一个自己的服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wyl.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloProperties <span class="title">getHelloProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHelloProperties</span><span class="params">(HelloProperties helloProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.helloProperties = helloProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloProperties.getPrefix() + name + helloProperties.getSuffix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写<code>HelloProperties</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wyl.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前缀 kuang.hello</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;kuang.hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPrefix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrefix</span><span class="params">(String prefix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefix = prefix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuffix</span><span class="params">(String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写我们的自动配置类并注入bean，测试！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wyl.ss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span> <span class="comment">//web应用生效</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(HelloProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloProperties helloProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HelloService service = <span class="keyword">new</span> HelloService();</span><br><span class="line">        service.setHelloProperties(helloProperties);</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在resources编写一个自己的 <code>META-INF\spring.factories</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">wyl.ss.HelloServiceAutoConfiguration</span><br></pre></td></tr></table></figure></li><li><p>编写完成后，可以安装到maven仓库中！</p></li></ol><h3 id="6-5-3-新建项目测试我们自己写的启动器"><a href="#6-5-3-新建项目测试我们自己写的启动器" class="headerlink" title="6.5.3.新建项目测试我们自己写的启动器"></a>6.5.3.新建项目测试我们自己写的启动器</h3><ol><li><p>新建一个SpringBoot 项目</p></li><li><p>导入我们自己写的启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wyl.ss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ss-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个 <code>HelloController</code>  进行测试我们自己的写的接口！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wyl.ss.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.sayHello(<span class="string">&quot;zxc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写配置文件 <code>application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ss.hello.prefix</span>=<span class="string">&quot;ppp&quot;</span></span><br><span class="line"><span class="meta">ss.hello.suffix</span>=<span class="string">&quot;sss&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目进行测试，结果成功 !</p></li></ol><h1 id="7-整合JDBC"><a href="#7-整合JDBC" class="headerlink" title="7.整合JDBC"></a>7.整合JDBC</h1><h2 id="7-1-SpringData简介"><a href="#7-1-SpringData简介" class="headerlink" title="7.1.SpringData简介"></a>7.1.SpringData简介</h2><p>对于数据访问层，无论是 SQL(关系型数据库) 还是 NOSQL(非关系型数据库)，Spring Boot 底层都是采用 Spring Data 的方式进行统一处理。</p><p>Spring Boot 底层都是采用 Spring Data 的方式进行统一处理各种数据库，Spring Data 也是 Spring 中与 Spring Boot、Spring Cloud 等齐名的知名项目。</p><p>Sping Data <a href="https://spring.io/projects/spring-data">官网</a></p><p>数据库相关的启动器 ：可以参考<a href="https://docs.spring.io/spring-boot/docs/2.2.5.RELEASE/reference/htmlsingle/#using-boot-starter">官方文档</a></p><h2 id="7-2-创建项目"><a href="#7-2-创建项目" class="headerlink" title="7.2.创建项目"></a>7.2.创建项目</h2><h3 id="7-2-1-新建项目测试"><a href="#7-2-1-新建项目测试" class="headerlink" title="7.2.1.新建项目测试"></a>7.2.1.新建项目测试</h3><p>引入相应的模块：Spring Web、SQL中的JDBC API、MySql Driver</p><p>项目建好之后，Spring Boot自动导入了启动器</p><h3 id="7-2-2-编写yaml配置文件，连接数据库"><a href="#7-2-2-编写yaml配置文件，连接数据库" class="headerlink" title="7.2.2.编写yaml配置文件，连接数据库"></a>7.2.2.编写yaml配置文件，连接数据库</h3><p>新建一个 application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line"><span class="attr">username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"><span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名称?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><h3 id="7-2-3-测试"><a href="#7-2-3-测试" class="headerlink" title="7.2.3.测试"></a>7.2.3.测试</h3><p>配置完这一些东西后就可以直接去使用了，SpringBoot已经默认进行了自动配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpringbootDataJdbcApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DI注入数据源</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//看一下默认数据源</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line">        <span class="comment">//获得连接</span></span><br><span class="line">        Connection connection =   dataSource.getConnection();</span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到默认配置的数据源为 <code>class com.zaxxer.hikari.HikariDataSource</code>， 我们并没有手动配置</p><p><strong>HikariDataSource 号称 Java WEB 当前速度最快的数据源，相比于传统的 C3P0 、DBCP、Tomcat jdbc 等连接池更加优秀</strong></p><p><strong>可以使用 spring.datasource.type 指定自定义的数据源类型，值为使用的连接池实现的完全限定名</strong></p><p>有了数据库连接，就可以 CRUD 操作数据库了。但需要先了解对象 JdbcTemplate</p><h3 id="7-2-4-源码"><a href="#7-2-4-源码" class="headerlink" title="7.2.4.源码"></a>7.2.4.源码</h3><p>打开 DataSourceProperties 的源码，能配置的所有东西都在这</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProperties</span> <span class="keyword">implements</span> <span class="title">BeanClassLoaderAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader classLoader;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> generateUniqueName = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">private</span> Class&lt;? extends DataSource&gt; type;</span><br><span class="line"><span class="keyword">private</span> String driverClassName;</span><br><span class="line"><span class="keyword">private</span> String url;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line">    ............</span><br></pre></td></tr></table></figure><p>打开 DataSourceAutoConfiguration 源码，数据源的所有自动配置都在这里</p><h3 id="7-2-5-JDBCTemplate"><a href="#7-2-5-JDBCTemplate" class="headerlink" title="7.2.5.JDBCTemplate"></a>7.2.5.JDBCTemplate</h3><ul><li>有了数据源(com.zaxxer.hikari.HikariDataSource)，然后可以拿到数据库连接(java.sql.Connection)，有了连接，就可以使用原生的 JDBC 语句来操作数据库</li><li>即使不使用第三方第数据库操作框架，如 MyBatis等，Spring 本身也对原生的JDBC 做了轻量级的封装，即JdbcTemplate。</li><li>数据库操作的所有 CRUD 方法都在 JdbcTemplate 中。</li><li>Spring Boot 不仅提供了默认的数据源，同时默认已经配置好了 JdbcTemplate 放在了容器中，程序员只需自己注入即可使用</li><li>JdbcTemplate 的自动配置是依赖 org.springframework.boot.autoconfigure.jdbc 包下的 JdbcTemplateConfiguration 类</li></ul><p><strong>JdbcTemplate主要提供以下几类方法：</strong></p><ul><li>execute方法：可以用于执行任何SQL语句，一般用于执行DDL语句；</li><li>update方法及batchUpdate方法：update方法用于执行新增、修改、删除等语句；batchUpdate方法用于执行批处理相关语句；</li><li>query方法及queryForXXX方法：用于执行查询相关语句；</li><li>call方法：用于执行存储过程、函数相关语句。</li></ul><p>测试</p><p>新建一个 controller 目录，在里面编写一个 JdbcController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/jdbc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring Boot 默认提供了数据源，默认提供了 org.springframework.jdbc.core.JdbcTemplate</span></span><br><span class="line"><span class="comment">     * JdbcTemplate 中会自己注入数据源，用于简化 JDBC操作</span></span><br><span class="line"><span class="comment">     * 还能避免一些常见的错误,使用起来也不用再自己来关闭数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="comment">//查询employee表中所有数据</span></span><br><span class="line">    <span class="comment">//List 中的1个 Map 对应数据库的 1行数据</span></span><br><span class="line">    <span class="comment">//Map 中的 key 对应数据库的字段名，value 对应数据库的字段值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList()&#123;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新增一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//插入语句，注意时间问题</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into mybatis.user(id, name,pwd)&quot;</span> +</span><br><span class="line">            <span class="string">&quot; values (9,&#x27;Java编程思想&#x27;,&#x27;qqwweer987&#x27;)&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addOk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改用户信息</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/update/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//插入语句</span></span><br><span class="line">        String sql = <span class="string">&quot;update mybatis.user set name=?,pwd=? where id=&quot;</span>+id;</span><br><span class="line">        <span class="comment">//数据封装</span></span><br><span class="line">        Object[] objects = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">        objects[<span class="number">0</span>] = <span class="string">&quot;大威天龙&quot;</span>;</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="string">&quot;qwert123&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,objects);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;update-Ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delUser</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//插入语句</span></span><br><span class="line">        String sql = <span class="string">&quot;delete from mybatis.user where id=?&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,id);</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;delete-Ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-集成-druid"><a href="#8-集成-druid" class="headerlink" title="8.集成 druid"></a>8.集成 druid</h1><h2 id="8-1-druid简介"><a href="#8-1-druid简介" class="headerlink" title="8.1.druid简介"></a>8.1.druid简介</h2><ul><li><p>Java程序很大一部分要操作数据库，为了提高性能操作数据库的时候，又不得不使用数据库连接池。</p></li><li><p>Druid 是阿里巴巴开源平台上一个数据库连接池实现，结合了 C3P0、DBCP 等 DB 池的优点，同时加入了日志监控。</p></li><li><p>Druid 可以很好的监控 DB 池连接和 SQL 的执行情况，天生就是针对监控而生的 DB 连接池。</p></li><li><p>Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。</p></li><li><p>Spring Boot 2.0 以上默认使用 Hikari 数据源，可以说 Hikari 与 Driud 都是当前 Java Web 上最优秀的数据源，我们来重点介绍 Spring Boot 如何集成 Druid 数据源，如何实现数据库监控。</p></li><li><p>Github地址：<a href="https://github.com/alibaba/druid/">https://github.com/alibaba/druid/</a></p></li></ul><h2 id="8-2-配置"><a href="#8-2-配置" class="headerlink" title="8.2.配置"></a>8.2.配置</h2><p>　　加入druid相关配置(.yml配置文件）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springboot?serverTimezone=GMT%2B8&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">        <span class="comment"># 初始连接数</span></span><br><span class="line">        <span class="attr">initial-size:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 最大连接池数量</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="comment"># 最小连接池数量</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span></span><br><span class="line">        <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line">        <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">        <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">        <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">        <span class="attr">validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">        <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">stat-view-servlet:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">            <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">filter:</span></span><br><span class="line">            <span class="attr">stat:</span></span><br><span class="line">                <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">                <span class="attr">slow-sql-millis:</span> <span class="number">1000</span></span><br><span class="line">                <span class="attr">merge-sql:</span> <span class="literal">false</span></span><br><span class="line">            <span class="attr">wall:</span></span><br><span class="line">                <span class="attr">config:</span></span><br><span class="line">                    <span class="attr">multi-statement-allow:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>　<strong>com.alibaba.druid.pool.DruidDataSource 基本配置参数如下：</strong></p><table><thead><tr><th align="center"><strong>配置</strong></th><th align="center"><strong>缺省值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">name</td><td align="center"></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。 如果没有配置，将会生成一个名字，格式是：“DataSource-” + System.identityHashCode(this)</td></tr><tr><td align="center">jdbcUrl</td><td align="center"></td><td>连接数据库的url，不同数据库不一样。例如： mysql : jdbc:mysql://10.20.153.104:3306/druid2 oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td align="center">username</td><td align="center"></td><td>连接数据库的用户名</td></tr><tr><td align="center">password</td><td align="center"></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td align="center">driverClassName</td><td align="center">根据url自动识别</td><td>这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td align="center">initialSize</td><td align="center">0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td align="center">maxActive</td><td align="center">8</td><td>最大连接池数量</td></tr><tr><td align="center">maxIdle</td><td align="center">8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td align="center">minIdle</td><td align="center"></td><td>最小连接池数量</td></tr><tr><td align="center">maxWait</td><td align="center"></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td align="center">poolPreparedStatements</td><td align="center">false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td align="center">maxOpenPreparedStatements</td><td align="center">-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td align="center">validationQuery</td><td align="center"></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td align="center">validationQueryTimeout</td><td align="center"></td><td>单位:秒，检测连接是否有效的超时时间。底层调用jdbc<br/>Statement对象的void setQueryTimeout(int seconds)方法</td></tr><tr><td align="center">testOnBorrow</td><td align="center">true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td align="center">testOnReturn</td><td align="center">false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td align="center">testWhileIdle</td><td align="center">false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</td></tr><tr><td align="center">timeBetweenEvictionRunsMillis</td><td align="center">1分钟<br/>( 1.0.14 )</td><td>有两个含义： 1) Destroy线程会检测连接的间隔时间 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td align="center">numTestsPerEvictionRun</td><td align="center"></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td align="center">minEvictableIdleTimeMillis</td><td align="center">30分钟<br/>( 1.0.14 )</td><td>连接保持空闲而不被驱逐的最长时间</td></tr><tr><td align="center">connectionInitSqls</td><td align="center"></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td align="center">exceptionSorter</td><td align="center">根据dbType自动识别</td><td>当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td align="center">filters</td><td align="center"></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td align="center">proxyFilters</td><td align="center"></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><p>引入druid依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 项目启动后可通过show processlist查看mysql的全部线程是否和配置的initial-size一致。</p><h2 id="8-3-druid监控测试"><a href="#8-3-druid监控测试" class="headerlink" title="8.3.druid监控测试"></a>8.3.druid监控测试</h2><p>访问ip:port/druid验证即可，url中的/druid要和配置文件中的url-pattern一致</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stat-view-servlet:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/img/blog/761230-20190216163946323-1376874357.png" alt="img"></p><h1 id="9-整合mybatis"><a href="#9-整合mybatis" class="headerlink" title="9.整合mybatis"></a>9.整合mybatis</h1><h2 id="9-1-导入-MyBatis-所需要的依赖"><a href="#9-1-导入-MyBatis-所需要的依赖" class="headerlink" title="9.1.导入 MyBatis 所需要的依赖"></a>9.1.导入 MyBatis 所需要的依赖</h2>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-配置数据库连接信息"><a href="#9-2-配置数据库连接信息" class="headerlink" title="9.2.配置数据库连接信息"></a>9.2.配置数据库连接信息</h2>   <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">    <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br></pre></td></tr></table></figure><h2 id="9-3-创建实体类"><a href="#9-3-创建实体类" class="headerlink" title="9.3.创建实体类"></a>9.3.创建实体类</h2>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-创建mapper"><a href="#9-4-创建mapper" class="headerlink" title="9.4.创建mapper"></a>9.4.创建mapper</h2><p><code>UserMapper.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个注解表示了这是一个 mybatis 的 mapper 类</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">queryUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li><p><strong>对应的Mapper映射文件</strong></p><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wyl.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        update mybatis.user set name=#&#123;name&#125;,pwd = #&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from mybatis.user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>maven配置资源过滤问题</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>编写部门的 UserController 进行测试！</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/queryUserList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.queryUserList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.addUser(<span class="keyword">new</span> User(<span class="number">7</span>,<span class="string">&quot;wyl&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.updateUser(<span class="keyword">new</span> User(<span class="number">7</span>,<span class="string">&quot;wjm&quot;</span>,<span class="string">&quot;123456&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userMapper.deleteUser(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>启动项目访问进行测试！</strong></p><h2 id="9-5-分页"><a href="#9-5-分页" class="headerlink" title="9.5.分页"></a>9.5.分页</h2><h3 id="添加相关依赖"><a href="#添加相关依赖" class="headerlink" title="添加相关依赖"></a>添加相关依赖</h3><p>首先，我们需要在 pom.xml 文件中添加分页插件依赖包。</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pagehelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h3><p>然后在 application.yml 配置文件中添加分页插件有关的配置。</p><p>application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pagehelper   </span></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">    <span class="attr">helperDialect:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">params:</span> <span class="string">count=countSql</span></span><br></pre></td></tr></table></figure><h3 id="编写分页代码"><a href="#编写分页代码" class="headerlink" title="编写分页代码"></a>编写分页代码</h3><p>首先，在 DAO 层添加一个分页查找方法。这个查询方法跟查询全部数据的方法除了名称几乎一样。</p><p>SysUserMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.model.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(SysUser record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertSelective</span><span class="params">(SysUser record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SysUser <span class="title">selectByPrimaryKey</span><span class="params">(Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKeySelective</span><span class="params">(SysUser record)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateByPrimaryKey</span><span class="params">(SysUser record)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SysUser&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SysUser&gt; <span class="title">selectPage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 SysUserMapper.xml 中加入selectPage的实现，当然你也可以直接用@Select注解将查询语句直接写在DAO代码，但我们这里选择写在XML映射文件，这是一个普通的查找全部记录的查询语句，并不需要写分页SQL，分页插件会拦截查询请求，并读取前台传来的分页查询参数重新生成分页查询语句。</p><p>SysUserMapper.xml</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;selectPage&quot;</span>  resultMap=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span><br><span class="line">  select </span><br><span class="line">  &lt;include refid=<span class="string">&quot;Base_Column_List&quot;</span> /&gt;</span><br><span class="line">  from sys_user</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>服务层通过调用DAO层代码完成分页查询，这里统一封装分页查询的请求和结果类，从而避免因为替换ORM框架而导致服务层、控制层的分页接口也需要变动的情况，替换ORM框架也不会影响服务层以上的分页接口，起到了解耦的作用。</p><p>SysUserService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.model.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查找用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SysUser <span class="title">findByUserId</span><span class="params">(Long userId)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找所有用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SysUser&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询接口</span></span><br><span class="line"><span class="comment">     * 这里统一封装了分页请求和结果，避免直接引入具体框架的分页对象, 如MyBatis或JPA的分页对象</span></span><br><span class="line"><span class="comment">     * 从而避免因为替换ORM框架而导致服务层、控制层的分页接口也需要变动的情况，替换ORM框架也不会</span></span><br><span class="line"><span class="comment">     * 影响服务层以上的分页接口，起到了解耦的作用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageRequest 自定义，统一分页查询请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> PageResult 自定义，统一分页查询结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">PageResult <span class="title">findPage</span><span class="params">(PageRequest pageRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务实现类通过调用分页插件完成最终的分页查询，关键代码是 PageHelper.startPage(pageNum, pageSize)，将前台分页查询参数传入并拦截MyBtis执行实现分页效果。</p><p>SysUserServiceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</span><br><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.dao.SysUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.model.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageRequest;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageResult;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper sysUserMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">findByUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserMapper.selectByPrimaryKey(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PageResult <span class="title">findPage</span><span class="params">(PageRequest pageRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PageUtils.getPageResult(pageRequest, getPageInfo(pageRequest));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用分页插件完成分页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PageInfo&lt;SysUser&gt; <span class="title">getPageInfo</span><span class="params">(PageRequest pageRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pageNum = pageRequest.getPageNum();</span><br><span class="line">        <span class="keyword">int</span> pageSize = pageRequest.getPageSize();</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;SysUser&gt; sysMenus = sysUserMapper.selectPage();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;SysUser&gt;(sysMenus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器SysUserController中添加分页查询方法，并调用服务层的分页查询方法。</p><p>SysUserController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.service.SysUserService;</span><br><span class="line"><span class="keyword">import</span> com.louis.springboot.demo.util.PageRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/findByUserId&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findByUserId</span><span class="params">(<span class="meta">@RequestParam</span> Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.findByUserId(userId);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value=&quot;/findPage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">findPage</span><span class="params">(<span class="meta">@RequestBody</span> PageRequest pageQuery)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.findPage(pageQuery);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询请求封装类。</p><p>PageRequest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageRequest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageNum</span><span class="params">(<span class="keyword">int</span> pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNum = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询结果封装类。</p><p>PageResult.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResult</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每页数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> totalSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页码总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> totalPages;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据模型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;?&gt; content;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageNum</span><span class="params">(<span class="keyword">int</span> pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageNum = pageNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTotalSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalSize</span><span class="params">(<span class="keyword">long</span> totalSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalSize = totalSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> totalPages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTotalPages</span><span class="params">(<span class="keyword">int</span> totalPages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.totalPages = totalPages;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;?&gt; getContent() &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(List&lt;?&gt; content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分页查询相关工具类。</p><p>PageUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.pagehelper.PageInfo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将分页信息封装到统一的接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageRequest </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PageResult <span class="title">getPageResult</span><span class="params">(PageRequest pageRequest, PageInfo&lt;?&gt; pageInfo)</span> </span>&#123;</span><br><span class="line">        PageResult pageResult = <span class="keyword">new</span> PageResult();</span><br><span class="line">        pageResult.setPageNum(pageInfo.getPageNum());</span><br><span class="line">        pageResult.setPageSize(pageInfo.getPageSize());</span><br><span class="line">        pageResult.setTotalSize(pageInfo.getTotal());</span><br><span class="line">        pageResult.setTotalPages(pageInfo.getPages());</span><br><span class="line">        pageResult.setContent(pageInfo.getList());</span><br><span class="line">        <span class="keyword">return</span> pageResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译测试运行"><a href="#编译测试运行" class="headerlink" title="编译测试运行"></a>编译测试运行</h3><p>启动应用，访问：localhost:8088/swagger-ui.html，找到对应接口，模拟测试，结果如下。</p><p>参数：pageNum: 1, pageSize: 5</p><h1 id="10-事务管理"><a href="#10-事务管理" class="headerlink" title="10.事务管理"></a>10.事务管理</h1><p>SpringBoot 使用事务非常简单，底层依然采用的是Spring本身提供的事务管理</p><p>• 在入口类中使用注解 @EnableTransactionManagement 开启事务支持</p><p>• 在访问数据库的Service方法上添加注解 @Transactional 即可</p><p>案例思路</p><p>通过SpringBoot +MyBatis实现对数据库学生表的更新操作，在service层的方法中构建异常，查看事务是否生效；</p><p>项目名称：springboot–transacation</p><h2 id="10-1-实现步骤"><a href="#10-1-实现步骤" class="headerlink" title="10.1.实现步骤"></a>10.1.实现步骤</h2><h3 id="10-1-1-StudentController"><a href="#10-1-1-StudentController" class="headerlink" title="10.1.1.StudentController"></a>10.1.1.StudentController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/springBoot/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;Mark&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> updateCount = studentService.update(student);</span><br><span class="line">        <span class="keyword">return</span> updateCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-2-StudentService接口"><a href="#10-1-2-StudentService接口" class="headerlink" title="10.1.2.StudentService接口"></a>10.1.2.StudentService接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据学生标识更新学生信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> student</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-3-StudentServiceImpl"><a href="#10-1-3-StudentServiceImpl" class="headerlink" title="10.1.3.StudentServiceImpl"></a>10.1.3.StudentServiceImpl</h3><p>接口实现类中对更新学生方法进行实现，并构建一个异常，同时在该方法上加@Transactional注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">//添加此注解说明该方法添加的事务管理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> updateCount = studentMapper.updateByPrimaryKeySelective(student);</span><br><span class="line">    System.out.println(<span class="string">&quot;更新结果：&quot;</span> + updateCount);</span><br><span class="line">    <span class="comment">//在此构造一个除数为0的异常，测试事务是否起作用</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>/<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> updateCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-4-Application"><a href="#10-1-4-Application" class="headerlink" title="10.1.4.Application"></a>10.1.4.Application</h3><p>在类上加@EnableTransactionManagement开启事务支持</p><p>@EnableTransactionManagement可选，<strong>但是@Service必须添加事务才生效</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//SpringBoot开启事务的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-1-5-启动Application"><a href="#10-1-5-启动Application" class="headerlink" title="10.1.5.启动Application"></a>10.1.5.启动Application</h3><p>1.查看数据库，并没有修改数据，通过以上结果，说明事务起作用了。</p><p>2.<strong>注释掉StudentServiceImpl上的@Transactional</strong>测试—-数据库发上来改变。</p><h1 id="11-SpringMVC注解"><a href="#11-SpringMVC注解" class="headerlink" title="11.SpringMVC注解"></a>11.SpringMVC注解</h1><p>SpringBoot下的SpringMVC和之前的SpringMVC使用是完全一样的，主要有以下注解：</p><p><strong>1.@Controller</strong></p><p>Spring MVC的注解，处理http请求</p><p><strong>2.@RestController</strong></p><p>Spring4后新增注解，是@Controller注解功能的增强，是@Controller与@ResponseBody的组合注解；</p><p>如果一个Controller类添加了@RestController，那么该Controller类下的所有方法都相当于添加了@ResponseBody注解；</p><p>用于返回字符串或json数据。</p><p>案例：</p><p>• 创建MyUserController类，演示@RestController替代@Controller + @ResponseBody</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/getUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getUser(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.@RequestMapping(常用)</strong></p><p>支持Get请求，也支持Post请求</p><p><strong>4.@GetMapping</strong></p><p>RequestMapping和Get请求方法的组合只支持Get请求；Get请求主要用于查询操作。</p><p><strong>5.@PostMapping</strong></p><p>RequestMapping和Post请求方法的组合只支持Post请求；Post请求主要用户新增数据。</p><p><strong>6.@PutMapping</strong></p><p>RequestMapping和Put请求方法的组合只支持Put请求；Put通常用于修改数据。</p><p><strong>7.@DeleteMapping</strong></p><p>RequestMapping 和 Delete请求方法的组合只支持Delete请求；通常用于删除数据。</p><h1 id="12-RESTful实现"><a href="#12-RESTful实现" class="headerlink" title="12.RESTful实现"></a>12.RESTful实现</h1><p>Spring boot开发RESTFul 主要是几个注解实现：</p><p>@PathVariable：获取url中的数据，该注解是实现RESTFul最主要的一个注解。</p><p>@PostMapping：接收和处理Post方式的请求</p><p>@DeleteMapping：接收delete方式的请求，可以使用GetMapping代替</p><p>@PutMapping：接收put方式的请求，可以用PostMapping代替</p><p>@GetMapping：接收get方式的请求</p><p><strong>RESTful的优点</strong></p><p>• 轻量，直接基于http，不再需要任何别的诸如消息协议，get/post/put/delete为CRUD操作</p><p>• 面向资源，一目了然，具有自解释性。</p><p>• 数据描述简单，一般以xml，json做数据交换。</p><p>• 无状态，在调用一个接口(访问、操作资源)的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了复杂度。</p><p>• 简单、低耦合</p><h2 id="12-1-案例"><a href="#12-1-案例" class="headerlink" title="12.1.案例"></a>12.1.案例</h2><p>使用RESTful风格模拟实现对学生的增删改查操作</p><p>该项目集成了MyBatis、spring、SpringMVC，通过模拟实现对学生的增删改查操作。</p><p>1.创建RESTfulController，并编写代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTfulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加学生</span></span><br><span class="line"><span class="comment">     * 请求地址：http://localhost:8080/springboot-restful/springBoot/student/wyl/23</span></span><br><span class="line"><span class="comment">     * 请求方式：POST</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/springBoot/student/&#123;name&#125;/&#123;age&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">addStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class="line">        Map retMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        retMap.put(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        retMap.put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">        <span class="keyword">return</span> retMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除学生</span></span><br><span class="line"><span class="comment">     * 请求地址：http://localhost:8080/springboot-restful/springBoot/student/1</span></span><br><span class="line"><span class="comment">     * 请求方式：Delete</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;删除的学生id为：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改学生信息</span></span><br><span class="line"><span class="comment">     * 请求地址：http://localhost:8080/springboot-restful/springBoot/student/2</span></span><br><span class="line"><span class="comment">     * 请求方式：Put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">modifyStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;修改学生的id为&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/springBoot/student/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">queryStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;查询学生的id为&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-2-RESTful原则"><a href="#12-2-RESTful原则" class="headerlink" title="12.2.RESTful原则"></a>12.2.RESTful原则</h2><p>• 增post请求、删delete请求、改put请求、查get请求</p><p>• 请求路径不要出现动词</p><p>例如：查询订单接口</p><p>/boot/order/1021/1(推荐)</p><p>/boot/queryOrder/1021/1(不推荐)</p><p>• 分页、排序等操作，不需要使用斜杠传参数</p><p>例如：订单列表接口 /boot/orders?page=1&amp;sort=desc</p><p>一般传的参数不是数据库表的字段，可以不采用斜杠</p><h1 id="13-静态资源处理"><a href="#13-静态资源处理" class="headerlink" title="13.静态资源处理"></a>13.静态资源处理</h1><h2 id="13-1-对哪些目录映射？"><a href="#13-1-对哪些目录映射？" class="headerlink" title="13.1.对哪些目录映射？"></a>13.1.对哪些目录映射？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">classpath:&#x2F;META-INF&#x2F;resources&#x2F; </span><br><span class="line">classpath:&#x2F;resources&#x2F;</span><br><span class="line">classpath:&#x2F;static&#x2F; </span><br><span class="line">classpath:&#x2F;public&#x2F;</span><br><span class="line">&#x2F;：当前项目的根路径</span><br></pre></td></tr></table></figure><p>就我们在上面五个目录下放静态资源（比如：a.png等），可以直接访问（<a href="http://localhost:8080/a.png%EF%BC%89%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8E%E4%BB%A5%E5%89%8Dweb%E9%A1%B9%E7%9B%AE%E7%9A%84webapp%E4%B8%8B%EF%BC%9B%E6%94%BE%E5%88%B0%E5%85%B6%E4%BB%96%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%97%A0%E6%B3%95%E8%A2%AB%E8%AE%BF%E9%97%AE%E3%80%82">http://localhost:8080/a.png），类似于以前web项目的webapp下；放到其他目录下无法被访问。</a></p><p><strong>优先级：resources &gt; static（默认） &gt; public</strong></p><h2 id="13-2-源码分析"><a href="#13-2-源码分析" class="headerlink" title="13.2.源码分析"></a>13.2.源码分析</h2><p>SpringBoot自动配置的<code>WebMvcAutoConfiguration.java</code>类</p><ul><li><p>SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；</p></li><li><p>我们可以去看看 WebMvcAutoConfigurationAdapter 中有很多配置方法；</p></li><li><p>有一个方法：addResourceHandlers 添加资源处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        <span class="comment">// 已禁用默认资源处理</span></span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存控制</span></span><br><span class="line">    Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">    CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">    <span class="comment">// webjars 配置</span></span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                                             .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>)</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态资源配置</span></span><br><span class="line">    String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">    <span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">                                             .addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">                                             .setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读一下源代码：比如所有的<code> /webjars/**</code> ， 都需要去 <code>classpath:/META-INF/resources/webjars/</code> 找对应的资源；</p></li></ul><h3 id="13-2-1-什么是webjars-呢？"><a href="#13-2-1-什么是webjars-呢？" class="headerlink" title="13.2.1.什么是webjars 呢？"></a>13.2.1.什么是webjars 呢？</h3><p>Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。</p><h3 id="13-2-2-第一种静态资源映射规则"><a href="#13-2-2-第一种静态资源映射规则" class="headerlink" title="13.2.2.第一种静态资源映射规则"></a>13.2.2.第一种静态资源映射规则</h3><p>使用SpringBoot需要使用Webjars，我们可以去搜索一下：</p><p>网站：<a href="https://www.webjars.org/">https://www.webjars.org</a> </p><p>要使用jQuery，我们只要要引入jQuery对应版本的pom依赖即可！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导入完毕，查看webjars目录结构，并访问Jquery.js文件！</p><p>访问：只要是静态资源，SpringBoot就会去对应的路径寻找资源，我们这里访问：<a href="http://localhost:8080/webjars/jquery/3.4.1/jquery.js">http://localhost:8080/webjars/jquery/3.4.1/jquery.js</a></p><p><img src="/images/img/blog/1595506019658.png" alt="1595506019658"></p><h3 id="13-2-3-第二种静态资源映射规则"><a href="#13-2-3-第二种静态资源映射规则" class="headerlink" title="13.2.3.第二种静态资源映射规则"></a>13.2.3.第二种静态资源映射规则</h3><p>1、那我们项目中要是使用自己的静态资源该怎么导入呢？我们看下一行代码；</p><p><img src="/images/img/blog/1595516976999.png" alt="1595516976999"></p><p>2、我们去找<code>staticPathPattern</code>发现第二种映射规则 ：/** , 访问当前的项目任意资源，它会去找 <code>resourceProperties</code> 这个类，我们可以点进去看一下分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进入方法</span></span><br><span class="line"><span class="keyword">public</span> String[] getStaticLocations() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.staticLocations;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到对应的值</span></span><br><span class="line"><span class="keyword">private</span> String[] staticLocations = CLASSPATH_RESOURCE_LOCATIONS;</span><br><span class="line"><span class="comment">// 找到路径</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS = &#123; </span><br><span class="line">    <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>,</span><br><span class="line">  <span class="string">&quot;classpath:/resources/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/static/&quot;</span>, </span><br><span class="line">    <span class="string">&quot;classpath:/public/&quot;</span> </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3、ResourceProperties 可以设置和我们静态资源有关的参数；这里面指向了它会去寻找资源的文件夹，即上面数组的内容。</p><p>4、所以得出结论，以下四个目录存放的静态资源可以被我们识别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;classpath:/META-INF/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/resources/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/static/&quot;</span></span><br><span class="line"><span class="string">&quot;classpath:/public/&quot;</span></span><br></pre></td></tr></table></figure><p>5、我们可以在resources根目录下新建对应的文件夹，都可以存放我们的静态文件；</p><p><img src="/images/img/blog/1595517831392.png" alt="1595517831392"></p><p>6、比如我们访问 <a href="http://localhost:8080/1.js">http://localhost:8080/1.js</a> , 他就会去这些文件夹中寻找对应的静态资源文件；</p><p><img src="/images/img/blog/1595517869049.png" alt="1595517869049"></p><h3 id="13-2-4-引用"><a href="#13-2-4-引用" class="headerlink" title="13.2.4.引用"></a>13.2.4.引用</h3><p>不用写static 路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/layui/css/layui.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/easyui/default/easyui.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/layui/jquery-1.10.2.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/easyui/jquery.easyui.min.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="13-3-自定义静态资源路径"><a href="#13-3-自定义静态资源路径" class="headerlink" title="13.3.自定义静态资源路径"></a>13.3.自定义静态资源路径</h2><p>首先，自定义会覆盖默认！所以没十足把握的情况下，不建议覆盖，但可以添加。<br>两种方式</p><h3 id="13-3-1-配置类代码实现"><a href="#13-3-1-配置类代码实现" class="headerlink" title="13.3.1.配置类代码实现"></a>13.3.1.配置类代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;         </span><br><span class="line">    registry.addResourceHandler(<span class="string">&quot;/**&quot;</span>).addResourceLocations(<span class="string">&quot;file:F:/AppFiles/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-3-2-配置文件"><a href="#13-3-2-配置文件" class="headerlink" title="13.3.2.配置文件"></a>13.3.2.配置文件</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.resources.static-locations</span>=<span class="string">classpath:/META-INF/resources/,classpath:/resources/,\</span></span><br><span class="line">  <span class="attr">classpath</span>:<span class="string">/static/,classpath:/public/,file:c:/appfiles/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="13-3-3-相对路径配置"><a href="#13-3-3-相对路径配置" class="headerlink" title="13.3.3.相对路径配置"></a>13.3.3.相对路径配置</h3><p>以上的情况均是绝对路径，受限于环境，开发生产LinuxWin等。这种变化情况多，建议理清思路，再决定是否适用。</p><p>解决方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String gitPath = path.getParentFile().getParentFile().getParent() </span><br><span class="line">+ File.separator + <span class="string">&quot;logistics&quot;</span> + File.separator + <span class="string">&quot;uploads&quot;</span> </span><br><span class="line">+ File.separator;</span><br></pre></td></tr></table></figure><p><strong>工具类</strong></p><p>spring框架自带的<code>ResourceUtils</code>，或者结合第三方工具</p><h3 id="13-3-4-欢迎页与图标"><a href="#13-3-4-欢迎页与图标" class="headerlink" title="13.3.4. 欢迎页与图标"></a>13.3.4. 欢迎页与图标</h3><p><img src="/images/img/blog/image-20211108162103407.png" alt="image-20211108162103407"></p><h1 id="14-国际化"><a href="#14-国际化" class="headerlink" title="14.国际化"></a>14.国际化</h1><p>国际化（Internationalization 简称 I18n，其中“I”和“n”分别为首末字符，18 则为中间的字符数）是指软件开发时应该具备支持多种语言和地区的功能。换句话说就是，开发的软件需要能同时应对不同国家和地区的用户访问，并根据用户地区和语言习惯，提供相应的、符合用具阅读习惯的页面和数据，例如，为中国用户提供汉语界面显示，为美国用户提供提供英语界面显示。</p><p>在 Spring 项目中实现国际化，通常需要以下 3 步：</p><ol><li>编写国际化资源（配置）文件；</li><li>使用 ResourceBundleMessageSource 管理国际化资源文件；</li><li>在页面获取国际化内容。</li></ol><h2 id="14-1-编写国际化资源文件"><a href="#14-1-编写国际化资源文件" class="headerlink" title="14.1. 编写国际化资源文件"></a>14.1. 编写国际化资源文件</h2><p>在 Spring Boot 的类路径下创建国际化资源文件，文件名格式为：基本名_语言代码_国家或地区代码，例如 login_en_US.properties、login_zh_CN.properties。</p><p>以 spring-boot-springmvc-demo1为例，在 src/main/resources 下创建一个 i18n 的目录，并在该目录中按照国际化资源文件命名格式分别创建以下三个文件，</p><ul><li>login.properties：无语言设置时生效</li><li>login_en_US.properties ：英语时生效</li><li>login_zh_CN.properties：中文时生效<br>以上国际化资源文件创建完成后，IDEA 会自动识别它们，并转换成如下的模式：</li></ul><p><img src="/images/img/blog/1601333623-0.png" alt="img"></p><p>打开任意一个国际化资源文件，并切换为 Resource Bundle 模式，然后点击“+”号，创建所需的国际化属性，如下图。</p><p><img src="/images/img/blog/1601333350-1.png" alt="国际化配置文件"></p><h2 id="14-2-配置文件生效探究"><a href="#14-2-配置文件生效探究" class="headerlink" title="14.2.配置文件生效探究"></a>14.2.配置文件生效探究</h2><p>Spring Boot 已经对 ResourceBundleMessageSource 提供了默认的自动配置。</p><p>Spring Boot 通过 MessageSourceAutoConfiguration 对 ResourceBundleMessageSource 提供了默认配置，其部分源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = AbstractApplicationContext.MESSAGE_SOURCE_BEAN_NAME, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@Conditional(org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration.ResourceBundleCondition.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Resource[] NO_RESOURCES = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将 MessageSourceProperties 以组件的形式添加到容器中</span></span><br><span class="line">    <span class="comment">// MessageSourceProperties 下的每个属性都与以 spring.messages 开头的属性对应</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSourceProperties <span class="title">messageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageSourceProperties();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring Boot 会从容器中获取 MessageSourceProperties</span></span><br><span class="line">    <span class="comment">// 读取国际化资源文件的 basename（基本名）、encoding（编码）等信息</span></span><br><span class="line">    <span class="comment">// 并封装到 ResourceBundleMessageSource 中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageSource <span class="title">messageSource</span><span class="params">(MessageSourceProperties properties)</span> </span>&#123;</span><br><span class="line">        ResourceBundleMessageSource messageSource = <span class="keyword">new</span> ResourceBundleMessageSource();</span><br><span class="line">        <span class="comment">//读取国际化资源文件的 basename (基本名),并封装到 ResourceBundleMessageSource 中</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(properties.getBasename())) &#123;</span><br><span class="line">            messageSource.setBasenames(StringUtils</span><br><span class="line">                    .commaDelimitedListToStringArray(StringUtils.trimAllWhitespace(properties.getBasename())));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//读取国际化资源文件的 encoding (编码),并封装到 ResourceBundleMessageSource 中</span></span><br><span class="line">        <span class="keyword">if</span> (properties.getEncoding() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setDefaultEncoding(properties.getEncoding().name());</span><br><span class="line">        &#125;</span><br><span class="line">        messageSource.setFallbackToSystemLocale(properties.isFallbackToSystemLocale());</span><br><span class="line">        Duration cacheDuration = properties.getCacheDuration();</span><br><span class="line">        <span class="keyword">if</span> (cacheDuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            messageSource.setCacheMillis(cacheDuration.toMillis());</span><br><span class="line">        &#125;</span><br><span class="line">        messageSource.setAlwaysUseMessageFormat(properties.isAlwaysUseMessageFormat());</span><br><span class="line">        messageSource.setUseCodeAsDefaultMessage(properties.isUseCodeAsDefaultMessage());</span><br><span class="line">        <span class="keyword">return</span> messageSource;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上源码可知：<br>Spring Boot 将 MessageSourceProperties 以组件的形式添加到容器中；<br>MessageSourceProperties 的属性与配置文件中以“spring.messages”开头的配置进行了绑定；<br>Spring Boot 从容器中获取 MessageSourceProperties 组件，并从中读取国际化资源文件的 basename（文件基本名）、encoding（编码）等信息，将它们封装到 ResourceBundleMessageSource 中；<br>Spring Boot 将 ResourceBundleMessageSource 以组件的形式添加到容器中，进而实现对国际化资源文件的管理。</p><p>查看 MessageSourceProperties 类，其代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageSourceProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String basename = <span class="string">&quot;messages&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Charset encoding;</span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">private</span> Duration cacheDuration;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> fallbackToSystemLocale;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> alwaysUseMessageFormat;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> useCodeAsDefaultMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageSourceProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.encoding = StandardCharsets.UTF_8;</span><br><span class="line">        <span class="keyword">this</span>.fallbackToSystemLocale = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.alwaysUseMessageFormat = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.useCodeAsDefaultMessage = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们可以得到以下 3 点信息：</p><ul><li>MessageSourceProperties 为 basename、encoding 等属性提供了默认值；</li><li>basename 表示国际化资源文件的基本名，其默认取值为“message”，即 Spring Boot 默认会获取类路径下的 message.properties 以及 message_XXX.properties 作为国际化资源文件；</li><li>在 application.porperties/yml 等配置文件中，使用配置参数“spring.messages.basename”即可重新指定国际化资源文件的基本名。</li></ul><p>通过以上源码分析可知，Spring Boot 已经对国际化资源文件的管理提供了默认自动配置，我们这里只需要在 Spring Boot 全局配置文件中，使用配置参数“spring.messages.basename”指定我们自定义的国际资源文件的基本名即可，代码如下（当指定多个资源文件时，用逗号分隔）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.messages.basename=i18n.login</span><br></pre></td></tr></table></figure><h2 id="14-3-获取国际化内容"><a href="#14-3-获取国际化内容" class="headerlink" title="14.3. 获取国际化内容"></a>14.3. 获取国际化内容</h2><p>由于页面使用的是 Tymeleaf 模板引擎，因此我们可以通过表达式 #{…} 获取国际化内容。</p><p>以 spring-boot-adminex 为例，在 login.html 中获取国际化内容，代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ThemeBucket&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;shortcut icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将js css 等静态资源的引用修改为 绝对路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/style.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/style-responsive.css&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/css/style-responsive.css&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &lt;script src=&quot;js/html5shiv.js&quot; th:src=&quot;@&#123;/js/html5shiv.js&#125;&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;script src=&quot;js/respond.min.js&quot; th:src=&quot;@&#123;/js/respond.min.js&#125;&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">&quot;login-body&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;form-signin&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/user/login&#125;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-signin-heading text-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;sign-title&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.btn&#125;&quot;</span>&gt;</span>Sign In<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/images/login-logo.png&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/images/login-logo.png&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(msg)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;User ID&quot;</span> <span class="attr">autofocus</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">th:placeholder</span>=<span class="string">&quot;#&#123;login.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.remember&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;pull-right&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">data-toggle</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#myModal&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;#&#123;login.forgot&#125;&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-lg btn-login btn-block&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-check&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;registration&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--Thymeleaf 行内写法--&gt;</span></span><br><span class="line">                [[#&#123;login.not-a-member&#125;]]</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/registration.html&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/registration.html&#125;&quot;</span>&gt;</span></span><br><span class="line">                    [[#&#123;login.signup&#125;]]</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--thymeleaf 模板引擎的参数用（）代替 ？--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;myModalLabel&quot;</span> <span class="attr">role</span>=<span class="string">&quot;dialog&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close&quot;</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Forgot Password ?<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Enter your e-mail address below to reset your password.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">                               <span class="attr">class</span>=<span class="string">&quot;form-control placeholder-no-fix&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-dismiss</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- modal --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Placed js at the end of the document so the pages load faster --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.10.2.min.js&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/jquery-1.10.2.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/bootstrap.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/modernizr.min.js&quot;</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;/js/modernizr.min.js&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="14-4-区域信息解析器自动配置"><a href="#14-4-区域信息解析器自动配置" class="headerlink" title="14.4.区域信息解析器自动配置"></a>14.4.区域信息解析器自动配置</h2><p>我们知道，Spring MVC 进行国际化时有 2 个十分重要的对象：</p><ul><li>Locale：区域信息对象</li><li>LocaleResolver：区域信息解析器，容器中的组件，负责获取区域信息对象</li></ul><p>我们可以通过以上两个对象对区域信息的切换，以达到切换语言的目的。</p><p>Spring Boot 在 WebMvcAutoConfiguration 中为区域信息解析器（LocaleResolver）进行了自动配置，源码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME)</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.webProperties.getLocaleResolver() == WebProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.webProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mvcProperties.getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FixedLocaleResolver(<span class="keyword">this</span>.mvcProperties.getLocale());</span><br><span class="line">    &#125;</span><br><span class="line">    AcceptHeaderLocaleResolver localeResolver = <span class="keyword">new</span> AcceptHeaderLocaleResolver();</span><br><span class="line">    Locale locale = (<span class="keyword">this</span>.webProperties.getLocale() != <span class="keyword">null</span>) ? <span class="keyword">this</span>.webProperties.getLocale()</span><br><span class="line">            : <span class="keyword">this</span>.mvcProperties.getLocale();</span><br><span class="line">    localeResolver.setDefaultLocale(locale);</span><br><span class="line">    <span class="keyword">return</span> localeResolver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上源码可知：</p><ul><li>该方法默认向容器中添加了一个区域信息解析器（LocaleResolver）组件，它会根据请求头中携带的“Accept-Language”参数，获取相应区域信息（Locale）对象。</li><li>该方法上使用了 @ConditionalOnMissingBean 注解，其参数 name 的取值为 localeResolver（与该方法注入到容器中的组件名称一致），该注解的含义为：当容器中不存在名称为 localResolver 组件时，该方法才会生效。换句话说，当我们手动向容器中添加一个名为“localeResolver”的组件时，Spring Boot 自动配置的区域信息解析器会失效，而我们定义的区域信息解析器则会生效。</li></ul><p>手动切换语言</p><ol><li>修改 login.html 切换语言链接，在请求中携带国际化区域信息，代码如下。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf 模板引擎的参数用（）代替 ？--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;zh_CN&#x27;)&#125;&quot;</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>|</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-sm&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/index.html(l=&#x27;en_US&#x27;)&#125;&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建一个 component 包，并在该包中创建一个区域信息解析器 MyLocalResolver，代码如下。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.LocaleResolver;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="comment">//自定义区域信息解析器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocalResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取请求中参数</span></span><br><span class="line">        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="comment">//获取默认的区域信息解析器</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">//根据请求中的参数重新构造区域信息对象</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(l)) &#123;</span><br><span class="line">            String[] s = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(s[<span class="number">0</span>], s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了让我们的区域化信息能够生效，我们需要再配置一下这个组件！在我们自己的<code>MvcConofig</code>下添加<code>bean</code>；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MyLocalResolver();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="15-swagger"><a href="#15-swagger" class="headerlink" title="15.swagger"></a>15.swagger</h1><h2 id="15-1-添加依赖"><a href="#15-1-添加依赖" class="headerlink" title="15.1.添加依赖"></a>15.1.添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="15-2-添加配置类"><a href="#15-2-添加配置类" class="headerlink" title="15.2.添加配置类"></a>15.2.添加配置类</h2><p>添加一个swagger 配置类，在工程下新建 config 包并添加一个 SwaggerConfig 配置类。</p><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line">                .paths(PathSelectors.any()).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;Kitty API Doc&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;This is a restful api document of Kitty.&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-3-添加控制器"><a href="#15-3-添加控制器" class="headerlink" title="15.3.添加控制器"></a>15.3.添加控制器</h2><p>添加一个控制器，在工程下新建 controller包并添加一个 HelloController控制器。</p><p>HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiParam;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类注解 */</span></span><br><span class="line"><span class="meta">@Api(value = &quot;desc of class&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 方法注解 */</span></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;desc of method&quot;, notes = &quot;&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">( <span class="comment">/* 参数注解 */</span> <span class="meta">@ApiParam(value = &quot;desc of param&quot; , required=true )</span> <span class="meta">@RequestParam</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行即可</strong></p><h2 id="15-4-常用注解说明"><a href="#15-4-常用注解说明" class="headerlink" title="15.4.常用注解说明"></a>15.4.常用注解说明</h2><p>swagger 通过注解接口生成文档，包括接口名，请求方法，参数，返回信息等。</p><p>@Api: 修饰整个类，用于controller类上</p><p>@ApiOperation: 描述一个接口，用户controller方法上</p><p>@ApiParam: 单个参数描述</p><p>@ApiModel: 用来对象接收参数,即返回对象</p><p>@ApiModelProperty: 对象接收参数时，描述对象的字段</p><p>@ApiResponse: Http响应其中的描述，在ApiResonse中</p><p>@ApiResponses: Http响应所有的描述，用在</p><p>@ApiIgnore: 忽略这个API</p><p>@ApiError: 发生错误的返回信息</p><p>@ApiImplicitParam: 一个请求参数</p><p>@ApiImplicitParam: 多个请求参数</p><p>更多使用说明，参考 <a href="https://gumutianqi1.gitbooks.io/specification-doc/content/tools-doc/spring-boot-swagger2-guide.html">Swagger 使用手册</a>。</p><h2 id="15-5-添加请求参数"><a href="#15-5-添加请求参数" class="headerlink" title="15.5.添加请求参数"></a>15.5.添加请求参数</h2><p>在很多时候，我们需要在调用我们每一个接口的时候都携带上一些通用参数，比如采取token验证逻辑的往往在接口请求时需要把token也一起传入后台，接下来，我们就来讲解一下如何给Swagger添加固定的请求参数。</p><p>修改SwaggerConfig配置类，替换成如下内容，利用ParameterBuilder构成请求参数。</p><p>SwaggerConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 添加请求参数，我们这里把token作为请求头部参数传入后端</span></span><br><span class="line">        ParameterBuilder parameterBuilder = <span class="keyword">new</span> ParameterBuilder();  </span><br><span class="line">        List&lt;Parameter&gt; parameters = <span class="keyword">new</span> ArrayList&lt;Parameter&gt;();  </span><br><span class="line">        parameterBuilder.name(<span class="string">&quot;token&quot;</span>).description(<span class="string">&quot;令牌&quot;</span>)</span><br><span class="line">            .modelRef(<span class="keyword">new</span> ModelRef(<span class="string">&quot;string&quot;</span>)).parameterType(<span class="string">&quot;header&quot;</span>).required(<span class="keyword">false</span>).build();  </span><br><span class="line">        parameters.add(parameterBuilder.build());  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo()).select()</span><br><span class="line">                .apis(RequestHandlerSelectors.any()).paths(PathSelectors.any())</span><br><span class="line">                .build().globalOperationParameters(parameters);</span><br><span class="line"><span class="comment">//        return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span></span><br><span class="line"><span class="comment">//                .select()</span></span><br><span class="line"><span class="comment">//                .apis(RequestHandlerSelectors.any())</span></span><br><span class="line"><span class="comment">//                .paths(PathSelectors.any()).build();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;Swagger API Doc&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;This is a restful api document of Swagger.&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成之后重新启动应用，再次查看hello接口，可以看到已经支持发送token请求参数了。</p><h2 id="15-6-配置API分组"><a href="#15-6-配置API分组" class="headerlink" title="15.6.配置API分组"></a>15.6.配置API分组</h2><p>如果没有配置分组，默认是default。通过groupName()方法即可配置分组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">      .groupName(<span class="string">&quot;group1&quot;</span>) <span class="comment">// 配置分组</span></span><br><span class="line">       ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket1</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket2</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket3</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;group3&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-拦截器"><a href="#16-拦截器" class="headerlink" title="16.拦截器"></a>16.拦截器</h1><p>在 Spring Boot 项目中，使用拦截器功能通常需要以下 3 步：</p><ol><li><p>定义拦截器；</p></li><li><p>注册拦截器；</p></li><li><p>指定拦截规则（如果是拦截所有，静态资源也会被拦截）。</p></li></ol><h2 id="16-1-定义拦截器"><a href="#16-1-定义拦截器" class="headerlink" title="16.1.定义拦截器"></a>16.1.定义拦截器</h2><p>在 Spring Boot 中定义拦截器十分的简单，只需要创建一个拦截器类，并实现 HandlerInterceptor 接口即可。</p><p>HandlerInterceptor 接口中定义以下 3 个方法，如下表。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)</td><td>该方法在控制器处理请求方法前执行，其返回值表示是否中断后续操作，返回 true 表示继续向下执行，返回 false 表示中断后续操作。</td></tr><tr><td>void</td><td>postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</td><td>该方法在控制器处理请求方法调用之后、解析视图之前执行，可以通过此方法对请求域中的模型和视图做进一步修改。</td></tr><tr><td>void</td><td>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</td><td>该方法在视图渲染结束后执行，可以通过此方法实现资源清理、记录日志信息等工作。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行前</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">&quot;loginUser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//未登录，返回登陆页</span></span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;您没有权限进行此操作，请先登陆！&quot;</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">&quot;/index.html&quot;</span>).forward(request, response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 目标方法执行后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle执行&#123;&#125;&quot;</span>, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面渲染后</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion执行异常&#123;&#125;&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-2-注册拦截器"><a href="#16-2-注册拦截器" class="headerlink" title="16.2.注册拦截器"></a>16.2.注册拦截器</h2><p>创建一个实现了 WebMvcConfigurer 接口的配置类（使用了 @Configuration 注解的类），重写 addInterceptors() 方法，并在该方法中调用 registry.addInterceptor() 方法将自定义的拦截器注册到容器中。</p><p>在配置类 MyMvcConfig 中，添加以下方法注册拦截器，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16-3-指定拦截规则"><a href="#16-3-指定拦截规则" class="headerlink" title="16.3.指定拦截规则"></a>16.3.指定拦截规则</h2><p>在使用 registry.addInterceptor() 方法将拦截器注册到容器中后，我们便可以继续指定拦截器的拦截规则了，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;注册拦截器&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求，包括静态资源文件</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/index.html&quot;</span>, <span class="string">&quot;/user/login&quot;</span>, <span class="string">&quot;/css/**&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/js/**&quot;</span>, <span class="string">&quot;/fonts/**&quot;</span>); <span class="comment">//放行登录页，登陆操作，静态资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在指定拦截器拦截规则时，调用了两个方法，这两个方法的说明如下：</p><ul><li>addPathPatterns：该方法用于指定拦截路径，例如拦截路径为“/**”，表示拦截所有请求，包括对静态资源的请求。</li><li>excludePathPatterns：该方法用于排除拦截路径，即指定不需要被拦截器拦截的请求。</li></ul><p>至此，拦截器的基本功能已经完成，接下来，我们先实现 spring-boot-adminex 的登陆功能，为验证登陆拦截做准备。</p><h1 id="17-异常处理"><a href="#17-异常处理" class="headerlink" title="17.异常处理"></a>17.异常处理</h1><p>Spring Boot 提供了一套默认的异常处理机制，一旦程序中出现了异常，Spring Boot 会自动识别客户端的类型（浏览器客户端或机器客户端），并根据客户端的不同，以不同的形式展示异常信息。</p><ol><li>对于浏览器客户端而言，Spring Boot 会响应一个“ whitelabel”错误视图，以 HTML 格式呈现错误信息</li></ol><p><img src="C:/Users/17144/AppData/Roaming/Typora/typora-user-images/image-20211108174302407.png" alt="image-20211108174302407"></p><ol start="2"><li>对于机器客户端而言，Spring Boot 将生成 JSON 响应，来展示异常消息。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-07-12T07:05:29.885+00:00&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;Not Found&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;message&quot;</span>: <span class="string">&quot;No message available&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;/m1ain.html&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-异常处理自动配置原理"><a href="#Spring-Boot-异常处理自动配置原理" class="headerlink" title="Spring Boot 异常处理自动配置原理"></a>Spring Boot 异常处理自动配置原理</h2><p>Spring Boot 通过配置类 ErrorMvcAutoConfiguration 对异常处理提供了自动配置，该配置类向容器中注入了以下 4 个组件。</p><ul><li><p>ErrorPageCustomizer：该组件会在在系统发生异常后，默认将请求转发到“/error”上。</p></li><li><p>BasicErrorController：处理默认的“/error”请求。</p></li><li><p>DefaultErrorViewResolver：默认的错误视图解析器，将异常信息解析到相应的错误视图上。</p></li><li><p>DefaultErrorAttributes：用于页面上共享异常信息。</p></li></ul><p>下面，我们依次对这四个组件进行详细的介绍。</p><h3 id="ErrorPageCustomizer"><a href="#ErrorPageCustomizer" class="headerlink" title="ErrorPageCustomizer"></a>ErrorPageCustomizer</h3><p>ErrorMvcAutoConfiguration 向容器中注入了一个名为 ErrorPageCustomizer 的组件，它主要用于定制错误页面的响应规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ErrorPageCustomizer <span class="title">errorPageCustomizer</span><span class="params">(DispatcherServletPath dispatcherServletPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ErrorPageCustomizer(<span class="keyword">this</span>.serverProperties, dispatcherServletPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ErrorPageCustomizer 通过 registerErrorPages() 方法来注册错误页面的响应规则。当系统中发生异常后，ErrorPageCustomizer  组件会自动生效，并将请求转发到 “/error”上，交给 BasicErrorController 进行处理，其部分代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry errorPageRegistry)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将请求转发到 /errror（this.properties.getError().getPath()）上</span></span><br><span class="line">    ErrorPage errorPage = <span class="keyword">new</span> ErrorPage(<span class="keyword">this</span>.dispatcherServletPath.getRelativePath(<span class="keyword">this</span>.properties.getError().getPath()));</span><br><span class="line">    <span class="comment">// 注册错误页面</span></span><br><span class="line">    errorPageRegistry.addErrorPages(errorPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BasicErrorController"><a href="#BasicErrorController" class="headerlink" title="BasicErrorController"></a>BasicErrorController</h3><p>ErrorMvcAutoConfiguration 还向容器中注入了一个错误控制器组件 BasicErrorController，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorController.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BasicErrorController <span class="title">basicErrorController</span><span class="params">(ErrorAttributes errorAttributes,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                 ObjectProvider&lt;ErrorViewResolver&gt; errorViewResolvers)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BasicErrorController(errorAttributes, <span class="keyword">this</span>.serverProperties.getError(),</span><br><span class="line">            errorViewResolvers.orderedStream().collect(Collectors.toList()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BasicErrorController 的定义如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BasicErrorController 用于处理 “/error” 请求</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法用于处理浏览器客户端的请求发生的异常</span></span><br><span class="line"><span class="comment">     * 生成 html 页面来展示异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取错误状态码</span></span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="comment">//getErrorAttributes 根据错误信息来封装一些 model 数据，用于页面显示</span></span><br><span class="line">        Map&lt;String, Object&gt; model = Collections</span><br><span class="line">                .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">        <span class="comment">//为响应对象设置错误状态码</span></span><br><span class="line">        response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//调用 resolveErrorView() 方法，使用错误视图解析器生成 ModelAndView 对象（包含错误页面地址和页面内容）</span></span><br><span class="line">        ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">        <span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法用于处理机器客户端的请求发生的错误</span></span><br><span class="line"><span class="comment">     * 产生 JSON 格式的数据展示错误信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">        HttpStatus status = getStatus(request);</span><br><span class="line">        <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Boot 通过 BasicErrorController 进行统一的错误处理（例如默认的“/error”请求）。Spring Boot 会自动识别发出请求的客户端的类型（浏览器客户端或机器客户端），并根据客户端类型，将请求分别交给 errorHtml() 和 error() 方法进行处理。</p><table><thead><tr><th>返回值类型</th><th>方法声明</th><th>客户端类型</th><th>错误信息返类型</th></tr></thead><tbody><tr><td>ModelAndView</td><td>errorHtml(HttpServletRequest request, HttpServletResponse response)</td><td>浏览器客户端</td><td>text/html（错误页面）</td></tr><tr><td>ResponseEntity&lt;Map&lt;String, Object&gt;&gt;</td><td>error(HttpServletRequest request)</td><td>机器客户端（例如安卓、IOS、Postman 等等）</td><td>JSON</td></tr></tbody></table><blockquote><p>换句话说，当使用浏览器访问出现异常时，会进入 BasicErrorController 控制器中的 errorHtml() 方法进行处理，当使用安卓、IOS、Postman 等机器客户端访问出现异常时，就进入error() 方法处理。</p></blockquote><p>在 errorHtml() 方法中会调用父类（AbstractErrorController）的 resolveErrorView() 方法，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取容器中的所有的错误视图解析器来处理该异常信息</span></span><br><span class="line">    <span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">        <span class="comment">//调用错误视图解析器的 resolveErrorView 解析到错误视图页面</span></span><br><span class="line">        ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述源码可以看出，在响应页面的时候，会在父类的 resolveErrorView 方法中获取容器中所有的 ErrorViewResolver 对象（错误视图解析器，包括 DefaultErrorViewResolver 在内），一起来解析异常信息。</p><h3 id="DefaultErrorViewResolver"><a href="#DefaultErrorViewResolver" class="headerlink" title="DefaultErrorViewResolver"></a>DefaultErrorViewResolver</h3><p>ErrorMvcAutoConfiguration 还向容器中注入了一个默认的错误视图解析器组件 DefaultErrorViewResolver，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line"><span class="function">DefaultErrorViewResolver <span class="title">conventionErrorViewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorViewResolver(<span class="keyword">this</span>.applicationContext, <span class="keyword">this</span>.resources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当发出请求的客户端为浏览器时，Spring Boot 会获取容器中所有的 ErrorViewResolver 对象（错误视图解析器），并分别调用它们的 resolveErrorView() 方法对异常信息进行解析，其中自然也包括 DefaultErrorViewResolver（默认错误信息解析器）。</p><p>DefaultErrorViewResolver 的部分代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorViewResolver</span> <span class="keyword">implements</span> <span class="title">ErrorViewResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;HttpStatus.Series, String&gt; SERIES_VIEWS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Map&lt;HttpStatus.Series, String&gt; views = <span class="keyword">new</span> EnumMap&lt;&gt;(HttpStatus.Series.class);</span><br><span class="line">        views.put(Series.CLIENT_ERROR, <span class="string">&quot;4xx&quot;</span>);</span><br><span class="line">        views.put(Series.SERVER_ERROR, <span class="string">&quot;5xx&quot;</span>);</span><br><span class="line">        SERIES_VIEWS = Collections.unmodifiableMap(views);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//尝试以错误状态码作为错误页面名进行解析</span></span><br><span class="line">        ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">        <span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">            <span class="comment">//尝试以 4xx 或 5xx 作为错误页面页面进行解析</span></span><br><span class="line">            modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//错误模板页面，例如 error/404、error/4xx、error/500、error/5xx</span></span><br><span class="line">        String errorViewName = <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">        <span class="comment">//当模板引擎可以解析这些模板页面时，就用模板引擎解析</span></span><br><span class="line">        TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">                <span class="keyword">this</span>.applicationContext);</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//在模板能够解析到模板页面的情况下，返回 errorViewName 指定的视图</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//若模板引擎不能解析，则去静态资源文件夹下查找 errorViewName 对应的页面</span></span><br><span class="line">        <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历所有静态资源文件夹</span></span><br><span class="line">        <span class="keyword">for</span> (String location : <span class="keyword">this</span>.resources.getStaticLocations()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Resource resource = <span class="keyword">this</span>.applicationContext.getResource(location);</span><br><span class="line">                <span class="comment">//静态资源文件夹下的错误页面，例如error/404.html、error/4xx.html、error/500.html、error/5xx.html</span></span><br><span class="line">                resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line">                <span class="comment">//若静态资源文件夹下存在以上错误页面，则直接返回</span></span><br><span class="line">                <span class="keyword">if</span> (resource.exists()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="keyword">new</span> DefaultErrorViewResolver.HtmlResourceView(resource), model);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultErrorViewResolver 解析异常信息的步骤如下：</p><ol><li>根据错误状态码（例如 404、500、400 等），生成一个错误视图 error/status，例如 error/404、error/500、error/400。</li><li>尝试使用模板引擎解析 error/status 视图，即尝试从 classpath 类路径下的 templates 目录下，查找 error/status.html，例如 error/404.html、error/500.html、error/400.html。</li><li>若模板引擎能够解析到 error/status 视图，则将视图和数据封装成 ModelAndView 返回并结束整个解析流程，否则跳转到第 4 步。</li><li>依次从各个静态资源文件夹中查找 error/status.html，若在静态文件夹中找到了该错误页面，则返回并结束整个解析流程，否则跳转到第 5 步。</li><li>将错误状态码（例如 404、500、400 等）转换为 4xx 或 5xx，然后重复前 4 个步骤，若解析成功则返回并结束整个解析流程，否则跳转第 6 步。 </li><li>处理默认的 “/error ”请求，使用 Spring Boot 默认的错误页面（Whitelabel Error Page）。</li></ol><h3 id="DefaultErrorAttributes"><a href="#DefaultErrorAttributes" class="headerlink" title="DefaultErrorAttributes"></a>DefaultErrorAttributes</h3><p>ErrorMvcAutoConfiguration 还向容器中注入了一个组件默认错误属性处理工具 DefaultErrorAttributes，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultErrorAttributes <span class="title">errorAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DefaultErrorAttributes();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DefaultErrorAttributes 是 Spring Boot 的默认错误属性处理工具，它可以从请求中获取异常或错误信息，并将其封装为一个 Map 对象返回，其部分代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorAttributes</span> <span class="keyword">implements</span> <span class="title">ErrorAttributes</span>, <span class="title">HandlerExceptionResolver</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = getErrorAttributes(webRequest, options.isIncluded(Include.STACK_TRACE));</span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.EXCEPTION)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">&quot;exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.STACK_TRACE)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">&quot;trace&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.MESSAGE) &amp;&amp; errorAttributes.get(<span class="string">&quot;message&quot;</span>) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">&quot;message&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!options.isIncluded(Include.BINDING_ERRORS)) &#123;</span><br><span class="line">            errorAttributes.remove(<span class="string">&quot;errors&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;timestamp&quot;</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        addStatus(errorAttributes, webRequest);</span><br><span class="line">        addErrorDetails(errorAttributes, webRequest, includeStackTrace);</span><br><span class="line">        addPath(errorAttributes, webRequest);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Spring Boot 默认的 Error 控制器（BasicErrorController）处理错误时，会调用 DefaultErrorAttributes 的 getErrorAttributes() 方法获取错误或异常信息，并封装成 model 数据（Map 对象），返回到页面或 JSON 数据中。该 model 数据主要包含以下属性：</p><ul><li>timestamp：时间戳；</li><li>status：错误状态码</li><li>error：错误的提示</li><li>exception：导致请求处理失败的异常对象</li><li>message：错误/异常消息</li><li>trace： 错误/异常栈信息</li><li>path:错误/异常抛出时所请求的URL路径</li></ul><h1 id="18-全局异常处理"><a href="#18-全局异常处理" class="headerlink" title="18.全局异常处理"></a>18.全局异常处理</h1><p>我们知道 Spring Boot 已经提供了一套默认的异常处理机制，但是 Spring Boot 提供的默认异常处理机制却并不一定适合我们实际的业务场景，因此，我们通常会根据自身的需要对 Spring Boot 全局异常进行统一定制，例如定制错误页面，定制错误数据等。</p><h2 id="定制错误页面"><a href="#定制错误页面" class="headerlink" title="定制错误页面"></a>定制错误页面</h2><p>我们可以通过以下 3 种方式定制 Spring Boot 错误页面：</p><ul><li>自定义 error.html</li><li>自定义动态错误页面</li><li>自定义静态错误页面</li></ul><h3 id="自定义-error-html"><a href="#自定义-error-html" class="headerlink" title="自定义 error.html"></a>自定义 error.html</h3><p>我们可以直接在模板引擎文件夹（/resources/templates）下创建 error.html ，覆盖 Spring Boot 默认的错误视图页面（Whitelabel Error Page）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义 error.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义 error.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 Sprng Boot 项目使用了模板引擎，当程序发生异常时，Spring Boot 的默认错误视图解析器（DefaultErrorViewResolver）就会解析模板引擎文件夹（resources/templates/）下 error 目录中的错误视图页面。</p><h4 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h4><p>我们可以根据错误状态码（例如 404、500、400 等等）的不同，分别创建不同的动态错误页面（例如 404.html、500.html、400.html 等等），并将它们存放在模板引擎文件夹下的 error 目录中。当发生异常时，Spring Boot 会根据其错误状态码精确匹配到对应的错误页面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义动态错误页面 404.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h4><p>我们还可以使用 4xx.html 和 5xx.html 作为动态错误页面的文件名，并将它们存放在模板引擎文件夹下的 error 目录中，来模糊匹配对应类型的所有错误，例如 404、400 等错误状态码以“4”开头的所有异常，都会解析到动态错误页面 4xx.html 上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义动态错误页面 4xx.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义静态错误页面"><a href="#自定义静态错误页面" class="headerlink" title="自定义静态错误页面"></a>自定义静态错误页面</h3><p>若 Sprng Boot 项目没有使用模板引擎，当程序发生异常时，Spring Boot 的默认错误视图解析器（DefaultErrorViewResolver）则会解析静态资源文件夹下 error 目录中的静态错误页面。</p><h4 id="精确匹配-1"><a href="#精确匹配-1" class="headerlink" title="精确匹配"></a>精确匹配</h4><p>我们可以根据错误状态码（例如 404、500、400 等等）的不同，分别创建不同的静态错误页面（例如 404.html、500.html、400.html 等等），并将它们存放在静态资源文件夹下的 error 目录中。当发生异常时，Spring Boot 会根据错误状态码精确匹配到对应的错误页面上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义静态错误页面 404.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h4><p>我们还可以使用 4xx.html 和 5xx.html 作为静态错误页面的文件名，并将它们存放在静态资源文件夹下的 error 目录中，来模糊匹配对应类型的所有错误，例如 404、400 等错误状态码以“4”开头的所有错误，都会解析到静态错误页面 4xx.html 上。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>自定义静态错误页面 4xx.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="错误页面优先级"><a href="#错误页面优先级" class="headerlink" title="错误页面优先级"></a>错误页面优先级</h3><p>以上 5 种方式均可以定制 Spring Boot 错误页面，且它们的优先级顺序为：自定义动态错误页面（精确匹配）&gt;自定义静态错误页面（精确匹配）&gt;自定义动态错误页面（模糊匹配）&gt;自定义静态错误页面（模糊匹配）&gt;自定义 error.html。</p><blockquote><p>当遇到错误时，Spring Boot 会按照优先级由高到低，依次查找解析错误页，一旦找到可用的错误页面，则直接返回客户端展示。</p></blockquote><h2 id="定制错误数据"><a href="#定制错误数据" class="headerlink" title="定制错误数据"></a>定制错误数据</h2><p>我们知道，Spring Boot 提供了一套默认的异常处理机制，其主要流程如下：</p><ol><li>发生异常时，将请求转发到“/error”，交由 BasicErrorController（Spring Boot 默认的 Error 控制器） 进行处理；</li><li>BasicErrorController 根据客户端的不同，自动适配返回的响应形式，浏览器客户端返回错误页面，机器客户端返回 JSON 数据。</li><li>BasicErrorController 处理异常时，会调用 DefaultErrorAttributes（默认的错误属性处理工具） 的 getErrorAttributes() 方法获取错误数据。</li></ol><p>我们还可以定制 Spring Boot 的错误数据，具体步骤如下。</p><ol><li>自定义异常处理类，将请求转发到 “/error”，交由 Spring Boot 底层（BasicErrorController）进行处理，自动适配浏览器客户端和机器客户端。</li><li>通过继承 DefaultErrorAttributes 来定义一个错误属性处理工具，并在原来的基础上添加自定义的错误数据。</li></ol><h4 id="1-自定义异常处理类"><a href="#1-自定义异常处理类" class="headerlink" title="1. 自定义异常处理类"></a>1. 自定义异常处理类</h4><p>被 @ControllerAdvice 注解的类可以用来实现全局异常处理，这是 Spring MVC 中提供的功能，在 Spring Boot 中可以直接使用。</p><p>创建一个名为 UserNotExistException 的异常类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 自定义异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserNotExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;用户不存在！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 IndexController 添加以下方法，触发 UserNotExistException 异常，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="meta">@GetMapping(value = &#123;&quot;/testException&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">(String user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;user&quot;</span>.equals(user)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//跳转到登录页 login.html</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个名为 MyExceptionHandler 异常处理类，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wyl.Exception.UserNotExistException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(UserNotExistException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">handleException</span><span class="params">(Exception e, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向 request 对象传入错误状态码</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="comment">//根据当前处理的异常，自定义的错误数据</span></span><br><span class="line">        map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;user.notexist&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;message&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="comment">//将自定的错误数据传入 request 域中</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;ext&quot;</span>,map);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-自定义错误属性处理工具"><a href="#2-自定义错误属性处理工具" class="headerlink" title="2. 自定义错误属性处理工具"></a>2. 自定义错误属性处理工具</h4><p>1）在 net.biancheng.<a href="http://www.componet/">www.componet</a> 包内，创建一个错误属性处理工具类 MyErrorAttributes（继承 DefaultErrorAttributes ），通过该类我们便可以添加自定义的错误数据，代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.error.ErrorAttributeOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.DefaultErrorAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.WebRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">//向容器中添加自定义的储物属性处理工具</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorAttributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, ErrorAttributeOptions options)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, options);</span><br><span class="line">        <span class="comment">//添加自定义的错误数据</span></span><br><span class="line">        errorAttributes.put(<span class="string">&quot;company&quot;</span>, <span class="string">&quot;www.biancheng.net&quot;</span>);</span><br><span class="line">        <span class="comment">//获取 MyExceptionHandler 传入 request 域中的错误数据</span></span><br><span class="line">        Map ext = (Map) webRequest.getAttribute(<span class="string">&quot;ext&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        errorAttributes.put(<span class="string">&quot;ext&quot;</span>, ext);</span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 templates/error 目录下，创建动态错误页面 5xx.html，代码如下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义 error.html<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>status：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;status&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>error：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;error&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>timestamp：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;timestamp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>message：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;path&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--取出定制的错误信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>以下为定制错误数据：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>company：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;company&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>code：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ext.code&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>path：<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;ext.message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea快捷键大全</title>
      <link href="2021/10/15/java/firststage/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/"/>
      <url>2021/10/15/java/firststage/Idea%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编辑类快捷键"><a href="#一、编辑类快捷键" class="headerlink" title="一、编辑类快捷键"></a>一、编辑类快捷键</h2><table><thead><tr><th>编辑类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>psvm + Tab</td><td>生成main方法</td></tr><tr><td>sout + tab</td><td>生成输出语句</td></tr><tr><td>Ctrl+X / Ctrl + Y</td><td>删除一行</td></tr><tr><td>Ctrl+D</td><td>复制一行</td></tr><tr><td>Ctrl+/ 或 Ctrl+Shift+/</td><td>注释代码</td></tr><tr><td>Ctrl + Z</td><td>撤销</td></tr><tr><td>Ctrl + Shift + Z</td><td>取消撤销</td></tr><tr><td>Ctrl + C</td><td>复制</td></tr><tr><td>Ctrl + V</td><td>粘贴</td></tr><tr><td>Ctrl + O</td><td>重写方法</td></tr><tr><td>Ctrl + I</td><td>实现方法</td></tr><tr><td>Ctr + shift + U</td><td>大小写转化</td></tr><tr><td>Ctrl + Shift + J</td><td>整合两行为一行</td></tr><tr><td>Ctrl + Shift + space</td><td>自动补全代码</td></tr><tr><td>Alt + 回车</td><td>导入包,自动修正</td></tr><tr><td>Alt + /</td><td>代码提示</td></tr><tr><td>Alt + Insert</td><td>生成代码(如GET,SET方法,构造函数等)</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码</td></tr><tr><td>Ctrl + Alt + I</td><td>自动缩进</td></tr><tr><td>Ctrl + Alt + T</td><td>生成try catch</td></tr><tr><td>Ctrl + Alt + O</td><td>优化导入的类和包</td></tr><tr><td>fori</td><td>生成for循环for (int i = 0; i&lt; ;</td></tr><tr><td>iter</td><td>生成增强for循环</td></tr><tr><td>itar</td><td>生成array for代码块</td></tr><tr><td>itit</td><td>生成iterator 迭代</td></tr><tr><td>itli</td><td>生成List的遍历</td></tr><tr><td>itco</td><td>生成Collection迭代</td></tr></tbody></table><h2 id="二、查找、替换类快捷键"><a href="#二、查找、替换类快捷键" class="headerlink" title="二、查找、替换类快捷键"></a>二、查找、替换类快捷键</h2><table><thead><tr><th>查找、替换类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>在当前文件中查找</td></tr><tr><td>Ctrl + Shift + F</td><td>在整个项目或者指定窗口中查找文本</td></tr><tr><td>Ctrl + N</td><td>在项目中查找类</td></tr><tr><td>Ctrl + Shift + N</td><td>查找文件</td></tr><tr><td>Ctrl + R</td><td>在当前文件进行文本替换</td></tr><tr><td>Ctrl + Shift+R</td><td>在指定窗口替换文本</td></tr><tr><td>Ctrl + W</td><td>自动按语法选中代码</td></tr><tr><td>Ctrl + Shift + W</td><td>反向自动按语法选中代码</td></tr><tr><td>Ctrl + G</td><td>定位行</td></tr><tr><td>Ctrl＋Shift＋Backspace</td><td>跳转到上一次编辑的位置</td></tr><tr><td>Ctrl + alt + ←/→</td><td>前后跳转编辑过的地方</td></tr><tr><td>Ctrl + Shift + Alt + N</td><td>查找 变量 / 方法</td></tr><tr><td>Alt + F7</td><td>找到你的函数或者变量或者类的所有引用到的地方</td></tr><tr><td>Alt + F3</td><td>高亮显示所有该选中文本，按 Enter 选中下一个，按 Esc 高亮消失</td></tr><tr><td>F4</td><td>在当前类中查找变量的来源</td></tr><tr><td>Ctrl + Shift + F7</td><td>高亮显示所有该选中文本，按 Esc 高亮消失</td></tr><tr><td>双击Shift</td><td>查找任何内容</td></tr></tbody></table><h2 id="三、编译、运行类快捷键"><a href="#三、编译、运行类快捷键" class="headerlink" title="三、编译、运行类快捷键"></a>三、编译、运行类快捷键</h2><table><thead><tr><th>编译、运行类快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + F9</td><td>编译项目</td></tr><tr><td>Ctrl + Shift + F9</td><td>编译当前文件</td></tr><tr><td>Shift + F10</td><td>正常启动</td></tr><tr><td>Alt + Shift + F10</td><td>弹出 Run 的可选择菜单</td></tr><tr><td>Shift + F9</td><td>debug模式启动</td></tr><tr><td>Alt + Shift + F9</td><td>选择 Debug</td></tr></tbody></table><h2 id="四、Debug快捷键"><a href="#四、Debug快捷键" class="headerlink" title="四、Debug快捷键"></a>四、Debug快捷键</h2><table><thead><tr><th>Debug快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F7</td><td>在 Debug 模式下，步入，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td>Shift + F7</td><td>智能步入</td></tr><tr><td>Alt + Shift + F7</td><td>强制步入</td></tr><tr><td>F8</td><td>在 Debug 模式下，步过，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td>Shift + F8</td><td>步出</td></tr><tr><td>Alt + Shift + F8</td><td>强制步过</td></tr><tr><td>alt + F8</td><td>在 Debug 模式下，选中查看值</td></tr><tr><td>Ctrl + Shift + F8</td><td>查看断点</td></tr><tr><td>F9</td><td>在 Debug 模式下，恢复程序运行。如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td>Alt +F9</td><td>运行至光标的位置</td></tr><tr><td>Ctrl + Alt+ F9</td><td>强制运行至光标处</td></tr><tr><td>Alt + F10</td><td>定位到断点</td></tr></tbody></table><h2 id="五、重构快捷键"><a href="#五、重构快捷键" class="headerlink" title="五、重构快捷键"></a>五、重构快捷键</h2><table><thead><tr><th>重构快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Shift + F6</td><td>重命名</td></tr><tr><td>Ctrl + Alt + C</td><td>抽取常量</td></tr><tr><td>Ctrl + Alt + F</td><td>抽取字段</td></tr><tr><td>Ctrl + Alt + M</td><td>抽取方法</td></tr><tr><td>Ctrl + Alt + P</td><td>抽取参数</td></tr><tr><td>Ctrl + Alt + V</td><td>抽取变量</td></tr></tbody></table><h2 id="六、其他快捷键"><a href="#六、其他快捷键" class="headerlink" title="六、其他快捷键"></a>六、其他快捷键</h2><table><thead><tr><th>其他快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Ctrl + C</td><td>复制文件名</td></tr><tr><td>Ctrl + Shift + C</td><td>复制文件的完整路径</td></tr><tr><td>Ctrl + E</td><td>显示最近打开的文件</td></tr><tr><td>Ctrl + Shift + E</td><td>显示最近修改的文件列表的弹出层</td></tr><tr><td>Ctrl + P</td><td>方法参数提示</td></tr><tr><td>Ctrl + Q</td><td>可以看到当前方法的声明</td></tr><tr><td>Ctrl + Alt + Space</td><td>类名或接口名提示</td></tr><tr><td>Ctrl + F12</td><td>显示当前文件的结构</td></tr><tr><td>Ctrl + H</td><td>显示当前类的结构图</td></tr><tr><td>Ctrl + Q</td><td>显示注释文档信息</td></tr><tr><td>Shift + Shift</td><td>弹出 Search Everywhere 弹出层，查找任任内容</td></tr><tr><td>Ctrl + [</td><td>移动光标到当前所在代码的花括号开始位置</td></tr><tr><td>Ctrl + ]</td><td>移动光标到当前所在代码的花括号结束位置</td></tr><tr><td>Ctrl + K</td><td>版本控制提交项目，需要此项目有加入到版本控制才能够使用</td></tr><tr><td>Ctrl + T</td><td>版本控制更新项目，需要此项目有加入到版本控制才能够使用</td></tr><tr><td>Ctrl + Tab</td><td>切换编辑窗口。如果在切换的过程又按Delete键，则是关闭对应选中的窗口</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring mvc快速入门</title>
      <link href="2021/09/06/java/firststage/spring%20mvc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/09/06/java/firststage/spring%20mvc%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring-mvc"><a href="#1-spring-mvc" class="headerlink" title="1.spring mvc"></a>1.spring mvc</h1><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p><img src="/images/img/blog/1120165-20170817204804350-377625461.png" alt="img"></p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><h2 id="1-1-三层结构"><a href="#1-1-三层结构" class="headerlink" title="1.1.三层结构"></a>1.1.三层结构</h2><p>B/S架构系统标准的三层架构包括<strong>表现层</strong>、<strong>业务层</strong>和<strong>持久层</strong>，每一层各司其职, 接下来我们就说说每层都负责哪些方面。</p><p><strong>表现层</strong></p><p>  也就是我们常说的<strong>web层</strong>。它负责接收客户端请求，向客户端响应结果，通常客户端使用http协议请求web 层，web 需要接收 http 请求，完成 http 响应。</p><ol><li><p>表现层又包括展示层和控制层：控制层负责接收请求，展示层负责结果的展示。</p></li><li><p>表现层依赖业务层，接收到客户端请求一般会调用业务层进行业务处理，并将处理结果响应给客户端。</p></li><li><p>表现层的设计一般都使用 MVC 模型。（MVC 是表现层的设计模型，和其他层没有关系）</p></li></ol><p><strong>业务层：</strong></p><p>  也就是我们常说的 <strong>service</strong> <strong>层</strong>。它负责业务逻辑处理，和我们开发项目的需求息息相关。</p><ol><li><p>web 层依赖业务层，但是业务层不依赖 web 层。</p></li><li><p>业务层在业务处理时可能会依赖持久层，如果要对数据持久化需要保证事务一致性。（也就是我们说的，事务应该放到业务层来控制）</p></li></ol><p><strong>持久层</strong>：</p><p>  也就是我们是常说的 <strong>dao</strong> <strong>层</strong>。负责数据持久化，包括数据层即数据库和数据访问层，数据库是对数据进行持久化的载体，数据访问层是业务层和持久层交互的接口，业务层需要通过数据访问层将数据持久化到数据库中。通俗的讲，持久层就是和数据库交互，对数据库表进行曾删改查的。</p><p>通过分层更好的实现了各个部分的职责，在每一层将再细化出不同的框架，分别解决各层关注的问题。三层架构与SSM的关系示意图如下，其中SpringMVC属于表现层框架，MyBatis属于持久层框架，而Spring不属于任何一层，是用来整合其它框架的。</p><p><img src="/images/img/blog/image-20210918164605392.png" alt="image-20210918164605392"></p><h2 id="1-2-mvc-模型"><a href="#1-2-mvc-模型" class="headerlink" title="1.2.mvc 模型"></a>1.2.mvc 模型</h2><p>MVC全名是<strong>Model View Controller</strong>，是模型(model)－视图(view)－控制器(controller)的缩写，是一种用于设计创建 Web 应用程序<strong>表现层</strong>的模式。MVC 中每个部分各司其职：</p><p><strong>Model(模型)</strong></p><p>  指的就是我们的数据模型，一般情况下用于封装数据。</p><p> <strong>View(视图)</strong></p><p>  指的就是我们的 jsp 或者 html等页面，一般用于展示数据的，其是依据模型数据创建的。</p><p> <strong>Controller(控制器)</strong></p><p>  是应用程序中处理用户交互的部分，用来处理程序逻辑的。例如参数校验等。</p><p><img src="/images/img/blog/image-20210918164819509.png" alt="image-20210918164819509"></p><h2 id="1-3-Spring-MVC"><a href="#1-3-Spring-MVC" class="headerlink" title="1.3.Spring MVC"></a>1.3.Spring MVC</h2><h3 id="1-3-1-特点："><a href="#1-3-1-特点：" class="headerlink" title="1.3.1.特点："></a>1.3.1.特点：</h3><ol><li><p>清晰的角色划分</p><p>  前端控制器（DispatcherServlet）</p><p>  请求到处理器映射（HandlerMapping）</p><p>  处理器适配器（HandlerAdapter）</p><p>  视图解析器（ViewResolver）</p><p>  处理器或页面控制器（Controller）</p><p>  验证器（ Validator）</p><p>  命令对象（Command 请求参数绑定到的对象就叫命令对象）</p><p>  表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</p></li><li><p>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</p></li><li><p>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。</p></li><li><p>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</p></li><li><p>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</p></li><li><p>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</p></li><li><p>功能强大的数据验证、格式化、绑定机制。</p></li><li><p>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</p></li><li><p>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</p></li><li><p>强大的 JSP 标签库，使 JSP 编写更容易。</p></li><li><p>还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持,数据验证、格式化、本地化、主题等等。</p></li><li><p>用的人多。</p></li></ol><h3 id="1-3-2-执行流程"><a href="#1-3-2-执行流程" class="headerlink" title="1.3.2.执行流程"></a>1.3.2.执行流程</h3><p><img src="/images/img/blog/gzyl.png" alt="gzyl"></p><h2 id="1-4-SpringMVC-和-Struts2"><a href="#1-4-SpringMVC-和-Struts2" class="headerlink" title="1.4.SpringMVC 和 Struts2"></a>1.4.SpringMVC 和 Struts2</h2><p><strong>共同点</strong>：</p><ol><li><p>它们都是表现层框架，都是基于 MVC 模型编写的。</p></li><li><p>它们的底层都离不开原始 ServletAPI。</p></li><li><p>它们处理请求的机制都是一个核心控制器。</p></li></ol><p><strong>区别：</strong></p><ol><li><p>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</p></li><li><p>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</p></li><li><p>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</p></li><li><p>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高 </p></li></ol><h1 id="2-spring-mvc入门demo"><a href="#2-spring-mvc入门demo" class="headerlink" title="2.spring mvc入门demo"></a>2.spring mvc入门demo</h1><h2 id="2-1-配置版"><a href="#2-1-配置版" class="headerlink" title="2.1.配置版"></a>2.1.配置版</h2><p>创建model,添加目录java,resources.</p><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><h3 id="2-1-1-添加依赖"><a href="#2-1-1-添加依赖" class="headerlink" title="2.1.1.添加依赖"></a>2.1.1.添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servletAPI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-2-配置web-xml-，-注册DispatcherServlet"><a href="#2-1-2-配置web-xml-，-注册DispatcherServlet" class="headerlink" title="2.1.2.配置web.xml  ， 注册DispatcherServlet"></a>2.1.2.配置web.xml  ， 注册DispatcherServlet</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-3-添加资源文件springmvc-servlet-xml"><a href="#2-1-3-添加资源文件springmvc-servlet-xml" class="headerlink" title="2.1.3.添加资源文件springmvc-servlet.xml"></a>2.1.3.添加资源文件springmvc-servlet.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--添加 处理映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 处理器适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/page/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><h3 id="2-1-4-添加软件包-com-wyl-controller-添加controller"><a href="#2-1-4-添加软件包-com-wyl-controller-添加controller" class="headerlink" title="2.1.4.添加软件包 com.wyl.controller,添加controller"></a>2.1.4.添加软件包 com.wyl.controller,添加controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/15</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装对象，放在ModeAndView</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;王延领学习java&quot;</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-1-5-添加映射"><a href="#2-1-5-添加映射" class="headerlink" title="2.1.5. 添加映射"></a>2.1.5. 添加映射</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-1-6-添加页面"><a href="#2-1-6-添加页面" class="headerlink" title="2.1.6.添加页面"></a>2.1.6.添加页面</h3><p><img src="/images/img/blog/image-20211019104451195.png" alt="image-20211019104451195"></p><h3 id="2-1-7-tomcat运行"><a href="#2-1-7-tomcat运行" class="headerlink" title="2.1.7.tomcat运行"></a>2.1.7.tomcat运行</h3><p><img src="/images/img/blog/image-20211019104740239.png" alt="image-20211019104740239"></p><h2 id="2-2-注解版"><a href="#2-2-注解版" class="headerlink" title="2.2.注解版"></a>2.2.注解版</h2><h3 id="2-2-1-添加依赖"><a href="#2-2-1-添加依赖" class="headerlink" title="2.2.1.添加依赖"></a>2.2.1.添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring-mvc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--servletAPI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-1-配置web-xml"><a href="#2-2-1-配置web-xml" class="headerlink" title="2.2.1.配置web.xml"></a>2.2.1.配置web.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--不要web-app，不然model 返回失效--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--注册servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">/ 和/* 的区别：</span></span><br><span class="line"><span class="comment">&lt; url-pattern &gt; / &lt;/ url-pattern &gt; </span></span><br><span class="line"><span class="comment">不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。</span></span><br><span class="line"><span class="comment">&lt; url-pattern &gt; /* &lt;/ url-pattern &gt; </span></span><br><span class="line"><span class="comment">会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-3-添加资源文件springmvc-servlet-xml"><a href="#2-2-3-添加资源文件springmvc-servlet-xml" class="headerlink" title="2.2.3.添加资源文件springmvc-servlet.xml"></a>2.2.3.添加资源文件springmvc-servlet.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wyl.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   支持mvc注解驱动</span></span><br><span class="line"><span class="comment">       在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">       要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">       必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">       和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">       这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">       而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-添加软件包-com-wyl-controller-添加controller"><a href="#2-2-4-添加软件包-com-wyl-controller-添加controller" class="headerlink" title="2.2.4.添加软件包 com.wyl.controller,添加controller"></a>2.2.4.添加软件包 com.wyl.controller,添加controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/18</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/sayHello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//会被视图解析器处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-5-添加页面"><a href="#2-1-5-添加页面" class="headerlink" title="2.1.5.添加页面"></a>2.1.5.添加页面</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: <span class="number">17144</span></span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">15</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">55</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">成功！！！</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-控制器"><a href="#3-控制器" class="headerlink" title="3.控制器"></a>3.控制器</h1><h2 id="3-1-Controller"><a href="#3-1-Controller" class="headerlink" title="3.1.@Controller"></a>3.1.@Controller</h2><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wyl.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest2</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-RequestMapping"><a href="#3-2-RequestMapping" class="headerlink" title="3.2.@RequestMapping"></a>3.2.@RequestMapping</h2><h3 id="3-2-1-RequestMapping注解："><a href="#3-2-1-RequestMapping注解：" class="headerlink" title="3.2.1.RequestMapping注解："></a>3.2.1.RequestMapping注解：</h3><p> *    作用：</p><p> *      用于建立请求URL和处理请求方法之间的对应关系</p><p> *      它可以作用在方法、类上</p><p> *      作用来类上：作用在类上时，类上的路径作为一级目录</p><p> *           在访问方法时需要加类上的路径</p><p> *      作用在方法上：指定这个方法要拦截处理哪个URL请求</p><p> *    属性：</p><p> *      value：与path属性的作用是相同的，当只有value一个属性时，属性可以省略，直接写属性值</p><p> *      path：与value属性作用一致，用于指定请求的URL</p><p> *      method：用于指定请求的方式，比如POST、GET等使用RequestMethod枚举</p><p> *      params：用于指定限制请求参数的条件，它支持简单的表达式</p><p> *                     要求请求参数的key和value必须和配置的一模一样</p><p> *      headers：用于指定限制请求消息头的条件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingDemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;SetView&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">SetView</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello SpringMvc&quot;</span>);</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//类上加了@RequestMapping注解后，此方法拦截的URL变成了：user/testRequestMapping</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/testRequestMapping&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMapping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试RequestMapping注解。。&quot;</span>);</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定此方法只能由POST请求访问</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &#123;&quot;/testRequestMappingMethod&quot;&#125;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMappingMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试RequestMapping注解的method属性。。&quot;</span>);</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定此方法必须带有name属性，且属性值必须为admin</span></span><br><span class="line">    <span class="comment">//http://localhost:8080/User/testRequestMappingParams?name=admin</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &#123;&quot;/testRequestMappingParams&quot;&#125;,params = &#123;&quot;name=admin&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMappingParams</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试RequestMapping注解的params属性。。&quot;</span>);</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//指定请求头中必须包含accept属性</span></span><br><span class="line">    <span class="meta">@RequestMapping(path = &#123;&quot;/testRequestMappingHeaders&quot;&#125;,headers = &#123;&quot;accept&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRequestMappingHeaders</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试RequestMapping注解的headers属性。。&quot;</span>);</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-RestFul风格"><a href="#3-2-2-RestFul风格" class="headerlink" title="3.2.2.RestFul风格"></a>3.2.2.RestFul风格</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//映射访问路径</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> p1, <span class="meta">@PathVariable</span> <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">     <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">     model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">     <span class="comment">//返回视图位置</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">     </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><ul><li><p>REST（英文：Representational State Transfer，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。</p></li><li><p>它本身并没有什么实用性，其核心价值在于如何设计出符合REST风格的网络接口。</p></li><li><p>restful的优点 ：</p><ul><li>它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</li></ul></li><li><p>restful的特性：</p><ul><li><p>资源（Resources）：</p><ul><li>网络上的一个实体，或者说是网络上的一个具体信息。 它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的存在。可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的 URI 。要 获取这个资源，访问它的URI就可以，因此 URI 即为每一个资源的独一无二的识别符。</li></ul></li><li><p>表现层（Representation）：</p><ul><li>把资源具体呈现出来的形式，叫做它的表现层 （Representation）。 比如，文本可以用 txt 格式表现，也可以用 HTML 格式、XML 格式、JSON 格式表现，甚至可以采用二进制格式。</li></ul></li><li><p>状态转化（State Transfer）：</p><ul><li>每 发出一个请求，就代表了客户端和服务器的一次交互过程。 HTTP协议，是一个无状态协议，即所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生“状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是 “表现层状态转化”。具体说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源，PUT 用来更新资源，DELETE 用来删除资源。</li></ul></li></ul></li></ul><h3 id="3-2-3-组合注解"><a href="#3-2-3-组合注解" class="headerlink" title="3.2.3.组合注解"></a>3.2.3.组合注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@PatchMapping</span></span><br></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解@RequestMapping(method =RequestMethod.GET) 的一个快捷方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来的：http://localhost:8080/add?a=1&amp;b=2</span></span><br><span class="line">    <span class="comment">//RestFul风格：http://localhost:8080/add/a/b</span></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span> </span>&#123;<span class="comment">//@PathVariable路径变量</span></span><br><span class="line">        <span class="keyword">int</span> res = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为：&quot;</span> + res);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping(value = &quot;/add/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.Post)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add/&#123;a&#125;/&#123;b&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a, <span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span> </span>&#123;<span class="comment">//@PathVariable路径变量</span></span><br><span class="line">        <span class="keyword">int</span> res = a + b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果为：&quot;</span> + res);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-结果跳转"><a href="#3-3-结果跳转" class="headerlink" title="3.3.结果跳转"></a>3.3.结果跳转</h2><h3 id="3-3-1-ModelAndView"><a href="#3-3-1-ModelAndView" class="headerlink" title="3.3.1.ModelAndView"></a>3.3.1.ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ModelAndView 返回！！！&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-ServletAPI"><a href="#3-3-2-ServletAPI" class="headerlink" title="3.3.2.ServletAPI"></a>3.3.2.ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultGo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-SpringMVC"><a href="#3-3-3-SpringMVC" class="headerlink" title="3.3.3.SpringMVC"></a>3.3.3.SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">     <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:hello.do&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-处理提交数据"><a href="#3-4-处理提交数据" class="headerlink" title="3.4.处理提交数据"></a>3.4.处理提交数据</h2><h3 id="3-4-1-提交的域名称和处理方法的参数名一致"><a href="#3-4-1-提交的域名称和处理方法的参数名一致" class="headerlink" title="3.4.1.提交的域名称和处理方法的参数名一致"></a>3.4.1.提交的域名称和处理方法的参数名一致</h3><p>提交数据 : <a href="http://localhost:8080/hello?name=wyl">http://localhost:8080/hello?name=wyl</a></p><p>处理方法 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-2-提交的域名称和处理方法的参数名不一致"><a href="#3-4-2-提交的域名称和处理方法的参数名不一致" class="headerlink" title="3.4.2.提交的域名称和处理方法的参数名不一致"></a>3.4.2.提交的域名称和处理方法的参数名不一致</h3><p>提交数据 : <a href="http://localhost:8080/hello?username=wyl">http://localhost:8080/hello?username=wyl</a></p><p>处理方法 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 请求参数绑定</span></span><br><span class="line"><span class="comment">* 请求的参数中如果有username属性的话，</span></span><br><span class="line"><span class="comment">* SpringMVC会自动将参数传入与方法参数列表对应的入参中</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-3-提交的是一个对象"><a href="#3-4-3-提交的是一个对象" class="headerlink" title="3.4.3.提交的是一个对象"></a>3.4.3.提交的是一个对象</h3><p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p><p>1、实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">   <span class="comment">//构造</span></span><br><span class="line">   <span class="comment">//get/set</span></span><br><span class="line">   <span class="comment">//tostring()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、提交数据 : <a href="http://localhost:8080/mvc04/user?name=wyl&amp;id=1&amp;age=18">http://localhost:8080/mvc04/user?name=wyl&amp;id=1&amp;age=18</a></p><p>3、处理方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*1、接收到的前端用户传递参数，判断参数的名字，假设名字直接在方法上，可以直接使用</span></span><br><span class="line"><span class="comment">*2、假设传递的是一个对象user，就会匹配user对象的字段名；如果字段一致则OK，否则匹配不到</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-获取原生ServletAPI对象"><a href="#3-3-4-获取原生ServletAPI对象" class="headerlink" title="3.3.4.获取原生ServletAPI对象"></a>3.3.4.获取原生ServletAPI对象</h3><p>提交数据 : <a href="http://localhost:8080/hello?username=wyl&amp;password=123456">http://localhost:8080/hello?username=wyl&amp;password=123456</a></p><p>处理方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取原生ServletAPI对象</span></span><br><span class="line"><span class="comment">* 需要哪个对象，在方法入参处定义就好了</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取原生ServletAPI对象。。。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;request：&quot;</span>+request);</span><br><span class="line">        System.out.println(<span class="string">&quot;从request对象中获取的用户名：&quot;</span>+request.getParameter(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;从request对象中获取的密码：&quot;</span>+request.getParameter(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;response：&quot;</span>+response);</span><br><span class="line">        System.out.println(<span class="string">&quot;session：&quot;</span>+request.getSession());</span><br><span class="line">        System.out.println(<span class="string">&quot;application：&quot;</span>+request.getSession().getServletContext());</span><br><span class="line">        <span class="comment">//返回逻辑视图名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-返回结果"><a href="#3-5-返回结果" class="headerlink" title="3.5.返回结果"></a>3.5.返回结果</h2><h3 id="3-5-1-ModelAndView"><a href="#3-5-1-ModelAndView" class="headerlink" title="3.5.1.ModelAndView"></a>3.5.1.ModelAndView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ModelAndView&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-ModelMap"><a href="#3-5-2-ModelMap" class="headerlink" title="3.5.2.ModelMap"></a>3.5.2.ModelMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-Model"><a href="#3-5-3-Model" class="headerlink" title="3.5.3.Model"></a>3.5.3.Model</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span></span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Model 只有寥寥几个方法只适合用于储存数据，简化了新手对于Model对象的操作和理解；</p><p>ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</p><p>ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</p></blockquote><h1 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4.异常处理"></a>4.异常处理</h1><h2 id="4-1-异常处理的思路"><a href="#4-1-异常处理的思路" class="headerlink" title="4.1.异常处理的思路"></a>4.1.异常处理的思路</h2><p>  系统中异常包括两类: 预期异常和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息，后者主要通过规范代码开发、测试通过手段减少运行时异常的发生。 </p><p>  系统的dao、service、controller 出现都通过throws Exception 向上抛出，最后由springmvc 前端控制器交由异常处理器进行异常处理，如下图:</p><p><img src="/images/img/blog/image-20211031203211440.png" alt="image-20211031203211440"></p><h2 id="4-2-编写异常类和错误页面"><a href="#4-2-编写异常类和错误页面" class="headerlink" title="4.2.编写异常类和错误页面"></a>4.2.编写异常类和错误页面</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CustomException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.message = message;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="meta-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>执行失败<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    执行失败！</span><br><span class="line">    $&#123;message &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3-自定义异常处理器"><a href="#4-3-自定义异常处理器" class="headerlink" title="4.3.自定义异常处理器"></a>4.3.自定义异常处理器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    Exception ex</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span> </span>&#123;</span><br><span class="line">    ex.printStackTrace();</span><br><span class="line">    CustomException customException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果抛出的是系统自定义异常则直接转换</span></span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> CustomException) &#123;</span><br><span class="line">      customException = (CustomException) ex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果抛出的不是系统自定义异常则重新构造一个系统错误异常。</span></span><br><span class="line">      customException = <span class="keyword">new</span> CustomException(<span class="string">&quot;系统错误，请与系统管理 员联系！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;message&quot;</span>, customException.getMessage());</span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4"><a href="#4-4" class="headerlink" title="4.4."></a>4.4.</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义异常处理器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerExceptionResolver&quot;</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">&quot;com.wyl.exception.CustomExceptionResolver&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-json处理"><a href="#5-json处理" class="headerlink" title="5.json处理"></a>5.json处理</h1><p>ajax我经常用到，传的数据是json数据，json数据又有对象，数组。所有总结下springmvc获取前端传来的json数据方式</p><h2 id="5-1-Controller接受JSON数据"><a href="#5-1-Controller接受JSON数据" class="headerlink" title="5.1.Controller接受JSON数据"></a>5.1.Controller接受JSON数据</h2><p>作用：</p><p>@ResponseBody注解用于将Controller的方法返回的对象，通过springmvc提供的HttpMessageConverter接口转换为指定格式的数据如：json,xml等，通过Response响应给客户端。</p><p>本例子应用：</p><p>@ResponseBody注解实现将Controller方法返回java对象转换为json响应给客户端。</p><h3 id="5-1-1-以RequestParam接收"><a href="#5-1-1-以RequestParam接收" class="headerlink" title="5.1.1.以RequestParam接收"></a>5.1.1.以RequestParam接收</h3><p>前端传来的是json数据不多时：[id:id],可以直接用@RequestParam来获取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private AccomodationService accomodationService;</span><br><span class="line"></span><br><span class="line">@RequestMapping(value &#x3D; &quot;&#x2F;update&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String updateAttr(@RequestParam (&quot;id&quot;) int id) &#123;</span><br><span class="line">    int res&#x3D;accomodationService.deleteData(id);</span><br><span class="line">    return &quot;success&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-2-以实体类方式接收"><a href="#5-1-2-以实体类方式接收" class="headerlink" title="5.1.2.以实体类方式接收"></a>5.1.2.以实体类方式接收</h3><p>前端传来的是一个json对象时：{【id，name】},可以用实体类直接进行自动绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccomodationService accomodationService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addObj</span><span class="params">(<span class="meta">@RequestBody</span> Accomodation accomodation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accomodationService.insert(accomodation);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-3-以Map接收"><a href="#5-1-3-以Map接收" class="headerlink" title="5.1.3.以Map接收"></a>5.1.3.以Map接收</h3><p>前端传来的是一个json对象时{【id，name】},可以用Map来获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccomodationService accomodationService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAttr</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(<span class="string">&quot;id&quot;</span>)&#123;</span><br><span class="line">        Integer id = Integer.parseInt(map.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(map.containsKey(<span class="string">&quot;name&quot;</span>)&#123;</span><br><span class="line">        String objname = map.get(<span class="string">&quot;name&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作 ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-4-以List接收"><a href="#5-1-4-以List接收" class="headerlink" title="5.1.4.以List接收"></a>5.1.4.以List接收</h3><p>当前端传来这样一个json数组[{id,name},{id,name},{id,name},…]时，用List<E>接收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AccomodationService accomodationService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/update&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">//参数前面必须又@RequestBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateAttr</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Accomodation&gt; list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Accomodation accomodation:list)&#123;</span><br><span class="line">        System.out.println(accomodation.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ajax请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testList=[];</span><br><span class="line"><span class="keyword">var</span> user=&#123;&#125;;</span><br><span class="line">user.id=<span class="number">1</span>;</span><br><span class="line">user.name=<span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line">testList.push(user);</span><br><span class="line"><span class="keyword">var</span> user2=&#123;&#125;;</span><br><span class="line">user2.id=<span class="number">2</span>;</span><br><span class="line">user2.name=<span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">testList.push(user2);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="comment">// headers必须添加，否则会报415错误</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  type: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  dataType: <span class="string">&quot;json&quot;</span>, <span class="comment">//表示返回值类型，不必须</span></span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(testList),</span><br><span class="line">  url: <span class="string">&#x27;/test/postList&#x27;</span>,</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要注意点：1、参数是数组类型</p><p>　　　　　　2、传入data时，转换 JSON.stringify(testList)</p><p>　　　　　　3、必须有headers:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;　<span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line"> 　<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-Controller返回JSON数据"><a href="#5-2-Controller返回JSON数据" class="headerlink" title="5.2.Controller返回JSON数据"></a>5.2.Controller返回JSON数据</h2><h3 id="5-2-1-Jackson"><a href="#5-2-1-Jackson" class="headerlink" title="5.2.1.Jackson"></a>5.2.1.Jackson</h3><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;wyl&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">&quot;wyl&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       String str = mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽取为工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class="line">       ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">       <span class="comment">//ps：Jackson 默认是会把时间转成timestamps形式(取消timestamps形式 ， 自定义时间格式)</span></span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">       <span class="comment">//自定义日期格式对象</span></span><br><span class="line">       SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">       <span class="comment">//指定日期格式</span></span><br><span class="line">       mapper.setDateFormat(sdf);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/jsonUnit&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">   Date date = <span class="keyword">new</span> Date();</span><br><span class="line">   String json = JsonUtils.getJson(date);</span><br><span class="line">   <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-2-FastJson"><a href="#5-2-2-FastJson" class="headerlink" title="5.2.2.FastJson"></a>5.2.2.FastJson</h3><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       User user1 = <span class="keyword">new</span> User(<span class="string">&quot;wyl1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user2 = <span class="keyword">new</span> User(<span class="string">&quot;wyl2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user3 = <span class="keyword">new</span> User(<span class="string">&quot;wyl3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       User user4 = <span class="keyword">new</span> User(<span class="string">&quot;wyl4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">       list.add(user1);</span><br><span class="line">       list.add(user2);</span><br><span class="line">       list.add(user3);</span><br><span class="line">       list.add(user4);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">       String str1 = JSON.toJSONString(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">       String str2 = JSON.toJSONString(user1);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">       User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">       JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">       System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">       User to_java_user = JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-拦截器"><a href="#6-拦截器" class="headerlink" title="6.拦截器"></a>6.拦截器</h1><h2 id="6-1-过滤器与拦截器的区别"><a href="#6-1-过滤器与拦截器的区别" class="headerlink" title="6.1.过滤器与拦截器的区别"></a>6.1.过滤器与拦截器的区别</h2><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了/*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li><p>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</p></li><li><p>拦截器只会拦截访问的控制器方法， 如果访问的是jsp/html/css/image/js是不会进行拦截的</p></li></ul><h2 id="6-2-自定义拦截器"><a href="#6-2-自定义拦截器" class="headerlink" title="6.2.自定义拦截器"></a>6.2.自定义拦截器</h2><p>我们要想自定义拦截器，要求必须实现<strong>HandlerInterceptor</strong> 接口。</p><h3 id="6-2-1-编写一个普通类实现HandlerInterceptor-接口"><a href="#6-2-1-编写一个普通类实现HandlerInterceptor-接口" class="headerlink" title="6.2.1. 编写一个普通类实现HandlerInterceptor 接口"></a>6.2.1. 编写一个普通类实现HandlerInterceptor 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-1-2-配置拦截器"><a href="#6-1-2-配置拦截器" class="headerlink" title="6.1.2. 配置拦截器"></a>6.1.2. 配置拦截器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-3-控制器"><a href="#6-2-3-控制器" class="headerlink" title="6.2.3.控制器"></a>6.2.3.控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/interceptor&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">testFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;控制器中的方法执行了&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-3-前端-index-jsp"><a href="#6-2-3-前端-index-jsp" class="headerlink" title="6.2.3.前端 index.jsp"></a>6.2.3.前端 index.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;</span>拦截器测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20211031205339521.png" alt="image-20211031205339521"></p><h2 id="6-3-拦截器的细节"><a href="#6-3-拦截器的细节" class="headerlink" title="6.3.拦截器的细节"></a>6.3.拦截器的细节</h2><h3 id="6-3-1-拦截器的放行"><a href="#6-3-1-拦截器的放行" class="headerlink" title="6.3.1. 拦截器的放行"></a>6.3.1. 拦截器的放行</h3><p>  放行的含义是指，如果有下一个拦截器就执行下一个，如果该拦截器处于拦截器链的最后一个，则执行控制器中的方法。                            </p><h3 id="6-3-2-拦截器中方法的说明"><a href="#6-3-2-拦截器中方法的说明" class="headerlink" title="6.3.2.拦截器中方法的说明"></a>6.3.2.拦截器中方法的说明</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * preHandle方法是controller方法执行前拦截的方法，按拦截器定义顺序调用</span></span><br><span class="line"><span class="comment">   *    return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法进行业务处理。</span></span><br><span class="line"><span class="comment">   *    return false不放行，不会执行controller中的方法或调用其他的组件。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * postHandle是controller方法执行后执行的方法，在JSP视图执行前，按拦截器定义逆序调用。</span></span><br><span class="line"><span class="comment">   *     可以使用request或者response跳转到指定的页面</span></span><br><span class="line"><span class="comment">   *     如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> ModelAndView modelAndView</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * afterCompletion方法是在JSP执行后执行，按拦截器定义逆序调用</span></span><br><span class="line"><span class="comment">   *      注意：因为结果页面已经返回完了，不能在该方法使用request或者response再跳转页面，但可以在该方法中进行一些资源清理的操作。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@Nullable</span> Exception ex</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-3-拦截器的作用路径"><a href="#6-3-3-拦截器的作用路径" class="headerlink" title="6.3.3. 拦截器的作用路径"></a>6.3.3. 拦截器的作用路径</h3><p>作用路径可以通过在配置文件中配置。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器的作用范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span> /&gt;</span><span class="comment">&lt;!-- 用于指定对拦截的url --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="comment">&lt;!-- 用于指定排除的url--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;handlerInterceptorDemo1&quot;</span> </span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">&quot;com.wyl.interceptor.HandlerInterceptorDemo1&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-3-4-多个拦截器的执行顺序"><a href="#6-3-4-多个拦截器的执行顺序" class="headerlink" title="6.3.4. 多个拦截器的执行顺序"></a>6.3.4. 多个拦截器的执行顺序</h3><p>多个拦截器是按照配置的顺序决定的。 </p><p><img src="/images/img/blog/image-20211031210341808.png" alt="image-20211031210341808">                              </p><h4 id="6-3-4-1-拦截器1-的代码"><a href="#6-3-4-1-拦截器1-的代码" class="headerlink" title="6.3.4.1. 拦截器1 的代码"></a>6.3.4.1. 拦截器1 的代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorDemo1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器 1: preHandle 拦截器拦截了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    ModelAndView modelAndView</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器 1: postHandle 方法执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    Exception ex</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器 1: afterCompletion 方法执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-4-2-拦截器2-的代码"><a href="#6-3-4-2-拦截器2-的代码" class="headerlink" title="6.3.4.2. 拦截器2 的代码:"></a>6.3.4.2. 拦截器2 的代码:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerInterceptorDemo2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器2: preHandle 拦截器拦截了&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    ModelAndView modelAndView</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器2: postHandle 方法执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">    HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">    Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">    Exception ex</span></span></span><br><span class="line"><span class="function"><span class="params">  )</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;拦截器2: afterCompletion 方法执行了&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-4-3-配置拦截器的作用范围"><a href="#6-3-4-3-配置拦截器的作用范围" class="headerlink" title="6.3.4.3.配置拦截器的作用范围"></a>6.3.4.3.配置拦截器的作用范围</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:mapping</span> *<span class="attr">path</span>*=<span class="string">&quot;/**&quot;</span> /&gt;</span>*<span class="comment">&lt;!--* *用于指定对拦截的**url --&gt;</span>*</span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> *<span class="attr">id</span>*=<span class="string">&quot;handlerInterceptorDemo1&quot;</span> *<span class="attr">class</span>*=<span class="string">&quot;com.wyl.interceptor.HandlerInterceptorDemo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:mapping</span> *<span class="attr">path</span>*=<span class="string">&quot;/**&quot;</span> /&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> *<span class="attr">id</span>*=<span class="string">&quot;handlerInterceptorDemo2&quot;</span> *<span class="attr">class</span>*=<span class="string">&quot;com.wyl.interceptor.HandlerInterceptorDemo2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20211031211536627.png" alt="image-20211031211536627"></p><h4 id="6-3-4-4-中断流程测试"><a href="#6-3-4-4-中断流程测试" class="headerlink" title="6.3.4.4.中断流程测试"></a>6.3.4.4.中断流程测试</h4><p><strong>拦截器2 返回false</strong></p><p><img src="/images/img/blog/image-20211031211651464.png" alt="image-20211031211651464"></p><h1 id="7-上传文件"><a href="#7-上传文件" class="headerlink" title="7.上传文件"></a>7.上传文件</h1><p><img src="/images/img/blog/image-20211031200658387.png" alt="image-20211031200658387"></p><h2 id="7-1-导入文件上传的jar包"><a href="#7-1-导入文件上传的jar包" class="headerlink" title="7.1.导入文件上传的jar包"></a>7.1.导入文件上传的jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传</span></span><br><span class="line"><span class="comment">commons-io 不属于文件上传组件的开发jar 文件，但Commons-fileupload 组件从1.1 版本开始，它 </span></span><br><span class="line"><span class="comment">工作时需要commons-io 包的支持。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-2-编写文件上传的jsp-页面"><a href="#7-2-编写文件上传的jsp-页面" class="headerlink" title="7.2. 编写文件上传的jsp 页面"></a>7.2. 编写文件上传的jsp 页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;user/fileupload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><p>至少有一个文件选择域 <input type="file" /> </p></li><li><p>以POST方式提交</p></li><li><p>表单的enctype必须为 multipart/form-data</p></li></ol></blockquote><h2 id="7-3-控制器-非SpringMVC版"><a href="#7-3-控制器-非SpringMVC版" class="headerlink" title="7.3.控制器(非SpringMVC版)"></a>7.3.控制器(非SpringMVC版)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">   <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">       String uploadFileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       String path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">       <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">       File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">       InputStream is = file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">       OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取写出</span></span><br><span class="line">       <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           os.flush();</span><br><span class="line">      &#125;</span><br><span class="line">       os.close();</span><br><span class="line">       is.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4-SpringMVC配置信息"><a href="#7-4-SpringMVC配置信息" class="headerlink" title="7.4.SpringMVC配置信息"></a>7.4.SpringMVC配置信息</h2><p>SpringMVC框架提供了MultipartFile对象，该对象表示上传的文件，要求变量名称必须和表单file标签的name属性名称相同。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置文件解析器对象，要求id名称必须是multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置上传文件的最大尺寸为5MB --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property name=&quot;maxUploadSize&quot; value=&quot;10485760&quot;/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="7-5-控制器代码-SpringMVC版"><a href="#7-5-控制器代码-SpringMVC版" class="headerlink" title="7.5.控制器代码(SpringMVC版)"></a>7.5.控制器代码(SpringMVC版)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* SpringMVC方式的文件上传</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/fileupload2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload2</span><span class="params">(HttpServletRequest request,MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;SpringMVC方式的文件上传...&quot;</span>);</span><br><span class="line">    <span class="comment">// 先获取到要上传的文件目录</span></span><br><span class="line">    String path = request.getSession().getServletContext().getRealPath(<span class="string">&quot;/uploads&quot;</span>);</span><br><span class="line">    <span class="comment">// 创建File对象，一会向该路径下上传文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="comment">// 判断路径是否存在，如果不存在，创建该路径</span></span><br><span class="line">    <span class="keyword">if</span>(!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">    <span class="comment">// 把文件的名称唯一化</span></span><br><span class="line">    filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">    <span class="comment">// 上传文件</span></span><br><span class="line">    upload.transferTo(<span class="keyword">new</span> File(file,filename));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-6-跨服务器"><a href="#7-6-跨服务器" class="headerlink" title="7.6.跨服务器"></a>7.6.跨服务器</h2><p>准备两个tomcat 服务器，其中一个作为文件服务器，一个作为应用服务器。</p><p><img src="/images/img/blog/image-20211031202525522.png" alt="image-20211031202525522">                        </p><h3 id="7-6-1-在文件服务器tomcat的web-xml中修改tomcat配置，允许读写操作。"><a href="#7-6-1-在文件服务器tomcat的web-xml中修改tomcat配置，允许读写操作。" class="headerlink" title="7.6.1.在文件服务器tomcat的web.xml中修改tomcat配置，允许读写操作。"></a>7.6.1.在文件服务器tomcat的web.xml中修改tomcat配置，允许读写操作。</h3><p><img src="/images/img/blog/image-20211031202713533.png" alt="image-20211031202713533"></p><h3 id="7-6-2-导入包"><a href="#7-6-2-导入包" class="headerlink" title="7.6.2.导入包"></a>7.6.2.导入包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-6-3-控制器"><a href="#7-6-3-控制器" class="headerlink" title="7.6.3.控制器"></a>7.6.3.控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">**</span><br><span class="line">* SpringMVC跨服务器方式的文件上传</span><br><span class="line">*/</span><br><span class="line"><span class="meta">@RequestMapping(value=&quot;/fileupload3&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileupload3</span><span class="params">(MultipartFile upload)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SpringMVC跨服务器方式的文件上传...&quot;</span>);</span><br><span class="line">    <span class="comment">// 定义图片服务器的请求路径</span></span><br><span class="line">    String path = <span class="string">&quot;http://localhost:9090/day02_springmvc5_02image/uploads/&quot;</span>;</span><br><span class="line">    <span class="comment">// 获取到上传文件的名称</span></span><br><span class="line">    String filename = upload.getOriginalFilename();</span><br><span class="line">    String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toUpperCase();</span><br><span class="line">    <span class="comment">// 把文件的名称唯一化</span></span><br><span class="line">    filename = uuid+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向图片服务器上传文件</span></span><br><span class="line">    <span class="comment">// 创建客户端对象(sun公司提供的jersey 包)</span></span><br><span class="line">    Client client = Client.create();</span><br><span class="line">    <span class="comment">// 连接图片服务器</span></span><br><span class="line">    WebResource webResource = client.resource(path+filename);</span><br><span class="line">    <span class="comment">// 上传文件 //String result = resource.put(String.class,uploadFile.getBytes());  </span></span><br><span class="line">    webResource.put(upload.getBytes());</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-7-下载"><a href="#7-7-下载" class="headerlink" title="7.7.下载"></a>7.7.下载</h2><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   String  path = request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   String  fileName = <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   File file = <span class="keyword">new</span> File(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   OutputStream out = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">byte</span>[] buff =<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/download&quot;</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p><p>拦截器及文件操作在我们开发中十分重要，一定要学会使用！</p><h1 id="8-整合ssm"><a href="#8-整合ssm" class="headerlink" title="8.整合ssm"></a>8.整合ssm</h1><h2 id="8-1-前期准备"><a href="#8-1-前期准备" class="headerlink" title="8.1.前期准备"></a>8.1.前期准备</h2><p>环境：</p><ul><li>IDEA</li><li>MySQL 8.0.18</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p>创建数据库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &#96;wyl&#96;;</span><br><span class="line"></span><br><span class="line">USE &#96;wyl&#96;;</span><br><span class="line"></span><br><span class="line">DROP TABLE IF EXISTS &#96;users&#96;;</span><br><span class="line">CREATE TABLE &#96;users&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;username&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,</span><br><span class="line">  &#96;password&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,</span><br><span class="line">  &#96;email&#96; varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,</span><br><span class="line">  &#96;gender&#96; int(255) NULL DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 1 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_bin ROW_FORMAT &#x3D; Dynamic;</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20211026144016031.png" alt="image-20211026144016031"></p><h2 id="8-1-项目搭建"><a href="#8-1-项目搭建" class="headerlink" title="8.1.项目搭建"></a>8.1.项目搭建</h2><h3 id="8-1-1-创建项目"><a href="#8-1-1-创建项目" class="headerlink" title="8.1.1.创建项目"></a>8.1.1.创建项目</h3><h3 id="8-1-2-导入相关的pom依赖"><a href="#8-1-2-导入相关的pom依赖" class="headerlink" title="8.1.2.导入相关的pom依赖"></a>8.1.2.导入相关的pom依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 依赖：junit，数据库驱动，连接池，servlet，jsp，mybatis，mybatis-spring，spring --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--spring--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-1-2-静态资源导出"><a href="#8-1-2-静态资源导出" class="headerlink" title="8.1.2.静态资源导出"></a>8.1.2.静态资源导出</h3><p><img src="/images/img/blog/image-20211026144643571.png" alt="image-20211026144643571"></p><h3 id="8-1-3-项目结构"><a href="#8-1-3-项目结构" class="headerlink" title="8.1.3.项目结构"></a>8.1.3.项目结构</h3><p><img src="/images/img/blog/image-20211026144812649.png" alt="image-20211026144812649"></p><h3 id="8-1-4-配置"><a href="#8-1-4-配置" class="headerlink" title="8.1.4.配置"></a>8.1.4.配置</h3><h4 id="8-1-4-1-mybatis"><a href="#8-1-4-1-mybatis" class="headerlink" title="8.1.4.1.mybatis"></a>8.1.4.1.mybatis</h4><p> <strong>database.properties</strong>(数据库配置文件)</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span> = <span class="string">jdbc:mysql://127.0.0.1:3306/wyl?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">wyl190204-</span></span><br></pre></td></tr></table></figure><p><strong>mybatis-config.xml</strong>(核心配置文件)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--转为驼峰--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;settings&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/settings&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wyl.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.dao.UsersMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-1-4-2-spring"><a href="#8-1-4-2-spring" class="headerlink" title="8.1.4.2.spring"></a>8.1.4.2.spring</h4><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.wyl.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>spring-service.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-1-4-3-spring-mvc"><a href="#8-1-4-3-spring-mvc" class="headerlink" title="8.1.4.3.spring-mvc"></a>8.1.4.3.spring-mvc</h4><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="meta-string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描注解所在包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wyl.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置JSP视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置文件所在目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/pages/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置文件的后缀名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-1-1-4-整合"><a href="#8-1-1-4-整合" class="headerlink" title="8.1.1.4.整合"></a>8.1.1.4.整合</h4><p><strong>applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;springmvc-servlet.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-代码实现"><a href="#8-2-代码实现" class="headerlink" title="8.2.代码实现"></a>8.2.代码实现</h2><h3 id="8-2-1-pojo"><a href="#8-2-1-pojo" class="headerlink" title="8.2.1.pojo"></a>8.2.1.pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oracle.webservices.internal.api.databinding.DatabindingMode;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/25</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-2-dao"><a href="#8-2-2-dao" class="headerlink" title="8.2.2.dao"></a>8.2.2.dao</h3><p>UsersMapper.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wyl.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/25</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(Users user)</span></span>;</span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(Users user)</span></span>;</span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="function">Users <span class="title">queryUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//集合</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UsersMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wyl.dao.UsersMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">        insert into users(id,username,password,email,gender) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from users where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">        update users set username=#&#123;username&#125;,password=#&#123;password&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125; where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">        select * from users where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUsers&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">    SELECT * FROM users</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">        select * from users where username like &#x27;%$&#123;name&#125;%&#x27;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-3-service"><a href="#8-2-3-service" class="headerlink" title="8.2.3.service"></a>8.2.3.service</h3><p><strong>UsersService</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wyl.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/25</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UsersService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(Users user)</span></span>;</span><br><span class="line">    <span class="comment">//删</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(Users user)</span></span>;</span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="function">Users <span class="title">queryUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//集合</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUsers</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//查</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">queryUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UsersServiceImpl</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.wyl.service.impl;</span><br><span class="line"></span><br><span class="line">import com.wyl.dao.UsersMapper;</span><br><span class="line">import com.wyl.pojo.Users;</span><br><span class="line">import com.wyl.service.UsersService;</span><br><span class="line">import org.omg.CORBA.PUBLIC_MEMBER;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @创建人 王延领</span><br><span class="line"> * @创建时间 2021&#x2F;10&#x2F;25</span><br><span class="line"> * 描述</span><br><span class="line"> **&#x2F;</span><br><span class="line">public class UsersServiceImpl implements UsersService &#123;</span><br><span class="line">    private UsersMapper userMapper;</span><br><span class="line"></span><br><span class="line">    public void setUserMapper(UsersMapper userMapper) &#123;</span><br><span class="line">        this.userMapper &#x3D; userMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int addUser(Users user) &#123;</span><br><span class="line">        int i &#x3D; userMapper.addUser(user);</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int delUser(int id) &#123;</span><br><span class="line">        int i &#x3D; userMapper.delUser(id);</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int updateUser(Users user) &#123;</span><br><span class="line">        int i &#x3D; userMapper.updateUser(user);</span><br><span class="line">        return i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Users queryUser(int id) &#123;</span><br><span class="line">        return userMapper.queryUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Users&gt; queryUsers() &#123;</span><br><span class="line">        return userMapper.queryUsers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;Users&gt; queryUserByName(String name)</span><br><span class="line">    &#123;</span><br><span class="line">    return userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-4-controller"><a href="#8-2-4-controller" class="headerlink" title="8.2.4.controller"></a>8.2.4.controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wyl.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.wyl.service.UsersService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/10/25</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsersController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;UsersServiceImpl&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UsersService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/userList&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">userList</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Users&gt; users = userService.queryUsers();</span><br><span class="line">        users.sort(Comparator.comparingInt(Users::getId));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toAddUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;addUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;addUser =&gt;&quot;</span> + user);</span><br><span class="line">        <span class="keyword">int</span> i = userService.addUser(user);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/user/userList&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toUpdateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toUpdateUser</span><span class="params">(<span class="keyword">int</span> id, Model model)</span> </span>&#123;</span><br><span class="line">        Users user = userService.queryUser(id);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(Users user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;updateUser =&gt;&quot;</span> + user);</span><br><span class="line">        <span class="keyword">int</span> i = userService.updateUser(user);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/user/userList&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/deleteUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;deleteUser =&gt;&quot;</span> + id);</span><br><span class="line">        <span class="keyword">int</span> i = userService.delUser(id);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/user/userList&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部书籍，并且返回到一个书籍展示页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/byName&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ByName</span><span class="params">(String name, Model model)</span> </span>&#123;</span><br><span class="line">        List&lt;Users&gt; users = userService.queryUserByName(name);</span><br><span class="line">        <span class="keyword">if</span> (users == <span class="keyword">null</span> || users.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;未查询到用户&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;userList&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;users =&gt;&quot;</span> + users);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        users.sort(Comparator.comparingInt(Users::getId));</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">&quot;list&quot;</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-3-page"><a href="#8-3-page" class="headerlink" title="8.3.page"></a>8.3.page</h2><p><strong>userList.jsp</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 17144</span><br><span class="line">  Date: 2021/10/25</span><br><span class="line">  Time: 16:04</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>展示页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">small</span>&gt;</span>用户列表 ------ 显示所有用户<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-4&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/toAddUser&quot;</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-6 right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;navbar-form navbar-right&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/byName&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-default&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">&quot;user&quot;</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.id&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.username&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.password&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;user.email&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/toUpdateUser?id=$&#123;user.id&#125;&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/deleteUser?id=$&#123;user.id&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>$&#123;error&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>aaUser.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 17144</span><br><span class="line">  Date: 2021/10/25</span><br><span class="line">  Time: 16:09</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">small</span>&gt;</span>新增用户<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/addUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;添加&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>updateUser.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 17144</span><br><span class="line">  Date: 2021/10/25</span><br><span class="line">  Time: 16:12</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">small</span>&gt;</span>修改用户<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/updateUser&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span></span><br><span class="line">    名称<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    邮箱<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;$&#123;user.gender&#125;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;修改&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>error.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 17144</span><br><span class="line">  Date: 2021/10/25</span><br><span class="line">  Time: 16:04</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>ERROR页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20211026152545180.png" alt="image-20211026152545180"></p>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker快速入门</title>
      <link href="2021/09/06/java/firststage/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/09/06/java/firststage/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-参考资料"><a href="#1-参考资料" class="headerlink" title="1.参考资料"></a>1.参考资料</h1><p>官方文档：<a href="https://docs.docker.com/docker-for-windows/">https://docs.docker.com/docker-for-windows/</a><br>仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h1 id="2-Docker-的安装"><a href="#2-Docker-的安装" class="headerlink" title="2.Docker 的安装"></a>2.Docker 的安装</h1><h2 id="2-1-docker的组成部分"><a href="#2-1-docker的组成部分" class="headerlink" title="2.1.docker的组成部分"></a>2.1.docker的组成部分</h2><p><img src="/images/img/blog/image-20210819174532504.png" alt="image-20210819174532504"></p><ol><li><p><strong>镜像(image)：</strong>docker镜像好比一个模板，可以通过这个模板来创建容器(container)，一个镜像可以创建多个容器，类似java中的Class</p></li><li><p><strong>容器(container)：</strong>类似java中通过Class创建的<strong>实例</strong>；容器可以理解为一个简易的linux系统</p></li><li><p><strong>仓库(repository)：</strong>存放镜像的地方，</p><p>分为共有仓库和私有仓库</p><ul><li><p>Docker Hub：国外的</p></li><li><p>阿里云：配置镜像加速</p></li></ul></li></ol><h2 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2.环境准备"></a>2.2.环境准备</h2><p>我们要有一台服务器，并且可以操作它</p><ol><li><p>Linux命令基础</p></li><li><p>CentOS 7</p></li><li><p>使用Xshell链接远程服务器(免费版即可)</p><p><img src="/images/img/blog/image-20210819175245515.png" alt="image-20210819175245515"></p></li></ol><h2 id="2-3-安装docker"><a href="#2-3-安装docker" class="headerlink" title="2.3. 安装docker"></a>2.3. 安装docker</h2><p>   <a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br><strong>卸载旧的版本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p><strong>安装基本的安装包</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210903152542051.png" alt="image-20210903152542051"></p><p><strong>设置镜像的仓库</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="keyword">add</span><span class="bash">-repo \</span></span><br><span class="line"><span class="bash">    https://download.docker.com/linux/centos/docker-ce.repo <span class="comment"># 默认是国外的</span></span></span><br><span class="line">    </span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --<span class="keyword">add</span><span class="bash">-repo \</span></span><br><span class="line"><span class="bash">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <span class="comment"># 阿里云镜像</span></span></span><br></pre></td></tr></table></figure><p>安装docker引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p><strong>安装docker引擎</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io # docker-ce 社区版 ee 企业版</span><br></pre></td></tr></table></figure><p>CentOS 8中安装Docker出现和Podman冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum erase podman buildah</span><br></pre></td></tr></table></figure><p>继续执行安装即可</p><p><img src="/images/img/blog/image-20210820141207869.png" alt="image-20210820141207869"></p><p><img src="/images/img/blog/image-20210820141236727.png"></p><p><img src="/images/img/blog/image-20210819182217338.png" alt="image-20210819182217338"></p><h2 id="2-4-启动docker"><a href="#2-4-启动docker" class="headerlink" title="2.4.启动docker"></a>2.4.启动docker</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker <span class="comment"># 代表启动成功</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210819182453373.png" alt="image-20210819182453373"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210819182627553.png" alt="image-20210819182627553"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210819183126098.png" alt="image-20210819183126098"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210819183003591.png" alt="image-20210819183003591"></p><h2 id="2-5-卸载Docker"><a href="#2-5-卸载Docker" class="headerlink" title="2.5.卸载Docker"></a>2.5.卸载Docker</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 删除资源</span></span><br><span class="line">rm -rf /var/lib/docker <span class="comment"># docker 的默认工作路径</span></span><br></pre></td></tr></table></figure><h1 id="3-docker-常用命令"><a href="#3-docker-常用命令" class="headerlink" title="3.docker 常用命令"></a>3.docker 常用命令</h1><p>以上已经用到了一些相关命名下面整体介绍一下。</p><p><strong>命令参考地址：</strong></p><p><a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p><p><img src="/images/img/blog/image-20210820142951687.png" alt="image-20210820142951687"></p><h2 id="3-1-全局命令"><a href="#3-1-全局命令" class="headerlink" title="3.1. 全局命令"></a>3.1. 全局命令</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version <span class="comment"># 显示docker的基本信息</span></span><br><span class="line">docker info <span class="comment"># 系统信息，镜像和容器的数量</span></span><br><span class="line">docker 命令 --help <span class="comment"># 全部信息</span></span><br></pre></td></tr></table></figure><h2 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2.镜像命令"></a>3.2.镜像命令</h2><h3 id="3-2-1-docker-images"><a href="#3-2-1-docker-images" class="headerlink" title="3.2.1.docker images"></a>3.2.1.docker images</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker images <span class="comment"># 查看所有本地主机上的镜像</span></span><br><span class="line">--all , -aShow all images (default hides intermediate images) <span class="comment"># 显示所有</span></span><br><span class="line">--digestsShow digests</span><br><span class="line">--filter , -fFilter output based on conditions provided</span><br><span class="line">--formatPretty-print images using a Go template</span><br><span class="line">--no-truncDon’t truncate output</span><br><span class="line">--quiet , -qOnly show numeric IDs <span class="comment"># 只显示id</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210820143814479.png" alt="image-20210820143814479"></p><h3 id="3-2-2-docker-search"><a href="#3-2-2-docker-search" class="headerlink" title="3.2.2. docker search"></a>3.2.2. docker search</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-f, --filter filter   Filter output based on conditions provided</span><br><span class="line">      --format string   Pretty-print search using a Go template</span><br><span class="line">      --limit int       Max number of search results (default <span class="number">25</span>)</span><br><span class="line">      --no-trunc        Don<span class="string">&#x27;t truncate output</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210820143959955.png" alt="image-20210820143959955"></p><h3 id="3-2-3-docker-pull"><a href="#3-2-3-docker-pull" class="headerlink" title="3.2.3.docker pull"></a>3.2.3.docker pull</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql <span class="comment"># 下载mysql镜像，default tag，默认最新版latest</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210820144647100.png" alt="image-20210820144647100"></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定版本下载 </span></span><br><span class="line">docker pull mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure><p>分层下载的好处是：不同的版本相同的部分不用重新下载。</p><h3 id="3-2-4-docker-rmi"><a href="#3-2-4-docker-rmi" class="headerlink" title="3.2.4. docker rmi"></a>3.2.4. docker rmi</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除一个 可以通过名称 也可以指定id -f表示删除所有</span></span><br><span class="line">docker rmi -f d1165f221234</span><br><span class="line"><span class="comment"># 删除多个 用空格分隔id</span></span><br><span class="line">docker rmi -f id id id</span><br><span class="line"><span class="comment"># 删除所有 </span></span><br><span class="line">docker rmi -f $(docker images -aq) <span class="comment"># images -aq就是查所有镜像id，从而递归删除</span></span><br></pre></td></tr></table></figure><h2 id="3-2-容器命令"><a href="#3-2-容器命令" class="headerlink" title="3.2.容器命令"></a>3.2.容器命令</h2><p>有了镜像才能创建容器，linux，下载一个centos镜像来测试学习</p><h3 id="3-2-1-新建容器并启动"><a href="#3-2-1-新建容器并启动" class="headerlink" title="3.2.1.新建容器并启动"></a>3.2.1.新建容器并启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name=“Name” <span class="comment"># 容器名字，用于区分容器</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it 使用交互方式运行，进入容器查看内容</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 端口映射 主机端口::容器端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 卷挂载</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -e 配置</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker run -d -p 3310:3306 -v /home/mysql/conf:/etc/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904182919157.png" alt="image-20210904182919157"></p><h3 id="3-2-2-进入容器"><a href="#3-2-2-进入容器" class="headerlink" title="3.2.2.进入容器"></a>3.2.2.进入容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 1de87c606832 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904184742854.png" alt="image-20210904184742854"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># docker attach 1de87c606832</span><br></pre></td></tr></table></figure><blockquote><p>区别<br>docker exec # 进入容器后开启一个新的终端，可以在里面操作(常用)<br>docker attach 进入容器正在执行的终端，不会启动新的进程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看目录</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904184829645.png" alt="image-20210904184829645"></p><h3 id="3-2-3-查看容器"><a href="#3-2-3-查看容器" class="headerlink" title="3.2.3.查看容器"></a>3.2.3.查看容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看曾经运行的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示最近创建的容器，设置显示个数</span></span><br><span class="line">docker ps -a - n=? </span><br><span class="line"><span class="meta">#</span><span class="bash"> 只显示容器的编号</span></span><br><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904184911149.png" alt="image-20210904184911149"></p><h3 id="3-2-4-退出容器"><a href="#3-2-4-退出容器" class="headerlink" title="3.2.4.退出容器"></a>3.2.4.退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 容器停止退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器不停止退出 注意必须在英文输入法下，中文输入法不行</span></span><br><span class="line">Ctrl + P + Q</span><br></pre></td></tr></table></figure><h3 id="3-2-5-删除容器"><a href="#3-2-5-删除容器" class="headerlink" title="3.2.5.删除容器"></a>3.2.5.删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除指定容器 不能删除正在运行的容器，如果强制删除 rm -f</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除所有容器</span></span><br><span class="line">docker ps -a -q|xargs docker rm</span><br></pre></td></tr></table></figure><h3 id="3-2-6-导入导出"><a href="#3-2-6-导入导出" class="headerlink" title="3.2.6.导入导出"></a>3.2.6.导入导出</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export $CONTAINER_ID &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904191302799.png" alt="image-20210904191302799"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat docker/ubuntu.tar | docker import - <span class="built_in">test</span>/ubuntu:v1</span></span><br></pre></td></tr></table></figure><h3 id="3-2-7-自动重启"><a href="#3-2-7-自动重启" class="headerlink" title="3.2.7.自动重启"></a>3.2.7.自动重启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --restart=always 容器id（或者容器名称）</span><br><span class="line"><span class="meta">#</span><span class="bash">no - container：不重启</span></span><br><span class="line"><span class="meta">#</span><span class="bash">on-failure - container:退出状态非0时重启</span></span><br><span class="line"><span class="meta">#</span><span class="bash">always:始终重启</span></span><br><span class="line">docker update --restart=always  容器id（或者容器名称）</span><br></pre></td></tr></table></figure><h3 id="3-2-8-相关状态"><a href="#3-2-8-相关状态" class="headerlink" title="3.2.8.相关状态"></a>3.2.8.相关状态</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start $CONTAINER_ID</span><br><span class="line">docker restart $CONTAINER_ID</span><br><span class="line">docker stop $CONTAINER_ID</span><br><span class="line">docker kill $CONTAINER_ID</span><br></pre></td></tr></table></figure><h2 id="3-3-常用其他命令"><a href="#3-3-常用其他命令" class="headerlink" title="3.3.常用其他命令"></a>3.3.常用其他命令</h2><h3 id="3-3-1-后台启动docker"><a href="#3-3-1-后台启动docker" class="headerlink" title="3.3.1.后台启动docker"></a>3.3.1.后台启动docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用docker ps 查看的时候 发现停止了</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台运行，docker发现前台没有，容器启动后，发现自己没有提供服务，会立刻停止</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-查看日志"><a href="#3-3-2-查看日志" class="headerlink" title="3.3.2.查看日志"></a>3.3.2.查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br><span class="line">docker logs -f --tail=20  $CONTAINER_ID #查看最新20行</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210903164046849.png" alt="image-20210903164046849"></p><h3 id="3-3-3-查看容器信息"><a href="#3-3-3-查看容器信息" class="headerlink" title="3.3.3.查看容器信息"></a>3.3.3.查看容器信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect $CONTAINER_ID </span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210903162732212.png" alt="image-20210903162732212"></p><h3 id="3-3-4-文件copy"><a href="#3-3-4-文件copy" class="headerlink" title="3.3.4.文件copy"></a>3.3.4.文件copy</h3><p>容器copy 到主机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp $CONTAINER_ID:路径 空格 主机路径</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 83b0be074d94:/etc/mysql /home</span><br></pre></td></tr></table></figure><p>主机copy 到容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 主机路径 空格 $CONTAINER_ID:路径</span><br></pre></td></tr></table></figure><p>后面我们会遇到 <strong>卷</strong></p><h3 id="3-3-5-任务管理器"><a href="#3-3-5-任务管理器" class="headerlink" title="3.3.5.任务管理器"></a>3.3.5.任务管理器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210903170459968.png" alt="image-20210903170459968"></p><h1 id="4-容器数据卷"><a href="#4-容器数据卷" class="headerlink" title="4.容器数据卷"></a>4.容器数据卷</h1><p>在Docker中，要想实现数据的持久化，数据就不应该在容器中，否则容器删除，数据就会丢失。故容器之间要有一个数据共享技术，把Docker容器中产生的数据，同步到本地，这就是卷技术。</p><p><strong>优点</strong></p><ol><li><p>容器的持久化和同步操作</p></li><li><p>容器间可以数据共享</p></li></ol><p><img src="/images/img/blog/image-20210903171643089.png" alt="image-20210903171643089"></p><h2 id="4-1-使用数据卷"><a href="#4-1-使用数据卷" class="headerlink" title="4.1.使用数据卷"></a>4.1.使用数据卷</h2><p>目前Docker提供了三种不同的方式将数据从宿主机挂载到容器中：</p><p>　　（1）volumes：Docker管理宿主机文件系统的一部分，默认位于 /var/lib/docker/volumes 目录中；（最常用的方式）</p><p><img src="/images/img/blog/~%7DN%5DSM%60E8%5DFCVQ1FCXCEJZV.png" alt="img">（2）bind mounts：意为着可以存储在宿主机系统的任意位置；（比较常用的方式）</p><p>　　但是，bind mount在不同的宿主机系统时不可移植的，比如Windows和Linux的目录结构是不一样的，bind mount所指向的host目录也不能一样。这也是为什么bind mount不能出现在Dockerfile中的原因，因为这样Dockerfile就不可移植了。</p><p>　　（3）tmpfs：挂载存储在宿主机系统的内存中，而不会写入宿主机的文件系统；（一般都不会用的方式)</p><p><img src="/images/img/blog/381412-20190808225945967-659254433.png" alt="img"></p><h3 id="4-1-1-命令挂载"><a href="#4-1-1-命令挂载" class="headerlink" title="4.1.1.命令挂载"></a>4.1.1.命令挂载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v -p  /宿主机绝对路径:/容器内目录：权限   镜像名</span><br><span class="line"><span class="meta">#</span><span class="bash"> -it 交互式进入</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v volume卷技术</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 主机端口</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 挂载</span></span><br><span class="line">docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql</span><br><span class="line"></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置 安装启动mysql需要配置密码</span><br><span class="line">--name 容器名字</span><br></pre></td></tr></table></figure><p>主机目录/home/mysql/conf与/etc/mysql/conf容器目录同步。</p><p>查看其信息</p><p><img src="/images/img/blog/image-20210903172302584.png" alt="image-20210903172302584"></p><p>soruce:主机地址</p><p>destination:容器地址</p><h3 id="4-1-2-匿名与具名挂载"><a href="#4-1-2-匿名与具名挂载" class="headerlink" title="4.1.2.匿名与具名挂载"></a>4.1.2.匿名与具名挂载</h3><p><strong>匿名挂载</strong>：卷挂载只写容器里面的路径，不写容器外的路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -v 容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br></pre></td></tr></table></figure><p><strong>具名挂载：</strong>就是挂载的卷陪一个自己的名字，可以方便的查找</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> -v 卷名:/容器内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v wyl-nginx:/etc/nginx nginx</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905000343906.png" alt="image-20210905000343906"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 6d4a76d84a35</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905000512455.png" alt="image-20210905000512455"></p><h3 id="4-1-3-查看卷信息"><a href="#4-1-3-查看卷信息" class="headerlink" title="4.1.3.查看卷信息"></a>4.1.3.查看卷信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect wyl-nginx</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905000602511.png" alt="image-20210905000602511"></p><h3 id="4-1-4-改变文件的读写权限"><a href="#4-1-4-改变文件的读写权限" class="headerlink" title="4.1.4.改变文件的读写权限"></a>4.1.4.改变文件的读写权限</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ro: <span class="built_in">readonly</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rw: readwrite</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定容器对我们挂载出来的内容的读写权限</span></span><br><span class="line">docker run -d -P --name nginx01 -v nginxconfig:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx01 -v nginxconfig:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><h2 id="4-2-查看所有的数据卷"><a href="#4-2-查看所有的数据卷" class="headerlink" title="4.2.查看所有的数据卷"></a>4.2.查看所有的数据卷</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905001800959.png" alt="image-20210905001800959"></p><h2 id="4-3-共享卷"><a href="#4-3-共享卷" class="headerlink" title="4.3.共享卷"></a>4.3.共享卷</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name nginx03 --volumes-from nginx02 nginx:latest</span><br></pre></td></tr></table></figure><p>nginx03继承nginx02的volumes</p><p>可以验证，在nginx02下加一个数据，在nginx03下也会出现</p><p>删除容器共享文件不会删除。</p><h1 id="5-dockerFile"><a href="#5-dockerFile" class="headerlink" title="5.dockerFile"></a>5.dockerFile</h1><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h2 id="5-1-命令"><a href="#5-1-命令" class="headerlink" title="5.1.命令"></a>5.1.命令</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> <span class="comment"># 基础镜像 比如centos</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> <span class="comment"># 镜像是谁写的 姓名+邮箱</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="comment"># 镜像构建时需要运行的命令</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> <span class="comment"># 添加，比如添加一个tomcat压缩包</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="comment"># 镜像的工作目录</span></span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> <span class="comment"># 挂载的目录</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="comment"># 指定暴露端口，跟-p一个道理</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="comment"># 最终要运行的</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，只有最后一个会生效，而且可被替代</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="comment"># 指定这个容器启动的时候要运行的命令，可以追加命令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="comment"># 当构建一个被继承Dockerfile 这个时候运行ONBUILD指定，触发指令</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="comment"># 将文件拷贝到镜像中</span></span></span><br><span class="line"><span class="keyword">ENV</span> <span class="comment"># 构建的时候设置环境变量</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904192846385.png" alt="image-20210904192846385"></p><h2 id="5-2-创建centos"><a href="#5-2-创建centos" class="headerlink" title="5.2.创建centos"></a>5.2.创建centos</h2><h3 id="5-2-1-创建dockerfile"><a href="#5-2-1-创建dockerfile" class="headerlink" title="5.2.1.创建dockerfile"></a>5.2.1.创建dockerfile</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入home目录</span></span><br><span class="line">cd /home</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个目录，之后的东西都保存到这里</span></span><br><span class="line">mkdir dockerfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入这个目录</span></span><br><span class="line">cd dockerfile/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个dockerfile，名字叫mydockerfile</span></span><br><span class="line">vim mydockerfile-centos</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> wyl&lt;<span class="number">1714404171</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;---end---&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904195608613.png" alt="image-20210904195608613"></p><h3 id="5-2-2-docker-build"><a href="#5-2-2-docker-build" class="headerlink" title="5.2.2.docker build"></a>5.2.2.docker build</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /home/docerfile</span><br><span class="line">docker build -t mycentos -f mydockerfile-centos .</span><br></pre></td></tr></table></figure><p>后面的<strong>点</strong>不要忘记</p><p><img src="/images/img/blog/image-20210904205531218.png" alt="image-20210904205531218"></p><p><img src="/images/img/blog/image-20210904205704837.png" alt="image-20210904205704837"></p><h1 id="6-Docker-Compose"><a href="#6-Docker-Compose" class="headerlink" title="6.Docker Compose"></a>6.Docker Compose</h1><p>前面我们使用 Docker 的时候，定义 Dockerfile 文件，然后使用 docker build、docker run 等命令操作容器。然而微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，那么效率之低，维护量之大可想而知.对此我们就可以来学习一下docker compose</p><p><strong>它是一个用于定义和运行多容器 Docker 的应用程序工具</strong></p><h2 id="6-1-compose安装"><a href="#6-1-compose安装" class="headerlink" title="6.1. compose安装"></a>6.1. compose安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">or</span><br><span class="line">sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904212608930.png" alt="image-20210904212608930"></p><p><strong>pip安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install docker-compose</span><br></pre></td></tr></table></figure><h2 id="6-2-权限"><a href="#6-2-权限" class="headerlink" title="6.2.权限"></a>6.2.权限</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210904225302027.png" alt="image-20210904225302027"></p><h2 id="6-3-Compose-使用"><a href="#6-3-Compose-使用" class="headerlink" title="6.3.Compose 使用"></a>6.3.Compose 使用</h2><p><strong>三个步骤：</strong></p><ul><li><p>使用 Dockerfile 定义应用程序的环境。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker-demo.jar app.jar</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9000</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-Djava.security.egd=file:/dev/./urandom&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Compose和Docker兼容性：</span><br><span class="line">    Compose 文件格式有3个版本,分别为1, 2.x 和 3.x</span><br><span class="line">    目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本</span><br><span class="line"></span><br><span class="line">常用参数：</span><br><span class="line">    version           # 指定 compose 文件的版本</span><br><span class="line">    services          # 定义所有的 service 信息, services 下面的第一级别的 key 既是一个 service 的名称</span><br><span class="line"></span><br><span class="line">        build                 # 指定包含构建上下文的路径, 或作为一个对象，该对象具有 context 和指定的 dockerfile 文件以及 args 参数值</span><br><span class="line">            context               # context: 指定 Dockerfile 文件所在的路径</span><br><span class="line">            dockerfile            # dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile)</span><br><span class="line">            args                  # args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用)</span><br><span class="line">            cache_from            # v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用)</span><br><span class="line">            labels                # v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用)</span><br><span class="line">            shm_size              # v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用)</span><br><span class="line"></span><br><span class="line">        command               # 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式</span><br><span class="line"></span><br><span class="line">        configs               # </span><br><span class="line"></span><br><span class="line">        cgroup_parent         # </span><br><span class="line"></span><br><span class="line">        container_name        # 指定容器的名称 (等同于 docker run --name 的作用)</span><br><span class="line"></span><br><span class="line">        credential_spec       # </span><br><span class="line"></span><br><span class="line">        deploy                # v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm</span><br><span class="line">            endpoint_mode         # v3.3 版本中新增的功能, 指定服务暴露的方式</span><br><span class="line">                vip                   # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址</span><br><span class="line">                dnsrr                 # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址</span><br><span class="line">            labels                # 指定服务的标签，这些标签仅在服务上设置</span><br><span class="line">            mode                  # 指定 deploy 的模式</span><br><span class="line">                global                # 每个集群节点都只有一个容器</span><br><span class="line">                replicated            # 用户可以指定集群中容器的数量(默认)</span><br><span class="line">            placement             # </span><br><span class="line">            replicas              # deploy 的 mode 为 replicated 时, 指定容器副本的数量</span><br><span class="line">            resources             # 资源限制</span><br><span class="line">                limits                # 设置容器的资源限制</span><br><span class="line">                    cpus: &quot;0.5&quot;           # 设置该容器最多只能使用 50% 的 CPU </span><br><span class="line">                    memory: 50M           # 设置该容器最多只能使用 50M 的内存空间 </span><br><span class="line">                reservations          # 设置为容器预留的系统资源(随时可用)</span><br><span class="line">                    cpus: &quot;0.2&quot;           # 为该容器保留 20% 的 CPU</span><br><span class="line">                    memory: 20M           # 为该容器保留 20M 的内存空间</span><br><span class="line">            restart_policy        # 定义容器重启策略, 用于代替 restart 参数</span><br><span class="line">                condition             # 定义容器重启策略(接受三个参数)</span><br><span class="line">                    none                  # 不尝试重启</span><br><span class="line">                    on-failure            # 只有当容器内部应用程序出现问题才会重启</span><br><span class="line">                    any                   # 无论如何都会尝试重启(默认)</span><br><span class="line">                delay                 # 尝试重启的间隔时间(默认为 0s)</span><br><span class="line">                max_attempts          # 尝试重启次数(默认一直尝试重启)</span><br><span class="line">                window                # 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s)</span><br><span class="line">            update_config         # 用于配置滚动更新配置</span><br><span class="line">                parallelism           # 一次性更新的容器数量</span><br><span class="line">                delay                 # 更新一组容器之间的间隔时间</span><br><span class="line">                failure_action        # 定义更新失败的策略</span><br><span class="line">                    continue              # 继续更新</span><br><span class="line">                    rollback              # 回滚更新</span><br><span class="line">                    pause                 # 暂停更新(默认)</span><br><span class="line">                monitor               # 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0)</span><br><span class="line">                max_failure_ratio     # 回滚期间容忍的失败率(默认值为0)</span><br><span class="line">                order                 # v3.4 版本中新增的参数, 回滚期间的操作顺序</span><br><span class="line">                    stop-first            #旧任务在启动新任务之前停止(默认)</span><br><span class="line">                    start-first           #首先启动新任务, 并且正在运行的任务暂时重叠</span><br><span class="line">            rollback_config       # v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略</span><br><span class="line">                parallelism           # 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚</span><br><span class="line">                delay                 # 每个组回滚之间的时间间隔(默认为0)</span><br><span class="line">                failure_action        # 定义回滚失败的策略</span><br><span class="line">                    continue              # 继续回滚</span><br><span class="line">                    pause                 # 暂停回滚</span><br><span class="line">                monitor               # 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0)</span><br><span class="line">                max_failure_ratio     # 回滚期间容忍的失败率(默认值0)</span><br><span class="line">                order                 # 回滚期间的操作顺序</span><br><span class="line">                    stop-first            # 旧任务在启动新任务之前停止(默认)</span><br><span class="line">                    start-first           # 首先启动新任务, 并且正在运行的任务暂时重叠</span><br><span class="line"></span><br><span class="line">            注意：</span><br><span class="line">                支持 docker-compose up 和 docker-compose run 但不支持 docker stack deploy 的子选项</span><br><span class="line">                security_opt  container_name  devices  tmpfs  stop_signal  links    cgroup_parent</span><br><span class="line">                network_mode  external_links  restart  build  userns_mode  sysctls</span><br><span class="line"></span><br><span class="line">        devices               # 指定设备映射列表 (等同于 docker run --device 的作用)</span><br><span class="line"></span><br><span class="line">        depends_on            # 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项)</span><br></pre></td></tr></table></figure></li><li><p>最后，执行 docker-compose up 命令来启动并运行整个应用程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line">docker-compose up -d  // 后台启动并运行容器</span><br></pre></td></tr></table></figure><h2 id="6-3-卸载"><a href="#6-3-卸载" class="headerlink" title="6.3.卸载"></a>6.3.卸载</h2></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip卸载</span></span><br><span class="line">pip uninstall docker-compose</span><br></pre></td></tr></table></figure><h2 id="6-4-常用命令"><a href="#6-4-常用命令" class="headerlink" title="6.4.常用命令"></a>6.4.常用命令</h2><p><img src="/images/img/blog/image-20210904231917066.png" alt="image-20210904231917066"></p><h1 id="7-docker-network"><a href="#7-docker-network" class="headerlink" title="7.docker network"></a>7.docker network</h1><p>默认情况下容器与容器、容器与宿主机的网络是隔离开来的，</p><p>当你安装docker的时候，docker会创建一个<strong>桥接器docker0</strong>，通过它才让容器与容器、容器与宿主机之间通信。</p><p>Docker安装的时候<strong>默认会创建三个不同的网络</strong>，你可以通过命令查看这些网络。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905204545744.png" alt="image-20210905204545744"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">帮助命令后显示下面信息</span></span><br><span class="line">[root@vultrguest ~]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --help   Print usage</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">    connect 将某个容器连接到一个docker网络</span><br><span class="line">    create 创建一个docker局域网络</span><br><span class="line">    disconnect 将某个容器退出某个局域网络</span><br><span class="line">    inspect 显示某个局域网络信息</span><br><span class="line">    ls 显示所有docker局域网络</span><br><span class="line">    prune 删除所有未引用的docker局域网络</span><br><span class="line">    rm 删除docker网络</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><h2 id="7-1-默认网络"><a href="#7-1-默认网络" class="headerlink" title="7.1.默认网络"></a>7.1.默认网络</h2><h3 id="7-1-1-None-Network"><a href="#7-1-1-None-Network" class="headerlink" title="7.1.1.None Network"></a>7.1.1.None Network</h3><p>网络模式为none的，即<strong>不会为容器创建任何的网络</strong>环境。</p><p>一旦Docker Container采用了none网络模式，那么容器内部就只能使用loopback网络设备，不会再有其他的网络资源。</p><h3 id="7-1-2-Host-Network"><a href="#7-1-2-Host-Network" class="headerlink" title="7.1.2.Host Network"></a>7.1.2.Host Network</h3><p>如果你在创建容器的时候使用**<code>--network=host</code><strong>选项，那么</strong>容器会使用宿主机的网络**，容器与宿主机的网络并没有隔离。</p><p>使用这种网络类型的<strong>好处就是网络性能很好</strong>，基本上跟宿主机的网络一样，它很大的<strong>弊端就是不安全</strong>。</p><p>你可以在容器中更改宿主机的网络，如果你的程序是用root用户运行的，有可能会通过Docker容器来控制宿主机的网络。</p><p>当我们在容器中执行类似ifconfig命令查看网络环境是，看到的都是宿主机上的信息。</p><h3 id="7-1-3-Bridge-Network"><a href="#7-1-3-Bridge-Network" class="headerlink" title="7.1.3.Bridge Network"></a>7.1.3.Bridge Network</h3><p><strong>桥接网络是默认的网络类型</strong>，我们可以使用下面的命令来查看默认的网络配置信息。</p><p>这儿桥接的网络名为<code>docker0</code>。当我们启动一个容器的时候，每个容器会有它自己的虚拟网络接口连接到<code>docker0</code>，并获得一个IP地址。</p><p><img src="/images/img/blog/image-20210905205007741.png" alt="image-20210905205007741"></p><h2 id="7-2-自定义网络"><a href="#7-2-自定义网络" class="headerlink" title="7.2.自定义网络"></a>7.2.自定义网络</h2><h3 id="7-2-1创建网络"><a href="#7-2-1创建网络" class="headerlink" title="7.2.1创建网络"></a>7.2.1创建网络</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create mynet</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905205325275.png" alt="image-20210905205325275"></p><h3 id="7-2-2-把容器加入局域网"><a href="#7-2-2-把容器加入局域网" class="headerlink" title="7.2.2.把容器加入局域网"></a>7.2.2.把容器加入局域网</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">运行redis容器</span></span><br><span class="line">docker run -itd --name redis  --network mynet --network-alias redis -p 6379:6379 redis</span><br><span class="line"><span class="meta">#</span><span class="bash">运行nginx容器</span></span><br><span class="line">docker run -d --name nginx -p 8081:8081 --network mynet --network-alias nginx --privileged=true   -v /home/wwwroot:/home/wwwroot -v /home/wwwlogs:/home/wwwlogs  nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905205748631.png" alt="image-20210905205748631"></p><h3 id="7-2-3-查看mynet-信息"><a href="#7-2-3-查看mynet-信息" class="headerlink" title="7.2.3.查看mynet 信息"></a>7.2.3.查看mynet 信息</h3><p><img src="/images/img/blog/image-20210905205917495.png" alt="image-20210905205917495"></p><h3 id="7-2-4-docker-network-connect"><a href="#7-2-4-docker-network-connect" class="headerlink" title="7.2.4.docker network connect"></a>7.2.4.docker network connect</h3><p>也可以不指定网络，直接启动容器，然后使用docker network connect接入网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network connect mynet nginx</span><br><span class="line">docker network connect mynet redis</span><br></pre></td></tr></table></figure><h3 id="7-2-5-移除局域网"><a href="#7-2-5-移除局域网" class="headerlink" title="7.2.5.移除局域网"></a>7.2.5.移除局域网</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network disconnect mynet nginx</span><br></pre></td></tr></table></figure><h1 id="8-集群（Swarm）"><a href="#8-集群（Swarm）" class="headerlink" title="8.集群（Swarm）"></a>8.集群（Swarm）</h1><p>Docker Swarm 是 Docker 的集群管理工具。它将 Docker 主机池转变为单个虚拟 Docker 主机。 Docker Swarm 提供了标准的 Docker API，所有任何已经与 Docker 守护程序通信的工具都可以使用 Swarm 轻松地扩展到多个主机。</p><p>支持的工具包括但不限于以下各项：</p><ul><li>Dokku</li><li>Docker Compose</li><li>Docker Machine</li><li>Jenkins</li></ul><p><strong>swarm 集群由管理节点（manager）和工作节点（work node）构成。</strong></p><p><img src="/images/img/blog/services-diagram.png" alt="img"></p><h2 id="7-1-使用"><a href="#7-1-使用" class="headerlink" title="7.1.使用"></a>7.1.使用</h2><h3 id="7-1-1-安装docker-machine"><a href="#7-1-1-安装docker-machine" class="headerlink" title="7.1.1.安装docker-machine"></a>7.1.1.安装docker-machine</h3><blockquote><p>Docker Machine 管理的虚拟主机可以是机上的，也可以是云供应商，如阿里云，腾讯云，AWS，或 DigitalOcean。<br>使用 docker-machine 命令，您可以启动，检查，停止和重新启动托管主机，也可以升级 Docker 客户端和守护程序，以及配置 Docker 客户端与您的主机进行通信。</p></blockquote><p><img src="/images/img/blog/image-20210905202548571.png" alt="image-20210905202548571"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">centos</span></span><br><span class="line">base=https://github.com/docker/machine/releases/download/v0.16.0 &amp;&amp;</span><br><span class="line">  curl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/usr/local/bin/docker-machine &amp;&amp;</span><br><span class="line">  chmod +x /usr/local/bin/docker-machine</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905202314434.png" alt="image-20210905202314434"></p><h3 id="7-1-2-安装虚拟机virtualbox"><a href="#7-1-2-安装虚拟机virtualbox" class="headerlink" title="7.1.2.安装虚拟机virtualbox"></a>7.1.2.安装虚拟机virtualbox</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/virtualbox.repo </span><br><span class="line">[virtualbox]</span><br><span class="line">name=virtualbox</span><br><span class="line">baseurl=http://download.virtualbox.org/virtualbox/rpm/el/$releasever/$basearch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://www.virtualbox.org/download/oracle_vbox.asc</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210905212956217.png" alt="image-20210905212956217"></p>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring5快速入门</title>
      <link href="2021/09/06/java/firststage/spring%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/09/06/java/firststage/spring%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring"><a href="#1-spring" class="headerlink" title="1.spring"></a>1.spring</h1><p>Spring 框架可以说是Java 世界最为成功的框架，在企业实际应用中，大部分的企业架构都基于Spring 框架。它的成功来自于理念，而不是技术，它最为核心的理念是IoC （控制反转）和AOP （面向切面编程），其中IoC 是Spring的基础，而AOP 则是其重要的功能，最为典型的当属数据库事务的使用。</p><p>Spring最根本的使命是解决企业级应用开发的复杂性，即简化Java开发。</p><h2 id="1-1-优点"><a href="#1-1-优点" class="headerlink" title="1.1.优点"></a>1.1.<strong>优点</strong></h2><ol><li><p>方便解耦，简化开发</p><p>Spring就是一个大工厂，可以将所有对象的创建和依赖关系的维护，交给Spring管理。</p></li><li><p>AOP编程的支持</p><p>Spring提供面向切面编程，可以方便的实现对程序进行权限拦截、运行监控等功能。</p></li><li><p>声明式事务的支持</p><p>只需要通过配置就可以完成对事务的管理，而无需手动编程。</p></li><li><p>方便程序的测试</p><p>Spring对Junit4支持，可以通过注解方便的测试Spring程序。</p></li><li><p>方便集成各种优秀框架</p><p>Spring不排斥各种优秀的开源框架，其内部提供了对各种优秀框架的直接支持（如：Struts、Hibernate、MyBatis等）。</p></li><li><p>降低JavaEE API的使用难度</p><p>Spring对JavaEE开发中非常难用的一些API（JDBC、JavaMail、远程调用等），都提供了封装，使这些API应用难度大大降低。</p></li></ol><h2 id="1-2-缺点"><a href="#1-2-缺点" class="headerlink" title="1.2.缺点"></a>1.2.<strong>缺点</strong></h2><ol><li>Spring明明一个很轻量级的框架，却给人感觉大而全</li><li>Spring依赖反射，反射影响性能</li><li>使用门槛升高，入门Spring需要较长时间</li></ol><h2 id="1-3-Spring框架的组成结构图"><a href="#1-3-Spring框架的组成结构图" class="headerlink" title="1.3.Spring框架的组成结构图"></a>1.3.Spring框架的组成结构图</h2><p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在核心容器（Core Container） 、 AOP（Aspect Oriented Programming）和设备支持（Instrmentation） 、数据访问与集成（Data Access/Integeration） 、 Web、 消息（Messaging） 、 Test等 6 个模块中。 以下是 Spring 5 的模块结构图：</p><p><img src="/images/img/blog/673670c9a34075831373b711cb8f21b7.png" alt="spring-overview"></p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><h3 id="1-3-1-核心容器"><a href="#1-3-1-核心容器" class="headerlink" title="1.3.1.核心容器"></a>1.3.1.<strong>核心容器</strong></h3><p>Spring的核心容器是其他模块建立的基础，有spring-core、spring-beans、spring-context、spring-context-support和spring-expression（Spring表达式语言）等模块组成。</p><p><strong>spring-core 模块</strong>：提供了框架的基本组成部分，包括控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）功能。</p><p><strong>spring-beans 模块</strong>：提供了BeanFactory，是工厂模式的一个经典实现，Spring将管理对象称为Bean。</p><p><strong>spring-context 模块</strong>：建立在Core和Beans模块的基础之上，提供一个框架式的对象访问方式，是访问定义和配置的任何对象的媒介。ApplicationContext接口是Context模块的焦点。</p><p><strong>spring-context-support 模块</strong>：支持整合第三方库到Spring应用程序上下文，特别是用于高速缓存（EhCache、JCache）和任务调度（CommonJ、Quartz）的支持。</p><p><strong>Spring-expression 模块</strong>：提供了强大的表达式语言去支持运行时查询和操作对象图。这是对JSP2.1规范中规定的统一表达式语言（Unified EL）的扩展。该语言支持设置和获取属性值、属性分配、方法调用、访问数组、集合和索引器的内容、逻辑和算术运算、变量命名以及从Spring的IOC容器中以名称检索对象。它还支持列表投影、选择以及常用的列表聚合。</p><h3 id="1-3-2-AOP-和设备支持"><a href="#1-3-2-AOP-和设备支持" class="headerlink" title="1.3.2.AOP 和设备支持"></a>1.3.2.<strong>AOP 和设备支持</strong></h3><p>由spring-aop、 spring-aspects 和 spring-instrument等 3 个模块组成。</p><p><strong>spring-aop 模块</strong>：是 Spring 的另一个核心模块，提供了一个符合 AOP 要求的面向切面的编程实现。 作为继 OOP（面向对象编程） 后， 对程序员影响最大的编程思想之一， AOP 极大地开拓了人们对于编程的思路。 在 Spring 中， 以动态代理技术为基础，允许定义方法拦截器和切入点，将代码按照功能进行分离，以便干净地解耦。</p><p><strong>spring-aspects 模块</strong>：提供了与AspectJ的集成功能，AspectJ是一个功能强大且成熟的AOP框架。</p><p><strong>spring-instrument 模块</strong>：是 AOP 的一个支援模块， 提供了类植入（Instrumentation）支持和类加载器的实现，可以在特定的应用服务器中使用。主要作用是在 JVM 启用时， 生成一个代理类， 程序员通过代理类在运行时修改类的字节， 从而改变一个类的功能， 实现 AOP 的功能。</p><h3 id="1-3-3-数据访问与集成"><a href="#1-3-3-数据访问与集成" class="headerlink" title="1.3.3.数据访问与集成"></a>1.3.3.<strong>数据访问与集成</strong></h3><p>由 spring-jdbc、spring-orm、spring-oxm、spring-jms 和 spring-tx 等 5 个模块组成。</p><p><strong>spring-jdbc 模块</strong>：提供了一个JDBC的抽象层，消除了烦琐的JDBC编码和数据库厂商特有的错误代码解析， 用于简化JDBC。主要是提供 JDBC 模板方式、 关系数据库对象化方式、 SimpleJdbc 方式、 事务管理来简化 JDBC 编程， 主要实现类是 JdbcTemplate、 SimpleJdbcTemplate 以及 NamedParameterJdbcTemplate。</p><p><strong>spring-orm 模块</strong>：是 ORM 框架支持模块， 主要集成 Hibernate， Java Persistence API (JPA) 和Java Data Objects (JDO) 用于资源管理、 数据访问对象(DAO)的实现和事务策略。</p><p><strong>spring-oxm 模块</strong>：主要提供一个抽象层以支撑 OXM（OXM 是 Object-to-XML-Mapping 的缩写， 它是一个 O/M-mapper， 将 java 对象映射成 XML 数据， 或者将 XML 数据映射成 java 对象） ， 例如： JAXB，Castor，XMLBeans，JiBX 和 XStream 等。</p><p><strong>spring-jms模块（Java Messaging Service）</strong>：指Java消息传递服务，包含用于生产和使用消息的功能。自Spring4.1以后，提供了与spring-messaging模块的集成。</p><p><strong>spring-tx 模块</strong>：事务模块，支持用于实现特殊接口和所有POJO（普通Java对象）类的编程和声明式事务管理。</p><h3 id="1-3-4-Web"><a href="#1-3-4-Web" class="headerlink" title="1.3.4.Web"></a>1.3.4.<strong>Web</strong></h3><p>由spring-websocket、spring-webmvc、spring-web、portlet和spring-webflux模块等 5 个模块组成。</p><p><strong>spring-websocket 模块</strong>：Spring4.0以后新增的模块，实现双工异步通讯协议，实现了WebSocket和SocketJS，提供Socket通信和web端的推送功能。</p><p><strong>spring-webmvc 模块</strong>：也称为Web-Servlet模块，包含用于web应用程序的Spring MVC和REST Web Services实现。Spring MVC框架提供了领域模型代码和Web表单之间的清晰分离，并与Spring Framework的所有其他功能集成。</p><p><strong>spring-web 模块</strong>：提供了基本的Web开发集成功能，包括使用Servlet监听器初始化一个IOC容器以及Web应用上下文，自动载入WebApplicationContext特性的类，Struts集成类、文件上传的支持类、Filter类和大量辅助工具类。</p><p><strong>portlet 模块</strong>：实现web模块功能的聚合，类似于Servlet模块的功能，提供了Portlet环境下的MVC实现。</p><p><strong>spring-webflux 模块</strong>：是一个新的非堵塞函数式 Reactive Web 框架， 可以用来建立异步的， 非阻塞，事件驱动的服务， 并且扩展性非常好。</p><h3 id="1-3-5-消息-Messaging"><a href="#1-3-5-消息-Messaging" class="headerlink" title="1.3.5.消息(Messaging)"></a>1.3.5.<strong>消息(Messaging)</strong></h3><p>即 spring-messaging 模块。</p><p><strong>spring-messaging</strong> 是从 Spring4 开始新加入的一个模块， 该模块提供了对消息传递体系结构和协议的支持。</p><h3 id="1-3-6-Test"><a href="#1-3-6-Test" class="headerlink" title="1.3.6.Test"></a>1.3.6.<strong>Test</strong></h3><p>即 spring-test 模块。</p><p><strong>spring-test 模块</strong>主要为测试提供支持的，支持使用JUnit或TestNG对Spring组件进行单元测试和集成测试。</p><h1 id="2-Spring核心ioc"><a href="#2-Spring核心ioc" class="headerlink" title="2.Spring核心ioc"></a>2.Spring核心ioc</h1><p>Ioc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。就是不实例化了。先注入。</p><p><strong>谁控制谁，控制什么：</strong>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由<strong>Ioc容器</strong>来控制对象的创建；谁控制谁？当然是<strong>IoC 容器控制了对象</strong>；控制什么？那就是<strong>主要控制了外部资源获取</strong>。</p><p>●<strong>为何是反转，哪些方面反转了：</strong>有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p><strong>ps:控制反转是目标，依赖注入是手段。</strong></p><h2 id="2-1-ioc容器"><a href="#2-1-ioc容器" class="headerlink" title="2.1.ioc容器"></a>2.1.ioc容器</h2><p><img src="/images/img/blog/image-20210830155718002.png" alt="image-20210830155718002"></p><p>IoC 容器是 Spring 的核心，也可以称为 Spring 容器。Spring 通过 IoC 容器来管理对象的实例化和初始化，以及对象从创建到销毁的整个生命周期。</p><p>Spring 中使用的对象都由 IoC 容器管理，不需要我们手动使用 new 运算符创建对象。由 IoC 容器管理的对象称为 Spring Bean，Spring Bean 就是 Java 对象，和使用 new 运算符创建的对象没有区别。</p><p>Spring 通过读取 XML 或 Java 注解中的信息来获取哪些对象需要实例化。</p><p>Spring 提供 2 种不同类型的 IoC 容器，即 BeanFactory 和 ApplicationContext 容器</p><h3 id="2-1-BeanFactory-容器"><a href="#2-1-BeanFactory-容器" class="headerlink" title="2.1.BeanFactory 容器"></a>2.1.BeanFactory 容器</h3><p>BeanFactory 是最简单的容器，由 org.springframework.beans.factory.BeanFactory 接口定义，采用懒加载（lazy-load），所以容器启动比较快。BeanFactory 提供了容器最基本的功能。</p><p>为了能够兼容 Spring 集成的第三方框架（如 BeanFactoryAware、InitializingBean、DisposableBean），所以目前仍然保留了该接口。</p><p>简单来说，BeanFactory 就是一个管理 Bean 的工厂，它主要负责初始化各种 Bean，并调用它们的生命周期方法。</p><p>BeanFactory 接口有多个实现类，最常见的是 org.springframework.beans.factory.xml.XmlBeanFactory。使用 BeanFactory 需要创建 XmlBeanFactory 类的实例，通过 XmlBeanFactory 类的构造函数来传递 Resource 对象。如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);  </span><br></pre></td></tr></table></figure><h3 id="2-1-2-ApplicationContext-容器"><a href="#2-1-2-ApplicationContext-容器" class="headerlink" title="2.1.2. ApplicationContext 容器"></a>2.1.2. ApplicationContext 容器</h3><p>ApplicationContext 继承了 BeanFactory 接口，由 org.springframework.context.ApplicationContext 接口定义，对象在启动容器时加载。ApplicationContext 在 BeanFactory 的基础上增加了很多企业级功能，例如 AOP、国际化、事件支持等。</p><p>ApplicationContext 接口有两个常用的实现类，具体如下。</p><h4 id="2-1-2-1-ClassPathXmlApplicationContext"><a href="#2-1-2-1-ClassPathXmlApplicationContext" class="headerlink" title="2.1.2.1.ClassPathXmlApplicationContext"></a>2.1.2.1.ClassPathXmlApplicationContext</h4><p>该类从类路径 ClassPath 中寻找指定的 XML 配置文件，并完成 ApplicationContext 的实例化工作，具体如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(String configLocation);</span><br></pre></td></tr></table></figure><p>在上述代码中，configLocation 参数用于指定 Spring 配置文件的名称和位置，如 Beans.xml。</p><h4 id="2-1-2-2-FileSystemXmlApplicationContext"><a href="#2-1-2-2-FileSystemXmlApplicationContext" class="headerlink" title="2.1.2.2.FileSystemXmlApplicationContext"></a>2.1.2.2.FileSystemXmlApplicationContext</h4><p>该类从指定的文件系统路径中寻找指定的 XML 配置文件，并完成 ApplicationContext 的实例化工作，具体如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> FileSystemXmlApplicationContext(String configLocation);</span><br></pre></td></tr></table></figure><p>它与 ClassPathXmlApplicationContext 的区别是：在读取 Spring 的配置文件时，FileSystemXmlApplicationContext 不会从类路径中读取配置文件，而是通过参数指定配置文件的位置。即 FileSystemXmlApplicationContext 可以获取类路径之外的资源，如“F:/workspaces/Beans.xml”。</p><h4 id="2-1-2-3-AnnotationConfigApplicationContext"><a href="#2-1-2-3-AnnotationConfigApplicationContext" class="headerlink" title="2.1.2.3.AnnotationConfigApplicationContext"></a>2.1.2.3.AnnotationConfigApplicationContext</h4><p>读取用注解创建容器</p><p>通常在 Java 项目中，会采用 ClassPathXmlApplicationContext 类实例化 ApplicationContext 容器的方式，而在 Web 项目中，ApplicationContext 容器的实例化工作会交由 Web 服务器完成。Web 服务器实例化 ApplicationContext 容器通常使用基于 ContextLoaderListener 实现的方式，它只需要在 web.xml 中添加如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定Spring配置文件的位置，有多个配置文件时，以逗号分隔--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring将加载spring目录下的applicationContext.xml文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">        classpath:spring/applicationContext.xml</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--指定以ContextLoaderListener方式启动Spring容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，BeanFactory 和 ApplicationContext 都是通过 XML 配置文件加载 Bean 的。</p><p>二者的主要区别在于，如果 Bean 的某一个属性没有注入，使用 BeanFacotry 加载后，第一次调用 getBean() 方法时会抛出异常，而 ApplicationContext 则会在初始化时自检，这样有利于检查所依赖的属性是否注入。</p><p>因此，在实际开发中，通常都选择使用 ApplicationContext，只有在系统资源较少时，才考虑使用 BeanFactory。</p><h2 id="2-2-使用ioc容器"><a href="#2-2-使用ioc容器" class="headerlink" title="2.2.使用ioc容器"></a>2.2.使用ioc容器</h2><h3 id="2-2-1-beans-xml"><a href="#2-2-1-beans-xml" class="headerlink" title="2.2.1.beans.xml"></a>2.2.1.beans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>     <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;王延领&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-2-pojo-User"><a href="#2-2-2-pojo-User" class="headerlink" title="2.2.2.pojo.User"></a>2.2.2.pojo.User</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user无参构造方法&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+ name );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-test"><a href="#2-2-2-test" class="headerlink" title="2.2.2.test"></a>2.2.2.test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//在执行getBean的时候, user已经创建好了 , 通过无参构造</span></span><br><span class="line">    User user = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="comment">//调用对象的方法 .</span></span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-bean"><a href="#2-3-bean" class="headerlink" title="2.3.bean"></a>2.3.bean</h2><h3 id="2-3-1-定义"><a href="#2-3-1-定义" class="headerlink" title="2.3.1.定义"></a>2.3.1.定义</h3><p>由 Spring IoC 容器管理的对象称为 Bean，Bean 根据 Spring 配置文件中的信息创建。可以把 Spring IoC 容器看作是一个大工厂，Bean 相当于工厂的产品，如果希望这个大工厂生产和管理 Bean，则需要告诉容器需要哪些 Bean，以及需要哪种方式装配 Bean。</p><p>Spring 配置文件支持两种格式，即 XML 文件格式和 Properties 文件格式。</p><ul><li><p>Properties 配置文件主要以 key-value 键值对的形式存在，只能赋值，不能进行其他操作，适用于简单的属性配置。</p></li><li><p>XML 配置文件是树形结构，相对于 Properties 文件来说更加灵活。XML 配置文件结构清晰，但是内容比较繁琐，适用于大型复杂的项目。</p></li></ul><p>通常情况下，Spring 的配置文件使用 XML 格式。XML 配置文件的根元素是 <beans>，该元素包含了多个子元素 <bean>。每一个 <bean> 元素都定义了一个 Bean，并描述了该 Bean 如何被装配到 Spring 容器中。</p><h3 id="2-3-2-创建"><a href="#2-3-2-创建" class="headerlink" title="2.3.2.创建"></a>2.3.2.创建</h3><h4 id="2-3-2-1-默认方式"><a href="#2-3-2-1-默认方式" class="headerlink" title="2.3.2.1 默认方式"></a>2.3.2.1 默认方式</h4><p>无参</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 默认构造函数，如果类中没有默认构造函数则无法创建对象;bean标签中只有id和class就默认使用构造函数创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>有参</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第一种根据index参数下标设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- index指构造方法 , 下标从0开始 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wyl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 第二种根据参数名字设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name指参数名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wyl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三种根据参数类型设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wyl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-工厂类中的方法"><a href="#2-3-2-2-工厂类中的方法" class="headerlink" title="2.3.2.2 工厂类中的方法"></a>2.3.2.2 工厂类中的方法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 2. 使用工厂中的方法创建对象;工厂中有一个方法可以创建对象，先创建工厂对象，通过factory-bean指向工厂，使用factory-method方法获取对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.factory.BeanFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;beanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-3-静态工厂中的静态方法"><a href="#2-3-2-3-静态工厂中的静态方法" class="headerlink" title="2.3.2.3  静态工厂中的静态方法"></a>2.3.2.3  静态工厂中的静态方法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3. 使用静态工厂中的静态方法创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.factory.StaticBeanFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserService&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-配置"><a href="#2-3-2-配置" class="headerlink" title="2.3.2.配置"></a>2.3.2.配置</h3><h4 id="2-3-2-1-别名"><a href="#2-3-2-1-别名" class="headerlink" title="2.3.2.1.别名"></a>2.3.2.1.别名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--  别名 : 如果添加了别名，我们也可以使用别名获取到这个对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;u1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-bean-别名"><a href="#2-3-2-2-bean-别名" class="headerlink" title="2.3.2.2.bean 别名"></a>2.3.2.2.bean 别名</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  bean标签常用属性：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">id属性：起名称，id属性值名称任意命名，不能包含特殊符号</span></span><br><span class="line"><span class="comment">class属性：创建对象所在类的全路径</span></span><br><span class="line"><span class="comment">name属性：功能和id属性一样的，但是在name属性值里面可以包含特殊符号</span></span><br><span class="line"><span class="comment">scope属性</span></span><br><span class="line"><span class="comment">singleton：默认值，单例</span></span><br><span class="line"><span class="comment">prototype：多例</span></span><br><span class="line"><span class="comment">request：创建对象把对象放到request域里面</span></span><br><span class="line"><span class="comment">session：创建对象把对象放到session域里面</span></span><br><span class="line"><span class="comment">globalSession：创建对象把对象放到globalSession里面</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">name</span>=<span class="string">&quot;u2 u21,u22;u23&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-2-import"><a href="#2-3-2-2-import" class="headerlink" title="2.3.2.2.import"></a>2.3.2.2.import</h4><p>团队的合作通过import来实现 .</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>能将多个人开发的不同的配置xml文件整合到applicationContext.xml文件中，并且能够合适的去重。</p><h3 id="2-3-3-作用域"><a href="#2-3-3-作用域" class="headerlink" title="2.3.3.作用域"></a>2.3.3.作用域</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 容器在初始化一个 Bean 实例时，同时会指定该实例的作用域。Spring 5 支持以下 6 种作用域。</p><p><strong>singleton</strong></p><p><strong>默认值，单例模式</strong>，表示在 Spring 容器中只有一个 Bean 实例，Bean 以单例的方式存在。</p><p><strong>prototype</strong></p><p>原型模式，表示每次通过 Spring 容器获取 Bean 时，容器都会创建一个 Bean 实例。</p><p><strong>request</strong></p><p>每次 HTTP 请求，容器都会创建一个 Bean 实例。该作用域只在当前 HTTP Request 内有效。</p><p><strong>session</strong></p><p>同一个 HTTP Session 共享一个 Bean 实例，不同的 Session 使用不同的 Bean 实例。该作用域仅在当前 HTTP Session 内有效。</p><p><strong>application</strong></p><p>同一个 Web 应用共享一个 Bean 实例，该作用域在当前 ServletContext 内有效。<br>类似于 singleton，不同的是，singleton 表示每个 IoC 容器中仅有一个 Bean 实例，而同一个 Web 应用中可能会有多个 IoC 容器，但一个 Web 应用只会有一个 ServletContext，也可以说 application 才是 Web 应用中货真价实的单例模式。</p><p><strong>websocket</strong></p><p>websocket 的作用域是 WebSocket ，即在整个 WebSocket 中有效<br><strong>equest、session、application、websocket 和 global Session 作用域只能在 Web 环境下使用，如果使用 ClassPathXmlApplicationContext 加载这些作用域中的任意一个的 Bean，就会抛出以下异常。</strong></p><h3 id="2-3-4-生命周期"><a href="#2-3-4-生命周期" class="headerlink" title="2.3.4.生命周期"></a>2.3.4.生命周期</h3><p><img src="/images/img/blog/10551T325-0.png" alt="Bean的生命周期"></p><ol><li><p>Spring 启动，查找并加载需要被 Spring 管理的 Bean，并实例化 Bean。</p></li><li><p>利用依赖注入完成 Bean 中所有属性值的配置注入。</p></li><li><p>如果 Bean 实现了 BeanNameAware 接口，则 Spring 调用 Bean 的 setBeanName() 方法传入当前 Bean 的 id 值。</p></li><li><p>如果 Bean 实现了 BeanFactoryAware 接口，则 Spring 调用 setBeanFactory() 方法传入当前工厂实例的引用。</p></li><li><p>如果 Bean 实现了 ApplicationContextAware 接口，则 Spring 调用 setApplicationContext() 方法传入当前 ApplicationContext 实例的引用。</p></li><li><p>如果 Bean 实现了 [BeanPostProcessor] 接口，则 Spring 调用该接口的预初始化方法 postProcessBeforeInitialzation() 对 Bean 进行加工操作，此处非常重要，Spring 的 AOP 就是利用它实现的。</p></li><li><p>如果 Bean 实现了 InitializingBean 接口，则 Spring 将调用 afterPropertiesSet() 方法。</p></li><li><p>如果在配置文件中通过 init-method 属性指定了初始化方法，则调用该初始化方法。</p></li><li><p>如果 [BeanPostProcessor ]和 Bean 关联，则 Spring 将调用该接口的初始化方法 postProcessAfterInitialization()。此时，Bean 已经可以被应用系统使用了。</p></li><li><p>如果在 <bean> 中指定了该 Bean 的作用域为 singleton，则将该 Bean 放入 Spring IoC 的缓存池中，触发 Spring 对该 Bean 的生命周期管理； 如果在 <bean> 中指定了该 Bean 的作用域为 prototype，则将该 Bean 交给调用者，调用者管理该 Bean 的生命周期，Spring 不再管理该 Bean。</p></li><li><p>如果 Bean 实现了 DisposableBean 接口，则 Spring 会调用 destory() 方法销毁 Bean；如果在配置文件中通过 destory-method 属性指定了 Bean 的销毁方法，则 Spring 将调用该方法对 Bean 进行销毁。</p></li></ol><h4 id="2-3-4-1-单例"><a href="#2-3-4-1-单例" class="headerlink" title="2.3.4.1.单例"></a>2.3.4.1.单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBean</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;UserBean()构造函数&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;setName()&quot;</span>);  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;this is init of UserBean&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;this is destory of UserBean &quot;</span> + <span class="keyword">this</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user_singleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.userBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当scope=”singleton”，即默认情况下，会在启动容器时（即实例化容器时）时实例化。但我们可以指定Bean节点的lazy-init=”true”来延迟初始化bean，这时候，只有在第一次获取bean时才会初始化bean，即第一次请求该bean时才初始化.</p><p>如果想对所有的默认单例bean都应用延迟初始化，可以在根节点beans设置default-lazy-init属性为true，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">default-lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AbstractApplicationContext container = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;user.xml&quot;</span>);</span><br><span class="line">UserBean user = (UserBean)container.getBean(<span class="string">&quot;user_singleton&quot;</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">container.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>UserBean()构造函数<br>this is init of UserBean<br>com.wyl.UserBean@573f2bb1<br>……<br>this is destory of UserBeancom.wyl.UserBean@573f2bb1</p></blockquote><p>默认情况下，Spring在读取xml文件的时候，就会创建对象。在创建对象的时候先调用构造器[**UserBean()**，然后调用init-method属性值中所指定的方法。对象在被销毁的时候，会调用destroy-method属性值中所指定的方法.</p><h4 id="2-3-4-2-非单例管理的对象"><a href="#2-3-4-2-非单例管理的对象" class="headerlink" title="2.3.4.2.非单例管理的对象"></a>2.3.4.2.非单例管理的对象</h4><p>当scope=”prototype”时，容器也会延迟初始化bean，Spring读取xml文件的时候，并不会立刻创建对象，而是在第一次请求该bean时才初始化（如调用getBean方法时）。</p><p>在第一次请求每一个prototype的bean时，Spring容器都会调用其构造器创建这个对象，然后调用init-method属性值中所指定的方法。对象销毁的时候，Spring容器不会帮我们调用任何方法，因为是非单例，这个类型的对象有很多个，Spring容器一旦把这个对象交给你之后，就不再管理这个对象了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user_prototype&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bean.UserBean&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AbstractApplicationContext container = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;User.xml&quot;</span>);</span><br><span class="line">UserBean User1 = (UserBean)container.getBean(<span class="string">&quot;User_singleton&quot;</span>);</span><br><span class="line">System.out.println(User1);</span><br><span class="line"></span><br><span class="line">UserBean User2 = (UserBean)container.getBean(<span class="string">&quot;User_prototype&quot;</span>);</span><br><span class="line">System.out.println(User2);</span><br><span class="line">container.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><blockquote><p>UserBean()构造函数<br>this is init of UserBean<br>com.wyl.UserBean@573f2bb1<br>LifeBean()构造函数<br>this is init of UserBean<br>com.wyl.UserBean@5ae9a829<br>……<br>this is destory of lifeBean com.wyl.UserBean@573f2bb1</p></blockquote><h2 id="2-4-DI-依赖注入"><a href="#2-4-DI-依赖注入" class="headerlink" title="2.4.DI(依赖注入)"></a>2.4.DI(依赖注入)</h2><p>依赖注入Dependency Injection，在解耦的过程中，我们将对象的创建交给Spring容器管理，当我们需要用其他类的对象，由Spring提供，我们只需在配置文件里声明即可。A类使用B类，就产生依赖关系，Spring给我们解决依赖关系就是依赖注入（DI）</p><h3 id="2-4-1-构造器注入"><a href="#2-4-1-构造器注入" class="headerlink" title="2.4.1.构造器注入"></a>2.4.1.构造器注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(String name, Integer age, Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- name：按字段名称辅助；index：字段索引，给第几个字段赋值；type：指定注入值的类型，该类型也是构造函数中某个或某些字段的类型； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- value:要注入的值，基本类型和String；ref：注入其他类型数据，指向外部bean对象;这个外部bean需要存在于Spring容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-Set方式注入"><a href="#2-4-2-Set方式注入" class="headerlink" title="2.4.2.Set方式注入"></a>2.4.2.Set方式注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.service.impl.UserServiceImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;date&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 创建日期对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;date&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-对象类型注入"><a href="#2-4-3-对象类型注入" class="headerlink" title="2.4.3.对象类型注入"></a>2.4.3.对象类型注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入对象类型属性 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 1 配置service和dao对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ioc.UserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.ioc.UserService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注入dao对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-4-复杂类型注入"><a href="#2-4-4-复杂类型注入" class="headerlink" title="2.4.4.复杂类型注入"></a>2.4.4.复杂类型注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注入复杂类型属性值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.property.Person&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;arrs&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小王<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小马<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小宋<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小奥<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小金<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">value</span>&gt;</span>小普<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">list</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- map --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lucy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;bb&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mary&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;cc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- properties --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driverclass&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--set--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>WOW<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--null--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;marne&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-5-拓展方式注入"><a href="#2-4-5-拓展方式注入" class="headerlink" title="2.4.5.拓展方式注入"></a>2.4.5.拓展方式注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p命名注入 property</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- p命名空间注入，可以直接注入属性的值：property --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;User&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span> <span class="attr">p:name</span> =<span class="string">&quot;老秦&quot;</span> <span class="attr">p:age</span> =<span class="string">&quot;18&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>c命名空间注入 constructor</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- c命名空间注入，通过构造器注入：construct-args --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;User2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;老李&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注意点：p命名和c命名不能直接使用，需要导入xml约束</p><h2 id="2-5-自动装配"><a href="#2-5-自动装配" class="headerlink" title="2.5.自动装配"></a>2.5.自动装配</h2><p>自动装配是Spring满足bean依赖的一种方式！Spring会在上下文中自动寻找，并自动给bean装配属性。</p><p>在Spring中有三种装配的方式</p><ol><li><p>在xml中显示的配置</p></li><li><p>在java中显示配置</p></li><li><p>隐式的自动装配bean</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>no</td><td>默认值，表示不使用自动装配，Bean 依赖必须通过 ref 元素定义。</td></tr><tr><td>byName</td><td>根据 Property 的 name 自动装配，如果一个 Bean 的 name 和另一个 Bean 中的 Property 的 name 相同，则自动装配这个 Bean 到 Property 中。</td></tr><tr><td>byType</td><td>根据 Property 的数据类型（Type）自动装配，如果一个 Bean 的数据类型兼容另一个 Bean 中 Property 的数据类型，则自动装配。</td></tr><tr><td>constructor</td><td>类似于 byType，根据构造方法参数的数据类型，进行 byType 模式的自动装配。</td></tr><tr><td>autodetect（3.0版本不支持）</td><td>如果 Bean 中有默认的构造方法，则用 constructor 模式，否则用 byType 模式。</td></tr></tbody></table></li></ol><h3 id="2-5-1-byName"><a href="#2-5-1-byName" class="headerlink" title="2.5.1.byName"></a>2.5.1.byName</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wangyanling&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-byType"><a href="#2-5-2-byType" class="headerlink" title="2.5.2.byType"></a>2.5.2.byType</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    byName：会自动在容器上下文中查找，和自己对象set方法后面的值对应的beanid！</span></span><br><span class="line"><span class="comment">    byType：会自动在容器上下文中查找，和自己对象属性类型相同的bean！</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WANGAYNLING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-注解"><a href="#2-5-3-注解" class="headerlink" title="2.5.3.注解"></a>2.5.3.注解</h3><p>jdk1.5支持的注解，Spring2.5就支持注解了！</p><p>要使用注解须知：</p><ol><li><p>导入约束 context约束</p></li><li><p><strong>配置注解的支持： context:annotation-config/</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>@Autowired</strong></p><p>@Autowired是按类型自动转配的，不支持id匹配。byType<br>需要导入 spring-aop的包！<br>直接在属性上使用即可！也可以在set方式上使用！</p><p>使用Autowired我们可以不用编写Set方法了，前提是这个自动装配的属性在IOC容器中存在，且符合名字byname。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Cat cat;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span>     <span class="comment">// 字段标记了这个注解，说明这个字段可以为null</span></span><br></pre></td></tr></table></figure><p>或者 如果显示定义了Autowired的required 的属性为false ，说明这个对象可以为null，允许为空</p><p>autowired 注解应该是只能是别的，当注入 在IOC容器中该类型只有一个时，就通过byType进行装配，当注入容器存在多个同意类型的对象是，就是根据byName进行装配</p><p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解[@Autowired]完成的时候，我们可以使用@Qualifier(value=“XXX”)去配置@Autowired的使用，指定一个唯一的bean对象注入。</p><p><strong>@Qualifier</strong></p><p>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配<br>@Qualifier不能单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Resource注解</strong></p><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>其次再进行默认的byName方式进行装配；</li><li>如果以上都不成功，则按byType的方式自动装配。</li><li>都不成功，则报异常。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;cat&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;dog&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>小结<br>@Autowired与@Resource异同：</p><p>@Autowired与@Resource都可以用来装配bean。都可以写在字段上，或写在setter方法上。</p><p>@Autowired默认按类型装配（属于spring规范），默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</p><p>@Resource（属于J2EE复返），默认按照名称进行装配，名称可以通过name属性进行指定。如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是 需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p><p>它们的作用相同都是用注解方式注入对象，但执行顺序不同。@Autowired先byType，@Resource先byName。</p><h2 id="2-6-ioc注解"><a href="#2-6-ioc注解" class="headerlink" title="2.6.ioc注解"></a>2.6.ioc注解</h2><p> @注解名称(属性名称=属性值)</p><h3 id="2-6-1-Spring使用的注解大全和解释"><a href="#2-6-1-Spring使用的注解大全和解释" class="headerlink" title="2.6.1. Spring使用的注解大全和解释"></a>2.6.1. Spring使用的注解大全和解释</h3><table><thead><tr><th>注解</th><th>解释</th></tr></thead><tbody><tr><td>@Controller</td><td>组合注解（组合了@Component注解），应用在MVC层（控制层）,DispatcherServlet会自动扫描注解了此注解的类，然后将web请求映射到注解了@RequestMapping的方法上。</td></tr><tr><td>@Service</td><td>组合注解（组合了@Component注解），应用在service层（业务逻辑层）</td></tr><tr><td>@Repository</td><td>组合注解（组合了@Component注解），应用在dao层（数据访问层）</td></tr><tr><td>@Component</td><td>表示一个带注释的类是一个“组件”，成为Spring管理的Bean。当使用基于注解的配置和类路径扫描时，这些类被视为自动检测的候选对象。同时@Component还是一个元注解。</td></tr><tr><td>@Autowired</td><td>Spring提供的工具（由Spring的依赖注入工具（BeanPostProcessor、BeanFactoryPostProcessor）自动注入。）</td></tr><tr><td>@Resource</td><td>JSR-250提供的注解</td></tr><tr><td>@Inject</td><td>JSR-330提供的注解</td></tr><tr><td>@Configuration</td><td>声明当前类是一个配置类（相当于一个Spring配置的xml文件）</td></tr><tr><td>@ComponentScan</td><td>自动扫描指定包下所有使用@Service,@Component,@Controller,@Repository的类并注册</td></tr><tr><td>@Bean</td><td>注解在方法上，声明当前方法的返回值为一个Bean。返回的Bean对应的类中可以定义init()方法和destroy()方法，然后在@Bean(initMethod=”init”,destroyMethod=”destroy”)定义，在构造之后执行init，在销毁之前执行destroy。</td></tr><tr><td>@Aspect</td><td>声明一个切面（就是说这是一个额外功能）</td></tr><tr><td>@After</td><td>后置建言（advice），在原方法前执行。</td></tr><tr><td>@Before</td><td>前置建言（advice），在原方法后执行。</td></tr><tr><td>@Around</td><td>环绕建言（advice），在原方法执行前执行，在原方法执行后再执行（@Around可以实现其他两种advice）</td></tr><tr><td>@PointCut</td><td>声明切点，即定义拦截规则，确定有哪些方法会被切入</td></tr><tr><td>@Transactional</td><td>声明事务（一般默认配置即可满足要求，当然也可以自定义）</td></tr><tr><td>@Cacheable</td><td>声明数据缓存</td></tr><tr><td>@EnableAspectJAutoProxy</td><td>开启Spring对AspectJ的支持</td></tr><tr><td>@Value</td><td>值得注入。经常与Sping EL表达式语言一起使用，注入普通字符，系统属性，表达式运算结果，其他Bean的属性，文件内容，网址请求内容，配置文件属性值等等</td></tr><tr><td>@PropertySource</td><td>指定文件地址。提供了一种方便的、声明性的机制，用于向Spring的环境添加PropertySource。与@configuration类一起使用。</td></tr><tr><td>@PostConstruct</td><td>标注在方法上，该方法在构造函数执行完成之后执行。</td></tr><tr><td>@PreDestroy</td><td>标注在方法上，该方法在对象销毁之前执行。</td></tr><tr><td>@Profile</td><td>表示当一个或多个指定的文件是活动的时，一个组件是有资格注册的。使用@Profile注解类或者方法，达到在不同情况下选择实例化不同的Bean。@Profile(“dev”)表示为dev时实例化。</td></tr><tr><td>@EnableAsync</td><td>开启异步任务支持。注解在配置类上。</td></tr><tr><td>@Async</td><td>注解在方法上标示这是一个异步方法，在类上标示这个类所有的方法都是异步方法。</td></tr><tr><td>@EnableScheduling</td><td>注解在配置类上，开启对计划任务的支持。</td></tr><tr><td>@Scheduled</td><td>注解在方法上，声明该方法是计划任务。支持多种类型的计划任务：cron,fixDelay,fixRate</td></tr><tr><td>@Conditional</td><td>根据满足某一特定条件创建特定的Bean</td></tr><tr><td>@Enable*</td><td>通过简单的@Enable<em>来开启一项功能的支持。所有@Enable</em>注解都有一个@Import注解，@Import是用来导入配置类的，这也就意味着这些自动开启的实现其实是导入了一些自动配置的Bean(1.直接导入配置类2.依据条件选择配置类3.动态注册配置类)</td></tr><tr><td>@RunWith</td><td>这个是Junit的注解，springboot集成了junit。一般在测试类里使用:@RunWith(SpringJUnit4ClassRunner.class) — SpringJUnit4ClassRunner在JUnit环境下提供Sprng TestContext Framework的功能</td></tr><tr><td>@ContextConfiguration</td><td>用来加载配置ApplicationContext，其中classes属性用来加载配置类:@ContextConfiguration(classes = {TestConfig.class(自定义的一个配置类)})</td></tr><tr><td>@ActiveProfiles</td><td>用来声明活动的profile–@ActiveProfiles(“prod”(这个prod定义在配置类中))</td></tr><tr><td>@EnableWebMvc</td><td>用在配置类上，开启SpringMvc的Mvc的一些默认配置：如ViewResolver，MessageConverter等。同时在自己定制SpringMvc的相关配置时需要做到两点：1.配置类继承WebMvcConfigurerAdapter类2.就是必须使用这个@EnableWebMvc注解。</td></tr><tr><td>@RequestMapping</td><td>用来映射web请求（访问路径和参数），处理类和方法的。可以注解在类和方法上，注解在方法上的@RequestMapping路径会继承注解在类上的路径。同时支持Serlvet的request和response作为参数，也支持对request和response的媒体类型进行配置。其中有value(路径)，produces(定义返回的媒体类型和字符集)，method(指定请求方式)等属性。</td></tr><tr><td>@ResponseBody</td><td>将返回值放在response体内。返回的是数据而不是页面</td></tr><tr><td>@RequestBody</td><td>允许request的参数在request体中，而不是在直接链接在地址的后面。此注解放置在参数前。</td></tr><tr><td>@PathVariable</td><td>放置在参数前，用来接受路径参数。</td></tr><tr><td>@RestController</td><td>组合注解，组合了@Controller和@ResponseBody,当我们只开发一个和页面交互数据的控制层的时候可以使用此注解。</td></tr><tr><td>@ControllerAdvice</td><td>用在类上，声明一个控制器建言，它也组合了@Component注解，会自动注册为Spring的Bean。</td></tr><tr><td>@ExceptionHandler</td><td>用在方法上定义全局处理，通过他的value属性可以过滤拦截的条件：@ExceptionHandler(value=Exception.class)–表示拦截所有的Exception。</td></tr><tr><td>@ModelAttribute</td><td>将键值对添加到全局，所有注解了@RequestMapping的方法可获得次键值对（就是在请求到达之前，往model里addAttribute一对name-value而已）。</td></tr><tr><td>@InitBinder</td><td>通过@InitBinder注解定制WebDataBinder（用在方法上，方法有一个WebDataBinder作为参数，用WebDataBinder在方法内定制数据绑定，例如可以忽略request传过来的参数Id等）。</td></tr><tr><td>@WebAppConfiguration</td><td>一般用在测试上，注解在类上，用来声明加载的ApplicationContext是一个WebApplicationContext。他的属性指定的是Web资源的位置，默认为src/main/webapp,我们可以修改为：@WebAppConfiguration(“src/main/resources”)。</td></tr><tr><td>@EnableAutoConfiguration</td><td>此注释自动载入应用程序所需的所有Bean——这依赖于Spring Boot在类路径中的查找。该注解组合了@Import注解，@Import注解导入了EnableAutoCofigurationImportSelector类，它使用SpringFactoriesLoader.loaderFactoryNames方法来扫描具有META-INF/spring.factories文件的jar包。而spring.factories里声明了有哪些自动配置。</td></tr><tr><td>@SpingBootApplication</td><td>SpringBoot的核心注解，主要目的是开启自动配置。它也是一个组合注解，主要组合了@Configurer，@EnableAutoConfiguration（核心）和@ComponentScan。可以通过@SpringBootApplication(exclude={想要关闭的自动配置的类名.class})来关闭特定的自动配置。</td></tr><tr><td>@ImportResource</td><td>虽然Spring提倡零配置，但是还是提供了对xml文件的支持，这个注解就是用来加载xml配置的。例：@ImportResource({“classpath</td></tr><tr><td>@ConfigurationProperties</td><td>将properties属性与一个Bean及其属性相关联，从而实现类型安全的配置。例：@ConfigurationProperties(prefix=”authot”，locations={“classpath</td></tr><tr><td>@ConditionalOnBean</td><td>条件注解。当容器里有指定Bean的条件下。</td></tr><tr><td>@ConditionalOnClass</td><td>条件注解。当类路径下有指定的类的条件下。</td></tr><tr><td>@ConditionalOnExpression</td><td>条件注解。基于SpEL表达式作为判断条件。</td></tr><tr><td>@ConditionalOnJava</td><td>条件注解。基于JVM版本作为判断条件。</td></tr><tr><td>@ConditionalOnJndi</td><td>条件注解。在JNDI存在的条件下查找指定的位置。</td></tr><tr><td>@ConditionalOnMissingBean</td><td>条件注解。当容器里没有指定Bean的情况下。</td></tr><tr><td>@ConditionalOnMissingClass</td><td>条件注解。当类路径下没有指定的类的情况下。</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>条件注解。当前项目不是web项目的条件下。</td></tr><tr><td>@ConditionalOnResource</td><td>条件注解。类路径是否有指定的值。</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>条件注解。当指定Bean在容器中只有一个，后者虽然有多个但是指定首选的Bean。</td></tr><tr><td>@ConditionalOnWebApplication</td><td>条件注解。当前项目是web项目的情况下。</td></tr><tr><td>@EnableConfigurationProperties</td><td>注解在类上，声明开启属性注入，使用@Autowired注入。例：@EnableConfigurationProperties(HttpEncodingProperties.class)。</td></tr><tr><td>@AutoConfigureAfter</td><td>在指定的自动配置类之后再配置。例：@AutoConfigureAfter(WebMvcAutoConfiguration.class)</td></tr></tbody></table><h4 id="2-6-1-1-创建对象的注解"><a href="#2-6-1-1-创建对象的注解" class="headerlink" title="2.6.1.1.创建对象的注解"></a>2.6.1.1.创建对象的注解</h4><ul><li>@Component（标注当前类是Spring容器中的一个组件）</li><li>@Repository（一般用于持久层）</li><li>@Service（一般用于业务层）</li><li>@Controller（一般用于表现层）</li></ul><h4 id="2-6-1-2、注入数据的注解"><a href="#2-6-1-2、注入数据的注解" class="headerlink" title="2.6.1.2、注入数据的注解"></a>2.6.1.2、注入数据的注解</h4><ul><li><p>@Autowired：自动按类型注入，常用在变量上；如果容器中有唯一一个类型与注解的变量类型相同则可以自动注入成功。当有多个bean匹配则按照变量名称去查找，找不到则注入失败。</p></li><li><p>@Qualifier(“userDaoImpl”)：结合@Autowired使用，注入指定名称的bean；<strong>在类的成员变量上不能单独使用；在方法参数里使用可以单独使用；</strong></p></li><li><p>@Resource：相当于@Autowired自动注入，而@Resource（name=”xxx”）注入指定的bean，相当于同时使用@Autowired和@Qualifier(“userDaoImpl”)两个注解。</p><p><strong>上面三个注解都只能注入其他的bean类型，不能注入基本数据类型和String和复杂类型；复杂类型只能通过xml文件来注入。</strong></p></li><li><p>@Value：注入基本数据类型和String类型。指定数据的值，写法：${表达式}。</p></li></ul><h4 id="2-6-1-3、改变作用范围的注解"><a href="#2-6-1-3、改变作用范围的注解" class="headerlink" title="2.6.1.3、改变作用范围的注解"></a>2.6.1.3、改变作用范围的注解</h4><ul><li>@Scope：取值有singleton单例（默认）和prototype多例</li></ul><h4 id="2-6-1-4、和生命周期相关注解"><a href="#2-6-1-4、和生命周期相关注解" class="headerlink" title="2.6.1.4、和生命周期相关注解"></a>2.6.1.4、和生命周期相关注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;初始化注解&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;销毁注解&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个注解和bean标签里面的init-method、destroy-method作用相同。</p><h4 id="2-6-1-5-新注解"><a href="#2-6-1-5-新注解" class="headerlink" title="2.6.1.5.新注解"></a>2.6.1.5.新注解</h4><ul><li><p>@Configuration：作用在类上面标明当前类是一个配置类</p></li><li><p>@ComponentScan(basePackages = “com.wyl”)：扫描包注解：相当于下面这一行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&lt;context:component-scan base-package=&quot;com.wyl&quot;/&gt;--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>@Bean：在配置类中写在方法上，将方法返回的对象注入到Spring容器中。该注解的方法有参数时，会去容器中找bean对象，跟@Autowired注解一样的。</p></li><li><p>@PropertySource(“classpath:db.properties”)：指定数据库配置文件的位置</p></li><li><p>@Import：存在多个配置文件，用该注解引入其他配置文件。</p></li></ul><h4 id="2-6-1-6-Spring测试注解"><a href="#2-6-1-6-Spring测试注解" class="headerlink" title="2.6.1.6.Spring测试注解"></a>2.6.1.6.Spring测试注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = ApplicationConfig.class)</span> 纯注解</span><br><span class="line"><span class="comment">// @ContextConfiguration(locations = &quot;classpath:ApplicationContext.xml&quot;) xml配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountServiceImpl accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Account&gt; accountList = accountService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">            System.out.println(account);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RunWith(SpringJUnit4ClassRunner.class)：替换掉原来junit的runner执行方法，使用Spring自己的执行方法。</p><p>@ContextConfiguration(classes = ApplicationConfig.class)：如果是使用注解创建Spring的容器使用classes；</p><p>@ContextConfiguration(locations = “classpath:ApplicationContext.xml”)：使用xml配置文件的方法</p><h3 id="2-6-2-基于xml方式创建bean"><a href="#2-6-2-基于xml方式创建bean" class="headerlink" title="2.6.2.基于xml方式创建bean"></a>2.6.2.基于xml方式创建bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans        </span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.bean.User&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wyl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> UserTest&#123;</span><br><span class="line">ClassPathXmlApplicationContext context=<span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;Bean.xml&quot;</span>);</span><br><span class="line">        User userInfo=(User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(userInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-3-基于-Configuration-和-Bean-注解"><a href="#2-6-3-基于-Configuration-和-Bean-注解" class="headerlink" title="2.6.3.基于@Configuration 和@Bean 注解"></a>2.6.3.<strong>基于@Configuration 和@Bean 注解</strong></h3><p><strong>Configuration 配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTestConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//bean的id默认为方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user =<span class="keyword">new</span> User();</span><br><span class="line">        user.setName(<span class="string">&quot;王延领&quot;</span>);</span><br><span class="line">        user.setId(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> UserTest&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context=<span class="keyword">new</span> AnnotationConfigApplicationContext(MyTestConfig.class);</span><br><span class="line">        User userInfo=(User)context.getBean(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(userInfo.toString());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="3-Spring核心AOP"><a href="#3-Spring核心AOP" class="headerlink" title="3.Spring核心AOP"></a>3.Spring核心AOP</h1><p>AOP（Aspect Oriented Programming）：面向切面编程，在不修改源代码的情况下增强代码的功能。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p><img src="/images/img/blog/image-20210901112213781.png" alt="image-20210901112213781"></p><h2 id="3-1-AOP实现原理代理模式"><a href="#3-1-AOP实现原理代理模式" class="headerlink" title="3.1.AOP实现原理代理模式"></a>3.1.AOP实现原理代理模式</h2><p><strong>代理模式，创建一个代理对象实现和被对代理对象相同的接口，这样就拥有和被代理对象相同的功能，在这基础上增强原有的方法。</strong></p><ul><li>静态代理，手动去实现一个代理类</li><li>动态代理，通过反射动态的实现代理类</li></ul><h3 id="3-1-1-静态代理"><a href="#3-1-1-静态代理" class="headerlink" title="3.1.1 静态代理"></a>3.1.1 静态代理</h3><p>步骤：</p><ol><li><p>抽象角色 : 一般使用接口或者抽象类来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色 : 被代理的角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东出租房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色 : 代理真实角色 ; 代理真实角色后 , 一般会做一些附属的操作 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host=host;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line"> </span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租领合同&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>客户 : 使用代理角色来进行一些操作 .</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Host host=<span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//host.rent();</span></span><br><span class="line">        Proxy proxy=<span class="keyword">new</span> Proxy(host);</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好处:</strong></p><ul><li>可以使得我们的真实角色更加纯粹 . 不再去关注一些公共的事情 .</li><li>公共的业务由代理来完成 . 实现了业务的分工 ,</li><li>公共业务发生扩展时变得更加集中和方便 .</li></ul><p><strong>缺点 :</strong></p><ul><li>类多了 , 多了代理类 , 工作量变大了 . 开发效率降低 .<br>我们想要静态代理的好处，又不想要静态代理的缺点，所以 , 就有了动态代理</li></ul><h3 id="3-1-2-动态代理"><a href="#3-1-2-动态代理" class="headerlink" title="3.1.2.动态代理"></a>3.1.2.动态代理</h3><p>动态代理的代理类是动态生成的 . 静态代理的代理类是我们提前写好的</p><p>动态代理分为两类 : </p><ol><li><p>基于接口的动态代理—-JDK动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象角色：租房</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实角色: 房东，房东要出租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理:中介</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Rent rent;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRent</span><span class="params">(Rent rent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rent = rent;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//生成代理类，重点是第二个参数，获取要代理的抽象角色！之前都是一个角色，现在可以代理一类角色</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(),</span><br><span class="line">                rent.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// proxy : 代理类 method : 代理类的调用处理程序的方法对象.</span></span><br><span class="line">    <span class="comment">// 处理代理实例上的方法调用并返回结果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="comment">//核心：本质利用反射实现！</span></span><br><span class="line">        Object result = method.invoke(rent, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//租客</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//真实角色</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理实例的调用处理程序</span></span><br><span class="line">        ProxyInvocationHandler pih = <span class="keyword">new</span> ProxyInvocationHandler();</span><br><span class="line">        pih.setRent(host); <span class="comment">//将真实角色放置进去！</span></span><br><span class="line">        Rent proxy = (Rent)pih.getProxy(); <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于类的动态代理–cglib</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被代理的对象</span></span><br><span class="line">Account account = <span class="keyword">new</span> Account();</span><br><span class="line">Account o = (Account) Enhancer.create(account.getClass(), <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 被代理对象的方法执行前会执行</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> obj 被代理的对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> objects 参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> methodProxy 当前执行方法的代理的对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 和被代理对象的方法相同的返回值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Throwable 异常</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增强前...&quot;</span>);</span><br><span class="line">        Object invoke = method.invoke(account, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;增强后...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">o.findAll();</span><br></pre></td></tr></table></figure><h2 id="3-2-AOP术语"><a href="#3-2-AOP术语" class="headerlink" title="3.2.AOP术语"></a>3.2.AOP术语</h2><ul><li>Joinpoint（连接点）：指的是方法，可以被动态代理增强的方法就是连接点，Spring只支持方法类型的连接点</li><li>Pointcut（切入点）：定义要对哪些Joinpoint连接点（方法）进行拦截增强功能。<strong>被增强的方法叫做切入点，所有的方法都可以看做是一个连接点。只有被增强了的方法才叫做切入点。</strong></li><li>Advice（通知/增强）：拦截到Jointpoint（连接点）之后要做的事情就是通知。通知的类型：前置通知、后置通知、最终通知、环绕通知、异常通知。</li><li>Introduction（引介）：一种特殊的通知，在不修改代码的前提下，可以在运行期为类动态的添加一些方法或字段。 </li><li>Target（目标对象）：代理的目标对象</li><li>Weaving（织入）：是把增强 应用到 目标对象来创建新的代理对象的过程（添加新功能代码的过程）。Spring采用的是动态代理织入，而AspectJ采用编译期和类装载织入。</li><li>Proxy（代理）：一个类被AOP织入增强后，就产生一个结果代理类。</li><li>Aspect（切面）：是切入点和通知（引介）的结合。</li></ul><p><img src="/images/img/blog/image-20210903141349489.png" alt="image-20210903141349489"></p><h2 id="3-3-使用Spring实现Aop"><a href="#3-3-使用Spring实现Aop" class="headerlink" title="3.3.使用Spring实现Aop"></a>3.3.使用Spring实现Aop</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-1-通过-Spring-API-实现"><a href="#3-3-1-通过-Spring-API-实现" class="headerlink" title="3.3.1.通过 Spring API 实现"></a>3.3.1.通过 Spring API 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口与业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;增加用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;更新用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="comment">//returnValue 返回值</span></span><br><span class="line">    <span class="comment">//method被调用的方法</span></span><br><span class="line">    <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">    <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了&quot;</span> + target.getClass().getName()</span><br><span class="line">        +<span class="string">&quot;的&quot;</span>+method.getName()+<span class="string">&quot;方法,&quot;</span></span><br><span class="line">        +<span class="string">&quot;返回值：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.service.UserServiceImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--切入点  expression:表达式匹配要执行的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wyl.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕; advice-ref执行方法 . pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterLog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.search();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-2-自定义类来实现Aop"><a href="#3-3-2-自定义类来实现Aop" class="headerlink" title="3.3.2.自定义类来实现Aop"></a>3.3.2.自定义类来实现Aop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切入类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.config.DiyPointcut&quot;</span>/</span></span><br><span class="line">&lt;!--aop的配置--&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二种方式：使用AOP的标签实现--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.wyl.service.UserServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;diyPonitcut&quot;</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) context.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-3-使用注解实现AOP"><a href="#3-3-3-使用注解实现AOP" class="headerlink" title="3.3.3.使用注解实现AOP"></a>3.3.3.使用注解实现AOP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注解实现的增强类</span></span><br><span class="line"><span class="keyword">package</span> com.wyl.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointcut</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.wyl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行前---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.wyl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------方法执行后---------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.wyl.service.UserServiceImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;签名:&quot;</span>+jp.getSignature());</span><br><span class="line">        <span class="comment">//执行目标方法proceed</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-事务和JdbcTemplate"><a href="#4-事务和JdbcTemplate" class="headerlink" title="4.事务和JdbcTemplate"></a>4.事务和JdbcTemplate</h1><h2 id="4-1-JdbcTemplate使用"><a href="#4-1-JdbcTemplate使用" class="headerlink" title="4.1.JdbcTemplate使用"></a>4.1.JdbcTemplate使用</h2><p>入门案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring自带的数据源</span></span><br><span class="line">DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring?useSSL=false&amp;allowPublicKeyRetrieval=true&amp;serverTimezone=Asia/Shanghai&quot;</span>);</span><br><span class="line">dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line"></span><br><span class="line">List&lt;Account&gt; accountList = template.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account.class));</span><br><span class="line"><span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">    System.out.println(account);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体增删改查用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;insert into account(name, money) VALUES (?,?)&quot;</span>;</span><br><span class="line">    Account account1 = <span class="keyword">new</span> Account();</span><br><span class="line">    account1.setName(<span class="string">&quot;迪迦&quot;</span>);</span><br><span class="line">    account1.setMoney(<span class="number">10000F</span>);</span><br><span class="line">    jdbcTemplate.update(sql, account1.getName(), account1.getMoney());</span><br><span class="line">    find();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;delete from account where id = ?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql, <span class="number">6</span>);</span><br><span class="line">    find();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = jdbcTemplate.query(<span class="string">&quot;select * from account where id = ?&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account.class), <span class="number">1</span>);</span><br><span class="line">    Account account = accounts.get(<span class="number">0</span>);</span><br><span class="line">    account.setName(<span class="string">&quot;泰罗&quot;</span>);</span><br><span class="line">    String sql = <span class="string">&quot;update account set name = ? where id = ?&quot;</span>;</span><br><span class="line">    jdbcTemplate.update(sql, account.getName(),account.getId());</span><br><span class="line">    find();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accountList = jdbcTemplate.query(<span class="string">&quot;select * from account&quot;</span>, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account.class));</span><br><span class="line">    <span class="keyword">for</span> (Account account : accountList) &#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询一个bean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findByName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from account where name = ?&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(Account.class), name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询一个Object</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select count(id) from account&quot;</span>;</span><br><span class="line">    Integer integer = jdbcTemplate.queryForObject(sql, Integer.class);</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-Spring配置事务"><a href="#4-2-Spring配置事务" class="headerlink" title="4.2.Spring配置事务"></a>4.2.Spring配置事务</h2><p>在Spring中有两种方法管理事务：声明式事务管理和编程式事务管理；</p><ul><li><p>声明式事务管理：</p><p>1、xml配置文件式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">1、配置事务管理器</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、配置通知</span><br><span class="line"><span class="comment">&lt;!-- 配置事务的通知/增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;interceptor&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- isolation:事务隔离级别，默认使用数据库的隔离级别</span></span><br><span class="line"><span class="comment">         no-rollback-for：指定一个异常，除了该异常都回滚。</span></span><br><span class="line"><span class="comment">         propagation:事务传播行为，默认是required一定有事务，增删改设置required，查询设置supports</span></span><br><span class="line"><span class="comment">         read-only：是否只读。只有查询才能设置true。默认是false支持读写。</span></span><br><span class="line"><span class="comment">         rollback-for：指定一个异常，出现该异常就回滚，其他异常不回滚。</span></span><br><span class="line"><span class="comment">         timeout：事务超时时间，默认-1，永不超时。指定了以秒为单位。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定在哪种规则的方法上添加事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;transfer*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">3、事务管理器和切入点表达式关联起来</span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- service包下所有类的所有方法都添加事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;commonPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.sample.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 将事务管理器和切入点表达式关联起来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;commonPointcut&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、注解式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、配置事务管理器</span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2、开启对事务注解的支持</span><br><span class="line"><span class="comment">&lt;!-- 开启对事务注解的支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">3、在要添加事物的类上添加注解：@Transactional</span><br></pre></td></tr></table></figure><p>3、纯注解式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.sample&quot;)</span></span><br><span class="line"><span class="comment">// 相当于&lt;tx:annotation-driven/&gt;</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;db.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JdbcTemplate <span class="title">jdbcTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplate(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">==========</span><br><span class="line">在类上添加<span class="meta">@Transactional</span>注解即可</span><br></pre></td></tr></table></figure></li><li><p>编程式事务管理：通过代码去实现事务的管理，手动开启事务、提交、回滚。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java快速入门</title>
      <link href="2021/09/06/java/firststage/java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/09/06/java/firststage/java%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注释"><a href="#1-注释" class="headerlink" title="1.注释"></a>1.注释</h1><p>注释的重要性不言而喻，我们不管写什么代码注释必不可少，那么java的注释的书写方式与注释模板是怎么进行的呢？我们来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> frist;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description HelloWorld类</span></span><br><span class="line"><span class="comment"> * @Author 王延领</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    这是我们Java程序的主入口，</span></span><br><span class="line"><span class="comment">    main方法也是程序的主线程。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">       System.out.println(<span class="string">&quot;wyl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.1 注释<br>以上可以看出java的注释主要有三种<br>单行注释：只能注释当前行，以//开始，直到行结束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;输出</span><br></pre></td></tr></table></figure><p>多行注释：注释一段文字，以/*开始， */结束！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">   这是我们Java程序的主入口，</span><br><span class="line">   main方法也是程序的主线程。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>文档注释：用于生产API文档，配合JavaDoc。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> * @Description HelloWorld类</span><br><span class="line"> * @Author 王延领</span><br><span class="line"> **&#x2F;</span><br></pre></td></tr></table></figure><p>1.2 idea注释模版配置<br>1.2.1 定义java文件头部的注释<br>File =&gt; setting =&gt; editor =&gt;  File and Code Templates-class -Includes<br><img src="/images/img/blog/image-20210712143531809.png" alt="image-20210712143531809"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">  * @创建人 王延领</span><br><span class="line">  *@创建时间 $&#123;DATE&#125;</span><br><span class="line">  *描述 Todo</span><br><span class="line">**&#x2F;</span><br></pre></td></tr></table></figure><p>以上当你创建一个class的时候就会带上以上信息了<br>1.2.2 给java类中的方法添加上注释<br>第一步勾选Enable Live  Templates<br>首先要在上一步中勾选中 Enable  Live  Templates<br><img src="/images/img/blog/image-20210712144107882.png" alt="image-20210712144107882"><br>第二步新建一个Group<br>其次要打开LiveTemplates 然后新建一个Group<br>如图：<br><img src="/images/img/blog/2018082910142321.png" alt="img"><br>在弹窗口中输入你想要的group名称，wyl<br><img src="/images/img/blog/image-20210712144433114.png" alt="image-20210712144433114"><br>其中：Abbreviation 为快捷键,当输入w的时候就会提示对应的方法注释模板，j为类的注释模板<br><img src="/images/img/blog/image-20210712144649673.png" alt="image-20210712144649673"><br>Templete Text<br>注释内容，$$ 为动态模板参数点击Edit Vaariables 选择对应动态值。</p><p><img src="/images/img/blog/image-20210712144955611.png" alt="image-20210712144955611"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *@描述 TODO</span></span><br><span class="line"><span class="comment"> *@作者 王延领</span></span><br><span class="line"><span class="comment"> *@时间 2021/7/12</span></span><br><span class="line"><span class="comment"> *@版本 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wyl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *@描述</span></span><br><span class="line"><span class="comment">     *@参数 [str]</span></span><br><span class="line"><span class="comment">     *@返回值 [java.lang.String]</span></span><br><span class="line"><span class="comment">     *@创建人 王延领</span></span><br><span class="line"><span class="comment">     *@创建时间 2021/7/12</span></span><br><span class="line"><span class="comment">     *@修改人和其它信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">CommentTemplate</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2.关键字"></a>2.关键字</h1><table><thead><tr><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>class</td><td>类</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>while</td><td>用在循环结构中</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>package</td><td>包</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr></tbody></table><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h1><p><img src="/images/img/blog/image-20210712151302116.png" alt="image-20210712151302116">                </p><h2 id="3-1-数据类型转换"><a href="#3-1-数据类型转换" class="headerlink" title="3.1.数据类型转换"></a>3.1.数据类型转换</h2><h3 id="3-1-1自动类型转换"><a href="#3-1-1自动类型转换" class="headerlink" title="3.1.1自动类型转换"></a>3.1.1自动类型转换</h3><p>自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型。<br><img src="/images/img/blog/image-20210712152354656.png" alt="image-20210712152354656"><br>注：如果低级类型为char型，向高级类型（整型）转换时，会转换为对应ASCII码值</p><h3 id="3-1-2-强制类型转换"><a href="#3-1-2-强制类型转换" class="headerlink" title="3.1.2 强制类型转换"></a>3.1.2 强制类型转换</h3><p>强制类型转换，又被称为造型，用于显式的转换一个数值的类型.<br>转换方式为：(type)var ，运算符“()”中的type表示将值var想要转换成的目标数据类型。 条件是转换的数据类型必须是兼容的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>)x; <span class="comment">//值为3</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> d = c+<span class="number">1</span>;</span><br><span class="line">System.out.println(d); <span class="comment">//98</span></span><br><span class="line">System.out.println((<span class="keyword">char</span>)d); <span class="comment">//b</span></span><br></pre></td></tr></table></figure><h3 id="3-1-3-包装类过渡类型转换"><a href="#3-1-3-包装类过渡类型转换" class="headerlink" title="3.1.3.包装类过渡类型转换"></a>3.1.3.包装类过渡类型转换</h3><p>eg1:int i=Integer.parseInt(“123”)<br>说明：此方法只能适用于字符串转化成整型变量<br>eg2: float f=Float.valueOf(“123”).floatValue()<br>说明：上例是将一个字符串转化成一个Float对象，然后再调用这个对象的floatValue()方法返回其对应的float数值。<br>eg3: boolean b=Boolean.valueOf(“123”).booleanValue()<br>说明：上例是将一个字符串转化成一个Boolean对象，然后再调用这个对象的booleanValue()方法返回其对应的boolean数值。<br>eg4:double d=Double.valueOf(“123”).doublue()<br>说明：上例是将一个字符串转化成一个Double对象，然后再调用这个对象的doublue()方法返回其对应的double数值。<br>eg5: long l=Long.valueOf(“123”).longValue()<br>说明：上例是将一个字符串转化成一个Long对象，然后再调用这个对象的longValue()方法返回其对应的long数值。<br>eg6: char=Character.valueOf(“123”).charValue()<br>说明：上例是将一个字符串转化成一个Character对象</p><h1 id="4-常量、变量、运算符"><a href="#4-常量、变量、运算符" class="headerlink" title="4.常量、变量、运算符"></a>4.常量、变量、运算符</h1><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p><strong>变量是什么：就是可以变化的量！</strong><br>我们通过变量来操纵存储空间中的数据，变量就是指代这个存储空间！空间位置是确定的，但是里面放<br>置什么值不确定！Java是一种强类型语言，每个变量都必须声明其类型。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;数据类型 变量名 &#x3D; 值；可以使用逗号隔开来声明多个同类型变量。</span><br></pre></td></tr></table></figure><p>注意事项：<br>每个变量都有类型，类型可以是基本类型，也可以是引用类型。<br>变量名必须是合法的标识符。<br>变量声明是一条完整的语句，因此每一个声明都必须以分号结束<br><strong>变量作用域</strong><br>类变量（静态变量： static variable）：独立于方法之外的变量，用 static 修饰。<br>实例变量（成员变量：member variable）：独立于方法之外的变量，不过没有 static 修饰。<br>局部变量（lacal variable）：类的方法中的变量。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>常量(Constant)：初始化(initialize)后不能再改变值！不会变动的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> 常量名=值;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI=<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ol><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则 : monthSalary</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则: Man, GoodMan</li><li>方法名：首字母小写和驼峰原则: run(), runRun()<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2>Java 语言支持如下运算符：<br>算术运算符: +，-，<em>，/，%，++，–<br>赋值运算符 =<br>关系运算符: &gt;，&lt;，&gt;=，&lt;=，==，!= instanceof<br>逻辑运算符: &amp;&amp;，||，!<br>位运算符: &amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！)<br>条件运算符 ？：<br>扩展赋值运算符:+=，-=，</em>=，/=<h1 id="5-java流转控制"><a href="#5-java流转控制" class="headerlink" title="5.java流转控制"></a>5.java流转控制</h1>if…else、while、do…while、for、switch…case 在这就不累述了。<br>跳转：<br>return<br>return从一个方法返回，并把控制权交给调用它的语句序；或者直接结束当前的程序；<br>break<br>break语句在for、while、do···while循环语句中，经常用于强行退出当前循环；<br>continue<br>continue语句用于跳过此次循环，执行下次循环；<h1 id="6-方法"><a href="#6-方法" class="headerlink" title="6.方法"></a>6.方法</h1></li></ol><p><strong>那么什么是方法呢？</strong><br>Java方法是语句的集合，它们在一起执行一个功能。<br>方法是解决一类问题的步骤的有序组合<br>方法包含于类或对象中<br>方法在程序中被创建，在其他地方被引用<br>设计方法的原则：方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最<br>好保持方法的原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展。<br><strong>方法的优点</strong><br>使程序变得更简短而清晰。<br>有利于程序维护。<br>可以提高程序开发的效率。<br>提高了代码的重用性。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class="line">...</span><br><span class="line">方法体</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。<br><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需<br>的操作，但没有返回值。在这种情况下，returnValueType 是关键字void。<br><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。<br><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参<br>数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<br>    形式参数：在方法被调用时用于接收外界输入的数据。<br>    实参：调用方法时实际传给方法的数据。<br><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</p><h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>在方法声明中，在指定参数类型后加一个省略号(…) 。<br>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声<br>明。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typeName... parameterName</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>自己调用自己</p><h1 id="7-数组"><a href="#7-数组" class="headerlink" title="7.数组"></a>7.数组</h1><h2 id="数组的定义："><a href="#数组的定义：" class="headerlink" title="数组的定义："></a>数组的定义：</h2><p>数组是相同类型数据的有序集合.<br>数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。<br>其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们.</p><h2 id="数组的四个基本特点："><a href="#数组的四个基本特点：" class="headerlink" title="数组的四个基本特点："></a>数组的四个基本特点：</h2><ol><li>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</li><li>其元素必须是相同类型,不允许出现混合类型。</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li><li>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量<h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar; <span class="comment">// 首选的方法</span></span><br><span class="line">或</span><br><span class="line">dataType arrayRefVar[]; <span class="comment">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayRefVar = <span class="keyword">new</span> dataType[<span class="number">1</span> arraySize];</span><br></pre></td></tr></table></figure><p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p><h2 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h2><p>静态初始化<br>除了用new关键字来产生数组以外,还可以直接在定义数组的同时就为数组元素分配空间并赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure><p>动态初始化<br>数组定义、为数组元素分配空间、赋值的操作、分开进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>数组的默认初始化<br>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实<br>例变量同样的方式被隐式初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">boolean</span>[] b = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">String[] s = <span class="keyword">new</span> String[<span class="number">2</span>];</span><br><span class="line">System.out.println(a[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+a[<span class="number">1</span>]); <span class="comment">//0,0</span></span><br><span class="line">System.out.println(b[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+b[<span class="number">1</span>]); <span class="comment">//false,false</span></span><br><span class="line">System.out.println(s[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+s[<span class="number">1</span>]); <span class="comment">//null, null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h2><p>下标的合法区间：[0, length-1]，如果越界就会报错；</p><h2 id="for-和For-Each-循环"><a href="#for-和For-Each-循环" class="headerlink" title="for 和For-Each 循环"></a>for 和For-Each 循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(type element: array)&#123;</span><br><span class="line">System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class="line">System.out.println(myList[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type[][] typeName = <span class="keyword">new</span> type[typeLength1][<span class="number">1</span> typeLength2];</span><br></pre></td></tr></table></figure><h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><p>数组的工具类java.util.Arrays<br>java.util.Arrays 类能方便地操作数组. 使用之前需要导包！<br>具有以下常用功能：<br>给数组赋值：通过 fill 方法。<br>对数组排序：通过 sort 方法,按升序。<br>比较数组：通过 equals 方法比较数组中元素值是否相等。<br>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。<br>转换为list: 通过asList(a)进行转换</p><h1 id="8-面向对象"><a href="#8-面向对象" class="headerlink" title="8.面向对象"></a>8.面向对象</h1><p>万物皆为对象！！！对象是抽象概念的具体实例。</p><p>以类的方式组织代码，以对象的组织(封装)数据就是面向对象</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么要继承，因为有重复。所以才继承，进而我们就知道了。父类就是公共部分的定义或规则</p><p> Java 不支持多继承（只能继承一个类），但支持多重继承。</p><p><img src="/images/img/blog/image-20210809181238809.png" alt="image-20210809181238809"></p><p>特点</p><ul><li><p>子类拥有父类非 private 的属性、方法。</p></li><li><p>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</p></li><li><p>子类可以用自己的方式实现父类的方法。</p></li><li><p>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</p></li><li><p>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）</p></li></ul><p><strong>super 与 this 关键字</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;animal : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;dog : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animal : eat</span><br><span class="line">dog : eat</span><br><span class="line">animal : eat</span><br></pre></td></tr></table></figure><p><strong>final关键字</strong><br>final 关键字声明类可以把类定义为不能继承的，即最终类；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass()&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;SuperClass(int n)&quot;</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; </span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2&quot;</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123; <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">&quot;SubClass2(int n):&quot;</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass 类继承------&quot;</span>);</span><br><span class="line">    SubClass sc1 = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">100</span>); </span><br><span class="line">    System.out.println(<span class="string">&quot;------SubClass2 类继承------&quot;</span>);</span><br><span class="line">    SubClass2 sc3 = <span class="keyword">new</span> SubClass2();</span><br><span class="line">    SubClass2 sc4 = <span class="keyword">new</span> SubClass2(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------SubClass 类继承------</span><br><span class="line">SuperClass()</span><br><span class="line">SubClass</span><br><span class="line">SuperClass(<span class="keyword">int</span> n)</span><br><span class="line">SubClass(<span class="keyword">int</span> n):<span class="number">100</span></span><br><span class="line">------SubClass2 类继承------</span><br><span class="line">SuperClass(<span class="keyword">int</span> n)</span><br><span class="line">SubClass2</span><br><span class="line">SuperClass()</span><br><span class="line">SubClass2(<span class="keyword">int</span> n):<span class="number">200</span></span><br></pre></td></tr></table></figure><p><strong>构造函数</strong></p><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p><h2 id="重写-Override-与重载-Overload"><a href="#重写-Override-与重载-Overload" class="headerlink" title="重写(Override)与重载(Overload)"></a>重写(Override)与重载(Overload)</h2><h3 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h3><p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDog</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      Animal a = <span class="keyword">new</span> Animal(); <span class="comment">// Animal 对象</span></span><br><span class="line">      Animal b = <span class="keyword">new</span> Dog(); <span class="comment">// Dog 对象</span></span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">动物可以移动</span><br><span class="line">狗可以跑和走</span><br></pre></td></tr></table></figure><p><strong>方法的重写规则</strong></p><ul><li><p>参数列表与被重写方法的参数列表必须完全相同。</p></li><li><p>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</p></li><li><p>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</p></li><li><p>父类的成员方法只能被它的子类重写。</p></li><li><p>声明为 final 的方法不能被重写。</p></li><li><p>声明为 static 的方法不能被重写，但是能够被再次声明。</p></li><li><p>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</p></li><li><p>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</p></li><li><p>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</p></li><li><p>构造方法不能被重写。</p></li><li><p>如果不能继承一个类，则不能重写该类的方法。</p><h3 id="重载-Overload"><a href="#重载-Overload" class="headerlink" title="重载(Overload)"></a>重载(Overload)</h3><p>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p></li></ul><p>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</p><p>最常用的地方就是构造器的重载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Overloading</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//以下两个参数类型顺序不同</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test3&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest3&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String s,<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test4&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;returntest4&quot;</span>;</span><br><span class="line">    &#125;   </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Overloading o = <span class="keyword">new</span> Overloading();</span><br><span class="line">        System.out.println(o.test());</span><br><span class="line">        o.test(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o.test(<span class="number">1</span>,<span class="string">&quot;test3&quot;</span>));</span><br><span class="line">        System.out.println(o.test(<span class="string">&quot;test4&quot;</span>,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>重载规则:</strong></p><ul><li><p>被重载的方法必须改变参数列表(参数个数或类型不一样)；</p></li><li><p>被重载的方法可以改变返回类型；</p></li><li><p>被重载的方法可以改变访问修饰符；</p></li><li><p>被重载的方法可以声明新的或更广的检查异常；</p></li><li><p>方法能够在同一个类中或者在一个子类中被重载。</p></li><li><p>无法以返回值类型作为重载函数的区分标准。</p><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>多态就是同一个接口，使用不同的实例而执行不同操作。</p><p>多态性是对象多种表现形式的体现。</p><p><strong>多态的优点</strong></p><ol><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ol><p><strong>多态存在的三个必要条件</strong></p><p>继承<br>重写<br>父类引用指向子类对象：<strong>Parent p = new Child();</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Circle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Square.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle.draw()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>虚函数</strong></p><p>虚函数的存在是为了多态。</p><p>Java 中其实没有虚函数的概念，它的普通函数就相当于 C++ 的虚函数，动态绑定是Java的默认行为。如果 Java 中不希望某个函数具有虚函数特性，可以加上 final 关键字变成非虚函数。</p><p><strong>多态的实现方式</strong></p><p>方式一：重写：</p><p>方式二：接口</p><p>方式三：抽象类和抽象方法</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>拥有抽象方法的类就是抽象类，抽象类要使用abstract关键字声明.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//定义一个抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;存在方法体的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;<span class="comment">//抽象方法，没有方法体，有abstract关键字做修饰</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>继承抽象类</strong></p><p>我们可以通过以下方式继承 Employee 类的属性</p><p><strong>抽象类的使用原则</strong><br>（1）抽象方法必须为public或者protected（因为如果为private，则不能被子类继承，子类便无法实现该方法），缺省情况下默认为public；<br>（2）抽象类不能直接实例化，需要依靠子类采用向上转型的方式处理；<br>（3）抽象类必须有子类，使用extends继承，一个子类只能继承一个抽象类；<br>（4）子类（如果不是抽象类）则必须覆写抽象类之中的全部抽象方法（如果子类没有实现父类的抽象方法，则必须将子类也定义为为abstract类。）；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wz.abstractdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;<span class="comment">//定义一个抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">System.out.println(<span class="string">&quot;存在方法体的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;<span class="comment">//抽象方法，没有方法体，有abstract关键字做修饰</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//单继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;<span class="comment">//B类是抽象类的子类，是一个普通类</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;<span class="comment">//强制要求覆写</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World !&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> B();<span class="comment">//向上转型</span></span><br><span class="line"></span><br><span class="line">a.print();<span class="comment">//被子类所覆写的过的方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World !</span><br></pre></td></tr></table></figure><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。</p><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p><p>要访问该类的代码和数据，必须通过严格的接口控制。</p><p>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。</p><p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p><p><strong>封装的优点</strong></p><ol><li>良好的封装能够减少耦合。</li><li>类内部的结构可以自由修改。</li><li>可以对成员变量进行更精确的控制。</li><li>隐藏信息，实现细节。<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2></li></ol><p>在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。</p><p><strong>接口与类相似点</strong></p><ol><li>一个接口可以有多个方法。</li><li>接口文件保存在 .java 结尾的文件中，文件名使用接口名。</li><li>接口的字节码文件保存在 .class 结尾的文件中。</li><li>接口相应的字节码文件必须在与包名称相匹配的目录结构中。</li></ol><p><strong>接口与类的区别</strong></p><ol><li>接口不能用于实例化对象。</li><li>接口没有构造方法。</li><li>接口中所有的方法必须是抽象方法，Java 8 之后 接口中可以使用 default 关键字修饰的非抽象方法。</li><li>接口不能包含成员变量，除了 static 和 final 变量。</li><li>接口不是被类继承了，而是要被类实现。</li><li>接口支持多继承。</li></ol><p><strong>接口特性</strong></p><ol><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 <strong>public abstract</strong>（只能是 public abstract，其他修饰符都会报错）。</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 <strong>public static final</strong> 变量（并且只能是 public，用 private 修饰会报编译错误）。</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法。</li></ol><p><strong>抽象类和接口的区别</strong></p><ol><li><p>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</p></li><li><p>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</p></li><li><p>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法</p></li><li><p>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p></li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[可见度] interface 接口名称 [extends 其他的接口名] &#123;</span><br><span class="line">        <span class="comment">// 声明变量</span></span><br><span class="line">        <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名 : NameOfInterface.java */</span></span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="comment">//引入包</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NameOfInterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="comment">//任何类型 final, static 字段</span></span><br><span class="line">   <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口有以下特性</strong></p><ul><li>接口是隐式抽象的，当声明一个接口的时候，不必使用<strong>abstract</strong>关键字。</li><li>接口中每一个方法也是隐式抽象的，声明时同样不需要<strong>abstract</strong>关键字。</li><li>接口中的方法都是公有的。<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2></li></ul><p>枚举是一个特殊的类，一般表示一组常量.每个枚举都是通过 Class 在内部实现的，且所有的枚举值都是 public static final 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Color c1 = Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RED</span><br></pre></td></tr></table></figure><p><strong>values(), ordinal() 和 valueOf() 方法</strong></p><p>enum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Seriablizable 和 java.lang.Comparable 两个接口。</p><p>values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：</p><ul><li><p>values() 返回枚举类中所有的值。</p></li><li><p>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。</p></li><li><p>valueOf()方法返回指定字符串值的枚举常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        Color[] arr = Color.values();</span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (Color col : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(col + <span class="string">&quot; at index &quot;</span> + col.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException</span></span><br><span class="line">        System.out.println(Color.valueOf(<span class="string">&quot;RED&quot;</span>));</span><br><span class="line">        <span class="comment">// System.out.println(Color.valueOf(&quot;WHITE&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RED at index 0</span><br><span class="line">GREEN at index 1</span><br><span class="line">BLUE at index 2</span><br><span class="line">RED</span><br></pre></td></tr></table></figure><p><strong>枚举成员</strong></p><p>枚举跟普通类一样可以用自己的变量、方法和构造函数，构造函数只能使用 private 访问修饰符，所以外部无法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Constructor called for : &quot;</span> + <span class="keyword">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">colorInfo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Universal Color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="包-package"><a href="#包-package" class="headerlink" title="包(package)"></a>包(package)</h2><p>  为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间。</p><p>  <strong>包的 3 个作用如下</strong></p><ol><li><p>区分相同名称的类。</p></li><li><p>能够较好地管理大量的类。</p></li><li><p>控制访问范围。</p></li></ol><p><strong>定义</strong></p><pre><code> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 包名;</span><br></pre></td></tr></table></figure></code></pre><p>Java 包的命名规则如下：</p><ul><li>包名全部由小写字母（多个单词也全部小写）。</li><li>如果包名包含多个层次，每个层次用“.”分割。</li><li>包名一般由倒置的域名开头，比如 com.baidu，不要有 www。</li><li>自定义包不能 java 开头</li></ul><p><strong>包导入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\如果使用不同包中的其它类，需要使用该类的全名（包名+类名）</span><br><span class="line">    example.Test test = <span class="keyword">new</span> example.Test();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="keyword">import</span> 包名+类名;</span><br><span class="line"><span class="keyword">import</span> example.Test;\\or</span><br><span class="line"><span class="keyword">import</span> example.*;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>系统包</strong><br>| 包                    | 说明                                                         |<br>| ——————— | ———————————————————— |<br>| java.lang             | Java 的核心类库，包含运行 Java 程序必不可少的系统类，如基本数据类型、基本数学函数、 字符串处理、异常处理和线程类等，系统默认加载这个包 |<br>| java.io               | Java 语言的标准输入/输出类库，如基本输入/输出流、文件输入/输出、过滤输入/输出流等 |<br>| java.util             | 包含如处理时间的 Date 类，处理动态数组的 Vector 类，以及 Stack 和 HashTable 类 |<br>| java.awt              | 构建图形用户界面（GUI）的类库，低级绘图操作 Graphics 类、图形界面组件和布局管理 （如 Checkbox 类、Container 类、LayoutManger 接口等），以及用户界面交互控制和事 件响应（如 Event 类） |<br>| java.awt.image        | 处理和操纵来自网上的图片的 Java 工具类库                     |<br>| java.wat.peer         | 很少在程序中直接用到，使得同一个 Java 程序在不同的软硬件平台上运行 |<br>| java.net              | 实现网络功能的类库有 Socket 类、ServerSocket 类              |<br>| java.lang.reflect     | 提供用于反射对象的工具                                       |<br>| java.util.zip         | 实现文件压缩功能                                             |<br>| java.awt.datatransfer | 处理数据传输的工具类，包括剪贴板、字符串发送器等             |<br>| java.sql              | 实现 JDBC 的类库                                             |<br>| java.rmi              | 提供远程连接与载入的支持                                     |<br>| java. security        | 提供安全性方面的有关支持                                     |</p><h1 id="9-异常处理"><a href="#9-异常处理" class="headerlink" title="9.异常处理"></a>9.异常处理</h1><h2 id="异常处理的概念"><a href="#异常处理的概念" class="headerlink" title="异常处理的概念"></a>异常处理的概念</h2><p>是编程语言或计算机硬件里的一种机制，用于处理软件或信息系统中出现的异常状况（即超出程序正常执行流程的某些特殊条件）。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>Java异常机制用到的几个关键字：try、catch、finally、throw、throws。</p><p><strong>try</strong> – 用于监听。将要被监听的代码(可能抛出异常的代码)放在try语句块之内，当try语句块内发生异常<br>时，异常就被抛出。<br><strong>catch</strong> – 用于捕获异常。catch用来捕获try语句块中发生的异常。<br><strong>finally</strong> – finally语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络<br>连接和磁盘文件)。只有finally块，执行完成之后，才会回来执行try或者catch块中的return或者throw语<br>句，如果finally中使用了return或者throw等终止方法的语句，则就不会跳回执行，直接停止。<br><strong>throw</strong> – 用于抛出异常。<br><strong>throws</strong> – 用在方法签名中，用于声明该方法可能抛出的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">       可能会发生的异常</span><br><span class="line">   &#125;<span class="keyword">catch</span>(异常类型 异常名(变量))&#123;</span><br><span class="line">       针对异常进行处理的代码</span><br><span class="line">   &#125;<span class="keyword">catch</span>(异常类型 异常名(变量))&#123;</span><br><span class="line">       针对异常进行处理的代码</span><br><span class="line">   &#125;...</span><br><span class="line">   [<span class="keyword">finally</span>&#123;</span><br><span class="line">       释放资源代码；</span><br><span class="line">   &#125;]</span><br></pre></td></tr></table></figure><h2 id="Error与Exception区别"><a href="#Error与Exception区别" class="headerlink" title="Error与Exception区别"></a>Error与Exception区别</h2><p>Error（错误）是系统中的错误，程序员是不能改变的和处理的，是在程序编译时出现的错误，只能通过修改程序才能修正。一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误，内存空间不足，方法调用栈溢等。对于这类错误的导致的应用程序中断，仅靠程序本身无法恢复和和预防，遇到这样的错误，建议让程序终止。<br>Exception（异常）表示程序可以处理的异常，可以捕获且可能恢复。遇到这类异常，应该尽可能处理异常，使程序恢复运行，而不应该随意终止异常。</p><h2 id="throw与throws区别"><a href="#throw与throws区别" class="headerlink" title="throw与throws区别"></a>throw与throws区别</h2><p>throw：指的是在方法中人为抛出一个异常对象（这个异常对象可能是自己实例化或者抛出已存在的）；<br><code>throw  ThrowableInstance;</code><br>throws：在方法的声明上使用，表示此方法在调用时必须处理异常。<br><code>throw new NullPointerException(&quot;demo&quot;);</code><br><img src="/images/img/blog/image-20210728140018762.png" alt="image-20210728140018762"></p><p>​                                    Java异常层次结构图（网上获取）</p><h1 id="10-集合框架"><a href="#10-集合框架" class="headerlink" title="10.集合框架"></a>10.集合框架</h1><p>所有集合类都位于 java.util 包下。Java的集合类主要由两个接口派生而出：Collection 和 Map，Collection 和 Map 是 Java 集合框架的根接口，这两个接口又包含了一些子接口或实现类。</p><p>集合框架被设计成要满足以下几个目标：</p><ul><li>该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。</li><li>该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。</li><li>对一个集合的扩展和适应必须是简单的。</li></ul><p>集合框架都包含如下内容：</p><ul><li><p><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</p></li><li><p><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p></li><li><p><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p><p><img src="/images/img/blog/image-20210728172402028.png" alt="image-20210728172402028"></p></li></ul><p>Collection是一个基本的集合接口，Collection中可以容纳一组集合元素（Element）</p><h2 id="Collection-接口"><a href="#Collection-接口" class="headerlink" title="Collection 接口"></a>Collection 接口</h2><p>Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。</p><p><strong>List</strong></p><p>List接口是一个有序, 元素可重复的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。</p><ol><li>ArrayList</li></ol><p>底层数据结构是数组，查改快，增删慢。</p><p>非线程安全，效率高</p><p>方法：</p><p><img src="/images/img/blog/image-20210728173620540.png" alt="image-20210728173620540"></p><p>排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;  <span class="comment">// 引入 Collections 类</span></span><br><span class="line">Collections.sort(sites); *<span class="comment">// 字母排序*</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Vector</li></ol><p>底层数据结构是数组，查改快，增删慢。</p><p>线程安全，效率低</p><ol start="3"><li>LinkedList</li></ol><p>底层数据结构是<strong>链表</strong>，查改慢，增删快。</p><p>非线程安全，效率高</p><p><strong>以下情况使用 LinkedList :</strong></p><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul><p>LinkedList 继承了 AbstractSequentialList 类。</p><p>LinkedList 实现了 Queue 接口，可作为队列使用。</p><p>LinkedList 实现了 List 接口，可进行列表的相关操作。</p><p>LinkedList 实现了 Deque 接口，可作为队列使用。</p><p>LinkedList 实现了 Cloneable 接口，可实现克隆。</p><p>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</p><p>方法：</p><p><img src="/images/img/blog/image-20210728174512617.png" alt="image-20210728174512617"></p><p><strong>Set</strong></p><p>Set 接口存储一组唯一，无序的对象。</p><ol><li>HashSet</li></ol><p>底层数据结构是哈希表。(无序**,唯一**)</p><p>依赖两个方法：hashCode()和equals() 保证元素唯一性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunoobTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码只会输出一个Runoob。</p><ol start="2"><li>LinkedHashSet</li></ol><p>底层数据结构是链表和哈希表。(FIFO插入有序,唯一)</p><p>1.由链表保证元素有序</p><p>2.由哈希表保证元素唯一</p><ol start="3"><li>TreeSet</li></ol><p>底层数据结构是红黑树。(唯一，有序)</p><p>如何保证元素排序的呢? 自然排序，比较器排序</p><h2 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h2><ul><li>Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</li><li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 **&lt;实现类有HashSet,TreeSet&gt;**。</li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</li></ul><p><img src="/images/img/blog/image-20210728172343233.png" alt="image-20210728172343233"></p><p>Map与Collection是并列关系。Map提供键（key）到值（value）的映射。一个Map中不能包含相同的键，每个键只能映射一个值。</p><ol><li>HashMap</li></ol><p>无序，非线程安全，效率高。HashMap允许null值（key和value都允许）。</p><p><img src="/images/img/blog/image-20210728174945196.png" alt="image-20210728174945196"></p><ol start="2"><li>HashTable</li></ol><p>无序，线程安全，效率低。除构造函数外，HashTable的所有 public 方法声明中都有 synchronized关键字，而HashMap的源码中则没有。HashTable不允许null值（key和value都允许）。</p><ol start="3"><li>TreeMap</li></ol><p>有序，非线程安全，效率高（O(logN)），但比不上HashMap (O(1))。</p><h1 id="11-流-Stream-、文件-File-和IO"><a href="#11-流-Stream-、文件-File-和IO" class="headerlink" title="11.流(Stream)、文件(File)和IO"></a>11.流(Stream)、文件(File)和IO</h1><p>Java.io 包中定义了多个流类型（类或抽象类）来实现输入/输出功能；</p><p><img src="/images/img/blog/1320926-20200115201550919-765865084.png" alt="img"></p><p>可以从不同的角度对其进行分<br>类：<br>1.按数据流的方向不同可以分为输入流【InputStream（字节流），Reader（字符流）】和输出流【OutPutStream（字节流），Writer（字符流）】<br>2.按照处理数据单位不同可以分为字节流【一个字节（Byte）是8位（bit）)】和字符流【一个字符是2个字节】<br>3.按照功能不同可以分为节点流和处理流</p><p><img src="/images/img/blog/image-20210905011146261.png" alt="image-20210905011146261"></p><p>4.按照操作对象分</p><p><img src="/images/img/blog/1320926-20200115201810097-1009499186.png" alt="img"></p><h2 id="InputStream-和-OutputStream"><a href="#InputStream-和-OutputStream" class="headerlink" title="InputStream 和 OutputStream"></a>InputStream 和 OutputStream</h2><p><img src="/images/img/blog/2012121818562293.png" alt="img"></p><p><img src="/images/img/blog/2012121819001442.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fileStreamTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span> bWrite[] = &#123; <span class="number">11</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class="line">                os.write(bWrite[x]); <span class="comment">// writes the bytes</span></span><br><span class="line">            &#125;</span><br><span class="line">            os.close();</span><br><span class="line"> </span><br><span class="line">            InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> size = is.available();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) is.read() + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。</p><p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文件名 :fileStreamTest2.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">fileStreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File f = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        FileOutputStream fop = <span class="keyword">new</span> FileOutputStream(f);</span><br><span class="line">        <span class="comment">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class="line">        OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(fop, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class="line">        writer.append(<span class="string">&quot;中文输入&quot;</span>);</span><br><span class="line">        <span class="comment">// 写入到缓冲区</span></span><br><span class="line">        writer.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        writer.append(<span class="string">&quot;English&quot;</span>);</span><br><span class="line">        <span class="comment">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="comment">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class="line">        fop.close();</span><br><span class="line">        <span class="comment">// 关闭输出流,释放系统资源</span></span><br><span class="line">        FileInputStream fip = <span class="keyword">new</span> FileInputStream(f);</span><br><span class="line">        <span class="comment">// 构建FileInputStream对象</span></span><br><span class="line">        InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(fip, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (reader.ready()) &#123;</span><br><span class="line">            sb.append((<span class="keyword">char</span>) reader.read());</span><br><span class="line">            <span class="comment">// 转成char加到StringBuffer对象中</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">// 关闭读取流</span></span><br><span class="line">        fip.close();</span><br><span class="line">        <span class="comment">// 关闭输入流,释放系统资源</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reader-流与Writer流"><a href="#Reader-流与Writer流" class="headerlink" title="Reader 流与Writer流"></a>Reader 流与Writer流</h2><p><img src="/images/img/blog/2012121819033620.png" alt="img"></p><p><img src="/images/img/blog/2012121819042121.png" alt="img"></p><p>Reader ,Write与InputStream ，OutputStream： 唯一的区别就在于读的数据单位不同分别为（16bit），（8bit）</p><h2 id="创建读取目录："><a href="#创建读取目录：" class="headerlink" title="创建读取目录："></a>创建读取目录：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreateDir</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dirname = <span class="string">&quot;/tmp/user/java/bin&quot;</span>;</span><br><span class="line">        File d = <span class="keyword">new</span> File(dirname);</span><br><span class="line">        <span class="comment">// 现在创建目录</span></span><br><span class="line">        d.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        String dirname = <span class="string">&quot;/tmp&quot;</span>;</span><br><span class="line">        File f1 = <span class="keyword">new</span> File(dirname);</span><br><span class="line">        <span class="keyword">if</span> (f1.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目录 &quot;</span> + dirname);</span><br><span class="line">            String s[] = f1.list();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">                File f = <span class="keyword">new</span> File(dirname + <span class="string">&quot;/&quot;</span> + s[i]);</span><br><span class="line">                <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                    System.out.println(s[i] + <span class="string">&quot; 是一个目录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(s[i] + <span class="string">&quot; 是一个文件&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(dirname + <span class="string">&quot; 不是一个目录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteFileDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里修改为自己的测试目录</span></span><br><span class="line">        File folder = <span class="keyword">new</span> File(<span class="string">&quot;/tmp/java/&quot;</span>);</span><br><span class="line">        deleteFolder(folder);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 删除文件及目录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteFolder</span><span class="params">(File folder)</span> </span>&#123;</span><br><span class="line">        File[] files = folder.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                    deleteFolder(f);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    f.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        folder.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存流"><a href="#缓存流" class="headerlink" title="缓存流"></a>缓存流</h2><p>是处理流的一种，它是要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，避免频繁读写硬盘， 提高了读写的效率。同时增加了一些新的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader(Reader in)</span><br><span class="line">BufferedReader(Reader in,<span class="keyword">int</span> sz) <span class="comment">//sz 为自定义缓冲区的大小</span></span><br><span class="line">BufferedWriter(Writer out)</span><br><span class="line">BufferedWriter(Writer out,<span class="keyword">int</span> sz)</span><br><span class="line">BufferedInputStream(InputStream in)</span><br><span class="line">BufferedInputStream(InputStream in,<span class="keyword">int</span> size)</span><br><span class="line">BufferedOutputStream(InputStream in)</span><br><span class="line">BufferedOutputStream(InputStream in,<span class="keyword">int</span> size)</span><br></pre></td></tr></table></figure><p>BufferedInputStream</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.chapter;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">File f = <span class="keyword">new</span> File(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fis = <span class="keyword">new</span> FileInputStream( f);</span><br><span class="line"><span class="comment">// 在FileInputStream节点流的外面套接一层处理流BufferedInputStream</span></span><br><span class="line">BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">System.out.println((<span class="keyword">char</span>) bis.read());</span><br><span class="line">System.out.println((<span class="keyword">char</span>) bis.read());</span><br><span class="line">bis.mark(<span class="number">100</span>);<span class="comment">// 在第100个字符处做一个标记</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">bis.reset();<span class="comment">// 重新回到原来标记的地方</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span> &amp;&amp; (c = bis.read()) != -<span class="number">1</span>; i++) &#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">&#125;</span><br><span class="line">bis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BufferedReader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.chapter;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBufferStream</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;a\\Student.txt&quot;</span>));</span><br><span class="line"><span class="comment">//在节点流FileWriter的外面再套一层处理流BufferedWriter</span></span><br><span class="line">String s = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">s = String.valueOf(Math.random());<span class="comment">//“Math.random()”将会生成一系列介于0～1之间的随机数。</span></span><br><span class="line"><span class="comment">// static String valueOf(double d)这个valueOf()方法的作用就是把</span></span><br><span class="line">一个<span class="keyword">double</span>类型的数转换成字符串</span><br><span class="line"><span class="comment">//valueOf()是一个静态方法，所以可以使用“类型.静态方法名”的形式来调用</span></span><br><span class="line">bw.write(s);<span class="comment">//把随机数字符串写入到指定文件中</span></span><br><span class="line">bw.newLine();<span class="comment">//调用newLine()方法使得每写入一个随机数就换行显示</span></span><br><span class="line">&#125;</span><br><span class="line">bw.flush();<span class="comment">//调用flush()方法清空缓冲区</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;a:\\Student.txt&quot;</span>));</span><br><span class="line"><span class="comment">//在节点流FileReader的外面再套一层处理流BufferedReader</span></span><br><span class="line"><span class="keyword">while</span>((s = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="comment">//使用BufferedReader处理流里面提供String readLine()方法读取文件中的数据时是一行一行读取的</span></span><br><span class="line"><span class="comment">//循环结束的条件就是使用readLine()方法读取数据返回的字符串为空值后则表</span></span><br><span class="line">示已经读取到文件的末尾了。</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br><span class="line">br.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p><strong>InputStreamReader 和 OutputStreamWriter 用于字节数据到字符数据之间的转换</strong><br>InputStreamReader 需要和 InputStream “套接” 。<br>OutputStreamWriter 需要和 OutputStream “套接” 。<br>转换流在构造时可以指定其编码集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTransform1</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:/char.txt&quot;</span>));</span><br><span class="line">    osw.write(<span class="string">&quot;熊方园真烦人&quot;</span>);<span class="comment">// 把字符串写入到指定的文件中去</span></span><br><span class="line">    System.out.println(osw.getEncoding());<span class="comment">// 使用getEncoding()方法取得当前系统的默认字符编码</span></span><br><span class="line">    osw.close();</span><br><span class="line">    osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\java\\char.txt&quot;</span>, <span class="keyword">true</span>), <span class="string">&quot;utf-8&quot;</span>);<span class="comment">// 如果在调用FileOutputStream的构造方法时没有加入true，那么新加入的字符    串就会替换掉原来写入的字符串，在调用构造方法时指定了字符的编码</span></span><br><span class="line">    osw.write(<span class="string">&quot;不想搭理她&quot;</span>);<span class="comment">// 再次向指定的文件写入字符串，新写入的字符串加入到原来字符串的后面</span></span><br><span class="line">    System.out.println(osw.getEncoding());</span><br><span class="line">    osw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>数据流 DataInputStream DataOutputStream 【分别继承自InputStream 和 OutputStream】等-提供将基础数据类型写入到文件中，或者读取出来.提供了可以存取与机器无关的Java原始类型数据（int，double等）的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"><span class="comment">//在调用构造方法时，首先会在内存里面创建一个ByteArray字节数组</span></span><br><span class="line">DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(baos);</span><br><span class="line"><span class="comment">//在输出流的外面套上一层数据流，用来处理int，double类型的数</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    dos.writeDouble(Math.random());<span class="comment">//把产生的随机数直接写入到字节数组</span></span><br><span class="line">    ByteArray中</span><br><span class="line">    dos.writeBoolean(<span class="keyword">true</span>);<span class="comment">//布尔类型的数据在内存中就只占一个字节</span></span><br><span class="line">    ByteArrayInputStream bais = <span class="keyword">new</span></span><br><span class="line">    ByteArrayInputStream(baos.toByteArray());</span><br><span class="line">        System.out.println(bais.available());</span><br><span class="line">    DataInputStream dis = <span class="keyword">new</span> DataInputStream(bais);</span><br><span class="line">    System.out.println(dis.readDouble());<span class="comment">//先写进去的就先读出来，调用readDouble()方法读取出写入的随机数</span></span><br><span class="line">    System.out.println(dis.readBoolean());<span class="comment">//后写进去的就后读出来，这里面的读取顺序不能更改位置，否则会打印出不正确的结果</span></span><br><span class="line">    dos.close();</span><br><span class="line">    bais.close();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>打印流是输出信息最方便的类，注意包含字节打印流PrintStream和字符打印流：PrintWriter。打印流提供了非常方便的打印功能，<br>可以打印任何类型的数据信息，例如：小数，整数，字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><p>对象的输入输出流的作用： 用于写入对象 的信息和读取对象的信息。 使得对象持久化。<br>  ObjectInputStream  : 对象输入流<br>  ObjectOutPutStream ：对象输出流 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建要写入磁盘的类，这个类需要实现接口 Serializable（可系列化的）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="comment">// 在这里保证了serialVersionUID 的唯一性，防止属性变量的临时改变，从而造成写入id与读取id不同</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">int</span> id ; <span class="comment">//额外需要添加一个属性</span></span><br><span class="line">    String name ;</span><br><span class="line">    <span class="keyword">transient</span> String sex; <span class="comment">//transient修饰属性，表示暂时的，则这个属性不会被写入磁盘</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,String sex,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">objectIO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">        createObj();</span><br><span class="line">        readObj();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//（一）先写入对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createObj</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建目标路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\bg\\Desktop\\objTest.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//2.创建流通道</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">        <span class="comment">//3.创建对象输出流</span></span><br><span class="line">        ObjectOutputStream objOP = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        <span class="comment">//4.创建类对象，并初始化</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student(<span class="string">&quot;玛丽苏&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//5.向目标路径文件写入对象</span></span><br><span class="line">        objOP.writeObject(stu);</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">        objOP.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//再读取对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">readObj</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\bg\\Desktop\\objTest.txt&quot;</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        ObjectInputStream objIP = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">//读取对象数据，需要将对象流强制转换为 要写入对象的类型</span></span><br><span class="line">        Student stu = (Student)objIP.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;\n name:&quot;</span>+stu.name+<span class="string">&quot;\n sex:&quot;</span>+stu.sex+<span class="string">&quot;\n age:&quot;</span>+stu.age);</span><br><span class="line">        objIP.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的关闭顺序"><a href="#流的关闭顺序" class="headerlink" title="流的关闭顺序"></a>流的关闭顺序</h2><ol><li>一般情况下是：先打开的后关闭，后打开的先关闭</li><li>另一种情况：看依赖关系，如果流a依赖流b，应该先关闭流a，再关闭流b。例如，处理流a依赖节点流b，应该先关闭处理流a，再关闭节点流b</li><li>可以只关闭处理流，不用关闭节点流。处理流关闭的时候，会调用其处理的节点流的关闭方法。<h1 id="12-多线程"><a href="#12-多线程" class="headerlink" title="12.多线程"></a>12.多线程</h1></li></ol><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><p>继承Thread类，实现Runnable接口，实现Callable接口</p><p><strong>1.继承Thread类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreateDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start(); <span class="comment">//调用start()方法启动线程,线程不一定立即执行，CPU安排调度</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//继承Thread类</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;<span class="comment">//重写run()方法，编写线程执行体</span></span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;hellow_world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.实现Runnable接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreateDemo2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建线程对象，调用start()方法启动线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> MyRunnable();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;通过Runnable创建的线程!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述两种创建方式,工作时性质一样。但是建议使用***实现Runable接口***方式。解决单继承的局限性。</p><p><strong>3.实现Callable接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadCreateDemo3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 实现call方法，作为线程执行体</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( ; i &lt; <span class="number">100</span> ; i++ )&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;\t&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// call()方法可以有返回值</span></span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建Callable对象</span></span><br><span class="line">        ThreadCreateDemo3 myCallableTest = <span class="keyword">new</span> ThreadCreateDemo3();</span><br><span class="line">        <span class="comment">// 使用FutureTask来包装Callable对象</span></span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(myCallableTest);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">100</span> ; i++)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+ <span class="string">&quot; \t&quot;</span> + i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="comment">// 实质还是以Callable对象来创建、并启动线程</span></span><br><span class="line">                <span class="keyword">new</span> Thread(task , <span class="string">&quot;callable&quot;</span>).start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 获取线程返回值</span></span><br><span class="line">            System.out.println(<span class="string">&quot;callable返回值：&quot;</span> + task.get());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>实现Callable接口，需要返回值类型</p></li><li><p>重写call方法，需要抛出异常</p></li><li><p>创建目标对象</p></li><li><p>创建执行服务：ExecutorService ser = Executors.newFixedThreadPool(1);</p></li><li><p>提交执行：Future<Boolean> result1 = ser.submit(t1);</p></li><li><p>获取结果：boolean r1 = result1.get()</p></li><li><p>关闭服务：ser.shutdownNow();<br><strong>总结</strong></p></li><li><p>不过实现Runnable接口与实现Callable接口的方式基本相同，只是Callable接口里定义的方法有返回值，可以声明抛出异常而已。 因此可以将实现Runnable接口和实现Callable接口归为一种方式。</p></li><li><p>Runnable、Callable接口的方式创建多线程,所以非常适合多个相同线程来处理同一份资源的情况,如果需要访问当前线程，则必须使用Thread.currentThread()方法</p></li><li><p>采用继承Thread类的方式创建多线程,因为线程类已经继承了Thread类，所以不能再继承其他父类</p></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态新建(New)、就绪（Runnable）、运行（Running）、阻塞(Blocked)和死亡(Dead)5种状态</p><p><img src="/images/img/blog/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><p><img src="/images/img/blog/image-20210809153146504.png" alt="image-20210809153146504"><br>Thread.State：</p><ol><li><p>**初始(NEW)**：新创建了一个线程对象，但还没有调用start()方法。</p></li><li><p>**运行(RUNNABLE)**：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。<br>线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</p></li><li><p>**阻塞(BLOCKED)**：表示线程阻塞于锁。</p></li><li><p>**等待(WAITING)**：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</p></li><li><p>**超时等待(TIMED_WAITING)**：该状态不同于WAITING，它可以在指定的时间后自行返回。</p></li><li><p>**终止(TERMINATED)**：表示该线程已经执行完毕</p></li></ol><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p> Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度<br>器按照优先级决定应该调度哪个线程来执行。<br>线程的优先级用数字表示，范围从1~10.<br>hread.MIN_PRIORITY = 1;<br>Thread.MAX_PRIORITY = 10;<br>Thread.NORM_PRIORITY = 5;<br>使用以下方式改变或获取优先级<br>getPriority() . setPriority(int xxx)</p><h2 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h2><table><thead><tr><th>1</th><th><strong>public void start()</strong> 使该线程开始执行；<strong>Java</strong> 虚拟机调用该线程的 run 方法。</th></tr></thead><tbody><tr><td>2</td><td><strong>public void run()</strong> 如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</td></tr><tr><td>3</td><td><strong>public final void setName(String name)</strong> 改变线程名称，使之与参数 name 相同。</td></tr><tr><td>4</td><td><strong>public final void setPriority(int priority)</strong>  更改线程的优先级。</td></tr><tr><td>5</td><td><strong>public final void setDaemon(boolean on)</strong> 将该线程标记为守护线程或用户线程。</td></tr><tr><td>6</td><td><strong>public final void join(long millisec)</strong> 等待该线程终止的时间最长为 millis 毫秒。</td></tr><tr><td>7</td><td><strong>public void interrupt()</strong> 中断线程。</td></tr><tr><td>8</td><td><strong>public final boolean isAlive()</strong> 测试线程是否处于活动状态。</td></tr><tr><td>9</td><td><strong>public static void yield()</strong> 线程礼让： 暂停当前正在执行的线程对象，并执行其他线程。</td></tr><tr><td>10</td><td><strong>public static void sleep(long millisec)</strong> 线程休眠： 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。</td></tr><tr><td>11</td><td><strong>public static boolean holdsLock(Object x)</strong> 当且仅当当前线程在指定的对象上保持监视器锁时，才返回 true。</td></tr><tr><td>12</td><td><strong>public static Thread currentThread()</strong> 返回对当前正在执行的线程对象的引用。</td></tr><tr><td>13</td><td><strong>public static void dumpStack()</strong> 将当前线程的堆栈跟踪打印至标准错误流。</td></tr></tbody></table><p>停止线程：jdk提供了stop，但不建议使用可以自己去停止它</p><h2 id="守护-daemon-线程"><a href="#守护-daemon-线程" class="headerlink" title="守护(daemon)线程"></a>守护(daemon)线程</h2><p>线程分为前台线程与后台线程（用户线程与守护线程）<br>虚拟机必须确保用户线程执行完毕<br>虚拟机不用等待守护线程执行完毕</p><h2 id="并发，队列-和-锁，死锁"><a href="#并发，队列-和-锁，死锁" class="headerlink" title="并发，队列 和 锁，死锁"></a>并发，队列 和 锁，死锁</h2><p>同一个对象被多个线程同时操作就是并发。</p><p>多个线程访问同一个对象, 并且某些线程还想修改这个对象 .这时候我们就需要线程同步 . 线程同步其实就是一种等待机制 , 多个需要同时访问此对象的线程进入这个对象的等待池 形成队列, 等待前面线程使用完毕 , 下一个线<br>程再使用。</p><p>上面的并发问题我们会加一个锁（synchronized）来解决。我锁上门的时候你们都别进来。但是加上锁之后会有以下为：</p><ol><li><p>一个线程持有锁会导致其他所有需要此锁的线程挂起 ;</p></li><li><p>在多线程竞争下 , 加锁 , 释放锁会导致比较多的上下文切换 和 调度延时,引起性能问题 ;</p></li><li><p>如果一个优先级高的线程等待一个优先级低的线程释放锁 会导致优先级倒置 , 引起性能问题 .</p><p>java 死锁产生的四个必要条件：</p></li></ol><ul><li><p>1、互斥使用，即当资源被一个线程使用(占有)时，别的线程不能使用</p></li><li><p>2、不可抢占，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放。</p></li><li><p>3、请求和保持，即当资源请求者在请求其他的资源的同时保持对原有资源的占有。</p></li><li><p>4、循环等待，即存在一个等待队列：P1占有P2的资源，P2占有P3的资源，P3占有P1的资源。这样就形成了一个等待环路。</p><p>死锁的情况下如果打破上述任何一个条件，便可让死锁消失。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj1 = <span class="string">&quot;obj1&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj2 = <span class="string">&quot;obj2&quot;</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      LockA la = <span class="keyword">new</span> LockA();</span><br><span class="line">      <span class="keyword">new</span> Thread(la).start();</span><br><span class="line">      LockB lb = <span class="keyword">new</span> LockB();</span><br><span class="line">      <span class="keyword">new</span> Thread(lb).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockA</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LockTest.obj1) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj1&quot;</span>);</span><br><span class="line">               Thread.sleep(<span class="number">3000</span>); <span class="comment">// 此处等待是给B能锁住机会</span></span><br><span class="line">               <span class="keyword">synchronized</span> (LockTest.obj2) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj2&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 为测试，占用了就不放</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockB</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LockTest.obj2) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj2&quot;</span>);</span><br><span class="line">               Thread.sleep(<span class="number">3000</span>); <span class="comment">// 此处等待是给A能锁住机会</span></span><br><span class="line">               <span class="keyword">synchronized</span> (LockTest.obj1) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj1&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// 为测试，占用了就不放</span></span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">51</span>:<span class="number">06</span> CST <span class="number">2015</span> LockB 开始执行</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">51</span>:<span class="number">06</span> CST <span class="number">2015</span> LockA 开始执行</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">51</span>:<span class="number">06</span> CST <span class="number">2015</span> LockB 锁住 obj2</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">51</span>:<span class="number">06</span> CST <span class="number">2015</span> LockA 锁住 obj1</span><br></pre></td></tr></table></figure><p>解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnLockTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj1 = <span class="string">&quot;obj1&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj2 = <span class="string">&quot;obj2&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a2 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      LockAa la = <span class="keyword">new</span> LockAa();</span><br><span class="line">      <span class="keyword">new</span> Thread(la).start();</span><br><span class="line">      LockBb lb = <span class="keyword">new</span> LockBb();</span><br><span class="line">      <span class="keyword">new</span> Thread(lb).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockAa</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj1&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj2&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj2 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj1 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 马上进行尝试，现实情况下do something是不确定的</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBb</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj2&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj1&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj1 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj2 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">// 这里只是为了演示，所以tryAcquire只用1秒，而且B要给A让出能执行的时间，否则两个永远是死锁</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">13</span> CST <span class="number">2015</span> LockA 开始执行</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">13</span> CST <span class="number">2015</span> LockB 开始执行</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">13</span> CST <span class="number">2015</span> LockB 锁住 obj2</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">13</span> CST <span class="number">2015</span> LockA 锁住 obj1</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">14</span> CST 2015LockB 锁 obj1 失败</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">14</span> CST 2015LockA 锁 obj2 失败</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">15</span> CST <span class="number">2015</span> LockA 锁住 obj1</span><br><span class="line">Tue May <span class="number">05</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">15</span> CST <span class="number">2015</span> LockA 锁住 obj2</span><br></pre></td></tr></table></figure><ol><li><strong>synchronized 与 Lock 的对比</strong><br>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li><li>优先使用顺序：<br>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方<br>法体之外）</li></ol><h2 id="线程通讯"><a href="#线程通讯" class="headerlink" title="线程通讯"></a>线程通讯</h2><p>线程通信的目标是使线程间能够互相发送信号。另一方面，线程通信使线程能够等待其他线程的信号。</p><p><strong>线程的通信方式</strong></p><ol><li>volatile</li><li>Wait/Notify机制</li><li>join方式</li><li>threadLocal</li><li>CountDownLatch 并发工具</li><li>CyclicBarrier 并发工具</li></ol><p><strong>volatile</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volatile</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Boolean flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;线程结束&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Volatile());</span><br><span class="line">    t.start();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">5</span>);</span><br><span class="line">      flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span> - 执行</span><br><span class="line">Thread-<span class="number">0</span> - 执行</span><br><span class="line">Thread-<span class="number">0</span> - 执行</span><br><span class="line">Thread-<span class="number">0</span> - 执行</span><br><span class="line">Thread-<span class="number">0</span> - 执行</span><br><span class="line">线程结束</span><br></pre></td></tr></table></figure><p>**WaitNotify **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitNotify</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 状态锁</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Integer i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">odd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          i++;</span><br><span class="line">          lock.notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.wait();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">even</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">          System.out.println(Thread.currentThread().getName() + <span class="string">&quot; - &quot;</span> + i);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">          i++;</span><br><span class="line">          lock.notify();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.wait();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WaitNotify waitNotify = <span class="keyword">new</span> WaitNotify();</span><br><span class="line"></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(() -&gt; waitNotify.odd(), <span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(() -&gt; waitNotify.even(), <span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>join</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> threadCommunication;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinTest</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> sleepTime = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);</span><br><span class="line">            System.out.println(sleepTime);</span><br><span class="line">            Thread.sleep(sleepTime);</span><br><span class="line">            System.out.println(<span class="string">&quot;JoinTest end&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        JoinTest j = <span class="keyword">new</span> JoinTest();</span><br><span class="line">        j.start();</span><br><span class="line">        j.join();<span class="comment">//当前线程main等待线程对象（j)销毁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <strong>threadLocal</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sync; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SequenceNumber</span> </span>&#123; </span><br><span class="line"> <span class="comment">// 定义匿名子类创建ThreadLocal的变量 </span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Integer&gt; seqNum = <span class="keyword">new</span> ThreadLocal&lt;Integer&gt;() &#123; </span><br><span class="line"> <span class="comment">// 覆盖初始化方法 </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Integer <span class="title">initialValue</span><span class="params">()</span> </span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;; </span><br><span class="line"> <span class="comment">// 下一个序列号 </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextNum</span><span class="params">()</span> </span>&#123; </span><br><span class="line">     seqNum.set(seqNum.get() + <span class="number">1</span>); </span><br><span class="line">     <span class="keyword">return</span> seqNum.get(); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClient</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123; </span><br><span class="line">     <span class="keyword">private</span> SequenceNumber sn; </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">TestClient</span><span class="params">(SequenceNumber sn)</span> </span>&#123; </span><br><span class="line">     <span class="keyword">this</span>.sn = sn; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">// 线程产生序列号 </span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; </span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; </span><br><span class="line">         System.out.println(<span class="string">&quot;thread[&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;] sn[&quot;</span> + sn.getNextNum() + <span class="string">&quot;]&quot;</span>); </span><br><span class="line">         &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123; </span><br><span class="line">     SequenceNumber sn = <span class="keyword">new</span> SequenceNumber(); </span><br><span class="line">     <span class="comment">// 三个线程产生各自的序列号 </span></span><br><span class="line">     TestClient t1 = <span class="keyword">new</span> TestClient(sn); </span><br><span class="line">     TestClient t2 = <span class="keyword">new</span> TestClient(sn); </span><br><span class="line">     TestClient t3 = <span class="keyword">new</span> TestClient(sn); </span><br><span class="line">     t1.start(); </span><br><span class="line">     t2.start(); </span><br><span class="line">     t3.start(); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">thread[Thread-1] sn[1] </span><br><span class="line">thread[Thread-1] sn[2] </span><br><span class="line">thread[Thread-1] sn[3] </span><br><span class="line">thread[Thread-2] sn[1] </span><br><span class="line">thread[Thread-2] sn[2] </span><br><span class="line">thread[Thread-2] sn[3] </span><br><span class="line">thread[Thread-0] sn[1]</span><br><span class="line">thread[Thread-0] sn[2] </span><br><span class="line">thread[Thread-0] sn[3]</span><br></pre></td></tr></table></figure><p>**CountDownLatch **CountDownLatch<code>可以代替</code>wait/notify<code>的使用,并去掉</code>synchronized</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">import java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line">public class CountDown &#123;</span><br><span class="line">  private static Integer i &#x3D; 0;</span><br><span class="line">  final static CountDownLatch countDown &#x3D; new CountDownLatch(1);</span><br><span class="line"></span><br><span class="line">  public void odd() &#123;</span><br><span class="line">    while (i &lt; 10) &#123;</span><br><span class="line">      if (i % 2 &#x3D;&#x3D; 1) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot; - &quot; + i);</span><br><span class="line">        try &#123;</span><br><span class="line">          Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        countDown.countDown();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          countDown.await();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public void even() &#123;</span><br><span class="line">    while (i &lt; 10) &#123;</span><br><span class="line">      if (i % 2 &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + &quot; - &quot; + i);</span><br><span class="line">        try &#123;</span><br><span class="line">          Thread.sleep(1000);</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        countDown.countDown();</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          countDown.await();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    CountDown countDown &#x3D; new CountDown();</span><br><span class="line"></span><br><span class="line">    Thread t1 &#x3D; new Thread(() -&gt; countDown.odd(), &quot;线程1&quot;);</span><br><span class="line">    Thread t2 &#x3D; new Thread(() -&gt; countDown.even(), &quot;线程2&quot;);</span><br><span class="line"></span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>CyclicBarrier</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 准备...&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cyclicBarrier.await();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;全部启动完毕!&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;线程1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 准备...&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cyclicBarrier.await();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;全部启动完毕!&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;线程2&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 准备...&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        cyclicBarrier.await();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;全部启动完毕!&quot;</span>);</span><br><span class="line">    &#125;, <span class="string">&quot;线程3&quot;</span>).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">线程3: 准备...</span><br><span class="line">线程2: 准备...</span><br><span class="line">线程1: 准备...</span><br><span class="line">全部启动完毕!</span><br><span class="line">全部启动完毕!</span><br><span class="line">全部启动完毕!</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。</p><p>ExecutorService 和 Executors</p><ol><li><p><strong>ExecutorService：</strong>真正的线程池接口。常见子类ThreadPoolExecutor<br>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执<br>行Runnable</p></li><li><p><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般又来执行<br>Callable</p></li><li><p>void shutdown() ：关闭连接池</p></li></ol><p> <strong>Executors：</strong>工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><h1 id="13-注解"><a href="#13-注解" class="headerlink" title="13.注解"></a>13.注解</h1><p>Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。</p><p><strong>作用</strong></p><p>不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别)</p><p>可以被其他程序(比如:编译器等)读取.</p><p>可以附加在package , class , method , field 等上面 , 相当于给他们添加了额外的辅助信息</p><p>我们可以通过反射机制实现对这些元数据的访问</p><p><strong>格式</strong></p><p>注解是以”@注释名”在代码中存在的</p><p>还可以添加一些参数值 , 例如:@SuppressWarnings(value=”unchecked”)</p><h2 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h2><p><img src="/images/img/blog/image-20210809164852100.png" alt="image-20210809164852100"><br>Java 定义了一套注解，共有 10 个，java7之前3 个在 java.lang 中， 4 个在 java.lang.annotation 中，后续增加三个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">作用在代码的注解( java.lang )是</span><br><span class="line"><span class="meta">@Override</span> - 检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。</span><br><span class="line"><span class="meta">@Deprecated</span> - 标记过时方法。如果使用该方法，会报编译警告。</span><br><span class="line"><span class="meta">@SuppressWarnings</span> - 指示编译器去忽略注解中声明的警告。</span><br><span class="line">作用在其他注解的注解(或者说 元注解)是( java.lang.annotation)注解</span><br><span class="line"><span class="meta">@Retention</span> - 标识这个注解怎么保存，是只在代码中，还是编入<span class="class"><span class="keyword">class</span>文件中，或者是在运行时可以通过反射访问。</span></span><br><span class="line"><span class="class">@<span class="title">Documented</span> - 标记这些注解是否包含在用户文档中。</span></span><br><span class="line"><span class="class">@<span class="title">Target</span> - 标记这个注解应该是哪种 <span class="title">Java</span> 成员。</span></span><br><span class="line"><span class="class">@<span class="title">Inherited</span> - 标记这个注解是继承于哪个注解类(默认 注解并没有继承于任何子类)</span></span><br><span class="line"><span class="class"><span class="title">java7</span>之后增加的注解</span></span><br><span class="line"><span class="class">@<span class="title">SafeVarargs</span> - <span class="title">Java</span> 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</span></span><br><span class="line"><span class="class">@<span class="title">FunctionalInterface</span> - <span class="title">Java</span> 8 开始支持，标识一个匿名函数或函数式接口。</span></span><br><span class="line"><span class="class">@<span class="title">Repeatable</span> - <span class="title">Java</span> 8 开始支持，标识某注解可以在同一个声明上使用多次。</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="comment">//测试内置注解</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//所有类默认继承Object类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Override 表示方法重写</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="comment">//--&gt; 测试名字不同产生的效果</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//方法过时了, 不建议使用 , 可能存在问题 , 并不是不能使用!</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;测试 @Deprecated&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@SuppressWarnings 抑制警告 , 可以传参数</span></span><br><span class="line">    <span class="comment">//--&gt; 查看JDK帮助文档</span></span><br><span class="line">    <span class="comment">//查看源码:发现 参数类型 和 参数名称 , 并不是方法!</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sw</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><strong>元注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ol><li><p>使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口<br>@ interface用来声明一个注解 , 格式 : public @ interface 注解名 { 定义内容 }</p></li><li><p>其中的每一个方法实际上是声明了一个配置参数.<br>方法的名称就是参数的名称.</p></li><li><p>返回值类型就是参数的类型 ( 返回值只能是基本类型,Class , String , enum ).<br>可以通过default来声明参数的默认值</p></li><li><p>如果只有一个参数成员 , 一般参数名为value</p></li><li><p>注解元素必须要有值 , 我们定义注解元素时 , 经常使用空字符串,0作为默认值 .</p></li></ol><p><strong>注解参数的可支持数据类型：</strong><br>1.所有基本数据类型（int,float,boolean,byte,double,char,long,short)<br>2.String类型<br>3.Class类型<br>4.enum类型<br>5.Annotation类型<br>6.以上所有类型的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水果名称注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peida</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitName &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水果颜色注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peida</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitColor &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 颜色枚举</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> peida</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span>&#123; BULE,RED,GREEN&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 颜色属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Color <span class="title">fruitColor</span><span class="params">()</span> <span class="keyword">default</span> Color.GREEN</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> annotation.FruitColor.Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FruitName(&quot;Apple&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String appleName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@FruitColor(fruitColor=Color.RED)</span></span><br><span class="line">    <span class="keyword">private</span> String appleColor;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleColor</span><span class="params">(String appleColor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appleColor = appleColor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppleColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appleColor;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppleName</span><span class="params">(String appleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appleName = appleName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> appleName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;水果的名字是：苹果&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置默认值</span></span><br><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 水果供应者注解</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> peida</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FruitProvider &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供应商编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供应商名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供应商地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">address</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14-反射"><a href="#14-反射" class="headerlink" title="14.反射"></a>14.反射</h1><h2 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h2><p><img src="/images/img/blog/image-20210809170425919.png" alt="image-20210809170425919"></p><p>Java的反射机制的实现要借助于4个类：class，Constructor，Field，Method;<br>其中class代表的时类对 象，Constructor－类的构造器对象，Field－类的属性对象，Method－类的方法对象。通过这四个对象我们可以粗略的看到一个类的各个组 成部分。</p><p><strong>获取类的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用运行时类本身的.class属性</span></span><br><span class="line">Class clazz = String.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过运行时类的对象获取</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">Class clazz = p.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Class的静态方法获取:体现反射的动态性</span></span><br><span class="line">String className = “java.util.commons”;</span><br><span class="line"></span><br><span class="line">Class clazz = Class.forName(className);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过类的加载器</span></span><br><span class="line">String className = “java.util.commons”;</span><br><span class="line"></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">Class clazz = classLoader.loadClass(className);</span><br></pre></td></tr></table></figure><p><strong>得到构造器的方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Constructor <span class="title">getConstructor</span><span class="params">(Class[] params)</span> -- 获得使用特殊的参数类型的公共构造函数， </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Constructor[] <span class="title">getConstructors</span><span class="params">()</span> -- 获得类的所有公共构造函数 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class[] params)</span> -- 获得使用特定参数类型的构造函数<span class="params">(与接入级别无关)</span> </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Constructor[] <span class="title">getDeclaredConstructors</span><span class="params">()</span> -- 获得类的所有构造函数<span class="params">(与接入级别无关)</span></span></span><br></pre></td></tr></table></figure><p><strong>获取字段</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span> -- 获得命名的公共字段 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Field[] <span class="title">getFields</span><span class="params">()</span> -- 获得类的所有公共字段 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span> -- 获得类声明的命名的字段 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Field[] <span class="title">getDeclaredFields</span><span class="params">()</span> -- 获得类声明的所有字段</span></span><br></pre></td></tr></table></figure><p><strong>获取方法的信息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, Class[] params)</span> -- 使用特定的参数类型，获得命名的公共方法 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Method[] <span class="title">getMethods</span><span class="params">()</span> -- 获得类的所有公共方法 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, Class[] params)</span> -- 使用特写的参数类型，获得类声明的命名的方法 </span></span><br><span class="line"><span class="function"> </span></span><br><span class="line"><span class="function">Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span> -- 获得类声明的所有方法</span></span><br></pre></td></tr></table></figure><h2 id="通过-Class-类获取成员变量、成员方法、接口、超类、构造方法等"><a href="#通过-Class-类获取成员变量、成员方法、接口、超类、构造方法等" class="headerlink" title="通过 Class 类获取成员变量、成员方法、接口、超类、构造方法等"></a>通过 Class 类获取成员变量、成员方法、接口、超类、构造方法等</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.reflex;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有属性</span></span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="comment">//公有属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private say()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//公有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public work()...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得类完整的名字</span></span><br><span class="line">String className = c2.getName();</span><br><span class="line">System.out.println(className);<span class="comment">//输出com.ys.reflex.Person</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的public类型的属性。</span></span><br><span class="line">Field[] fields = c2.getFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : fields)&#123;</span><br><span class="line">   System.out.println(field.getName());<span class="comment">//age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的所有属性。包括私有的</span></span><br><span class="line">Field [] allFields = c2.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span>(Field field : allFields)&#123;</span><br><span class="line">    System.out.println(field.getName());<span class="comment">//name    age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的public类型的方法。这里包括 Object 类的一些方法</span></span><br><span class="line">Method [] methods = c2.getMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : methods)&#123;</span><br><span class="line">    System.out.println(method.getName());<span class="comment">//work waid equls toString hashCode等</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得类的所有方法。</span></span><br><span class="line">Method [] allMethods = c2.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span>(Method method : allMethods)&#123;</span><br><span class="line">    System.out.println(method.getName());<span class="comment">//work say</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得指定的属性</span></span><br><span class="line">Field f1 = c2.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">System.out.println(f1);</span><br><span class="line"><span class="comment">//获得指定的私有属性</span></span><br><span class="line">Field f2 = c2.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//启用和禁用访问安全检查的开关，值为 true，则表示反射的对象在使用时应该取消 java 语言的访问检查；反之不取消</span></span><br><span class="line">f2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(f2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建这个类的一个对象</span></span><br><span class="line">Object p2 =  c2.newInstance();</span><br><span class="line"><span class="comment">//将 p2 对象的  f2 属性赋值为 Bob，f2 属性即为 私有属性 name</span></span><br><span class="line">f2.set(p2,<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"><span class="comment">//使用反射机制可以打破封装性，导致了java对象的属性不安全。</span></span><br><span class="line">System.out.println(f2.get(p2)); <span class="comment">//Bob</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取构造方法</span></span><br><span class="line">Constructor [] constructors = c2.getConstructors();</span><br><span class="line"><span class="keyword">for</span>(Constructor constructor : constructors)&#123;</span><br><span class="line">    System.out.println(constructor.toString());<span class="comment">//public com.ys.reflex.Person()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="反射方法执行"><a href="#反射方法执行" class="headerlink" title="反射方法执行"></a>反射方法执行</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//正常的调用</span></span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        apple.setPrice(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple Price:&quot;</span> + apple.getPrice());</span><br><span class="line">        <span class="comment">//使用反射调用</span></span><br><span class="line">        Class clz = Class.forName(<span class="string">&quot;com.wyl.api.Apple&quot;</span>);</span><br><span class="line">        Method setPriceMethod = clz.getMethod(<span class="string">&quot;setPrice&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        Constructor appleConstructor = clz.getConstructor();</span><br><span class="line">        Object appleObj = appleConstructor.newInstance();</span><br><span class="line">        setPriceMethod.invoke(appleObj, <span class="number">14</span>);</span><br><span class="line">        Method getPriceMethod = clz.getMethod(<span class="string">&quot;getPrice&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple Price:&quot;</span> + getPriceMethod.invoke(appleObj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis快速入门</title>
      <link href="2021/08/11/java/firststage/MyBatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>2021/08/11/java/firststage/MyBatis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis"><a href="#1-Mybatis" class="headerlink" title="1.Mybatis"></a>1.Mybatis</h1><p>MyBatis 原本是apache的一个开源项目iBatis，2010年这个项目由Apache Software Foundation迁移到了Google Code，并且改名为MyBatis,2013年11月迁移到GitHub。它是一款优秀的<strong>持久层框架</strong>，它支持自定义 SQL、存储过程以及高级映射（ORM），支持XML或者注解来配置和映射原生类型、接口和java的POJO（Plain Old Java Objects，普通老式的Java对象）数据库中的记录。。</p><h1 id="2-下载MyBatis"><a href="#2-下载MyBatis" class="headerlink" title="2.下载MyBatis"></a>2.下载MyBatis</h1><h2 id="2-1-github"><a href="#2-1-github" class="headerlink" title="2.1.github"></a>2.1.github</h2><p><a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p><p><img src="/images/img/blog/image-20210816153745328.png" alt="image-20210816153745328"></p><h2 id="2-2Maven仓库"><a href="#2-2Maven仓库" class="headerlink" title="2.2Maven仓库"></a>2.2Maven仓库</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-入门"><a href="#3-入门" class="headerlink" title="3.入门"></a>3.入门</h1><h2 id="3-1驱动与依赖"><a href="#3-1驱动与依赖" class="headerlink" title="3.1驱动与依赖"></a>3.1驱动与依赖</h2><p><strong>采用maven<a href="https://search.maven.org/">https://search.maven.org/</a> 查询相关的驱动。</strong></p><p><img src="/images/img/blog/image-20210816171241868.png" alt="image-20210816171241868"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dependency&gt;</span></span><br><span class="line"><span class="comment">      &lt;groupId&gt;org.wyl&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">      &lt;artifactId&gt;[the artifact id of the block to be mounted]&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 整合log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 测试junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右击pom.xml-&gt;meave 重新加载项目。包下载完即可。</p><p><strong>将 mybatis-x.x.x.jar 文件置于 classpath 中即可。</strong></p><h2 id="3-2-MyBatis的功能架构"><a href="#3-2-MyBatis的功能架构" class="headerlink" title="3.2.MyBatis的功能架构"></a>3.2.MyBatis的功能架构</h2><h3 id="3-2-1-架构"><a href="#3-2-1-架构" class="headerlink" title="3.2.1.架构"></a>3.2.1.架构</h3><p><img src="/images/img/blog/1089532-20190628173640479-229077626.png" alt="img"></p><p><strong>API接口层：</strong>提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。<br><strong>数据处理层：</strong>负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</p><ul><li>参数映射（参数解析和参数绑定）：获取并解析映射文件中的 Statement标签及其属性（parameterType）。也就是解析SQL语句并为 SQL语句准备需要进行绑定的参数</li><li>SQL解析：对 Statement【 **<code>&lt;select&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;delete&gt;</code>、<code>&lt;insert&gt;</code>**】标签中的内容进行解析、拼接、封装，最后得到一个完整的带有占位符的 SQL语句。也就是 JDBC中的准备 SQL语句的过程</li><li>结果映射（结果集解析和结果集处理）：获取配置文件中的结果集类型，并进行类型转换，将ResultSet进行结果映射。也就是 JDBC中处理结果集的步骤。</li></ul><p><strong>基础支撑层：</strong>负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</p><ul><li><p>管理 Mybatis与数据库的连接方式</p></li><li><p>管理 Mybatis的事务</p></li><li><p>加载 配置文件</p></li><li><p>Mybatis 查询缓存</p><h3 id="3-2-2-全局配置文件-mybatis-config"><a href="#3-2-2-全局配置文件-mybatis-config" class="headerlink" title="3.2.2.全局配置文件 mybatis-config"></a>3.2.2.全局配置文件 mybatis-config</h3></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration标签 =&gt; 声明MyBatis核心配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environments标签 =&gt; 设置MyBatis选用的环境信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- transactionManager标签 =&gt; 事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- dataSource标签 =&gt; 配置数据源属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将mapper映射文件注册到全局配置文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/WylMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- configuration标签 =&gt; 声明MyBatis核心配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environments标签 =&gt; 设置MyBatis选用的环境信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- transactionManager标签 =&gt; 事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- dataSource标签 =&gt; 配置数据源属性 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/wyl?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>serverTimezone=CST&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nps&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123.nps@zst&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-SqlSessionFactory-会话工厂"><a href="#3-2-3-SqlSessionFactory-会话工厂" class="headerlink" title="3.2.3.SqlSessionFactory 会话工厂"></a>3.2.3.SqlSessionFactory 会话工厂</h3><ul><li><p>通过Mybatis的配置信息，使用 <code>SqlSessionFactoryBuilder</code>构建器，来构建会话工厂对象</p></li><li><p>SqlSessionFactory 创建了 Configuration对象，使用 Configuration对象来构建SqlSession会话工厂</p></li><li><p>SqlSessionFactoryBuilder构建器使用了 Builder构建者设计模式</p></li><li><p>SqlSessionFactory 会话工厂，使用了工厂设计模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 定义XML核心配置文件路径信息</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            <span class="comment">// 读取XML核心配置文件路径信息</span></span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="comment">// 获得实例化SQLSessionFactory</span></span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用SqlSessionFactory.openSession()方法，返回SqlSession对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-SqlSession接口方法"><a href="#3-2-4-SqlSession接口方法" class="headerlink" title="3.2.4.SqlSession接口方法"></a>3.2.4.SqlSession接口方法</h3></li></ul><p>程序通过SqlSession来操作数据库</p><ul><li>SqlSession对外提供了一整套的增删改查的api，通过api来操作数据库</li><li>SqlSession还能够获取动态的Mapper接口</li><li>SqlSession的作用域是方法级别的，也就是从创建到销毁必须保证在方法内完成，注意一定要在方法内部销毁sqlSession，千万不要忘记</li><li>sqlSession在使用完后一定要及时关闭，尤其是在Service层，会在一个方法中同时使用多个sqlSession，每个sqlSession在用完后最好在下一行代码就关闭，避免影响其他sqlSession。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从 SqlSessionFactory 中获取 SqlSession</span></span><br><span class="line">SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">List&lt;Users&gt; usersInfo = mapper.getUsersInfo();</span><br></pre></td></tr></table></figure><p>也可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  User user = (User) session.selectOne(<span class="string">&quot;org.mybatis.example.WylMapper.getUsersById&quot;</span>,<span class="number">12</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-pojo层"><a href="#3-2-5-pojo层" class="headerlink" title="3.2.5.pojo层"></a>3.2.5.pojo层</h3><p><strong>对应的数据库表的实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.mybatis.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/8/16</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Users</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Users</span><span class="params">(<span class="keyword">int</span> id, String username, String password, String email, <span class="keyword">int</span> gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Users&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">int</span> gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>快速生成构造函数get set 等的方法，空白处右击生成即可</p><p><img src="/images/img/blog/image-20210823153814340.png" alt="image-20210823153814340"></p><h3 id="3-2-6-dao层"><a href="#3-2-6-dao层" class="headerlink" title="3.2.6. dao层"></a>3.2.6. dao层</h3><p><strong>与数据库交互相关代码，对应Mybatis的mapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.mybatis.dao;</span><br><span class="line"><span class="keyword">import</span> com.wyl.mybatis.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @创建人 王延领</span></span><br><span class="line"><span class="comment"> * @创建时间 2021/8/18</span></span><br><span class="line"><span class="comment"> * 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 【select】所有用户信息</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">getUsersInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【select】指定用户信息</span></span><br><span class="line">    <span class="function">Users <span class="title">getUserInfoById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【update】指定用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUseInfoById</span><span class="params">(Users user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【insert】指定用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(Users user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【delete】指定用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【insert】 批量用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertManyUseList</span><span class="params">(List&lt;Users&gt; users)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 【select】 模糊查询</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">getUsersInfoByPhantomSelect</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-7-mapper"><a href="#3-2-7-mapper" class="headerlink" title="3.2.7.mapper"></a>3.2.7.mapper</h3><p><img src="/images/img/blog/image-20210823155011994.png" alt="image-20210823155011994"></p><p>userMapper.xml配置对应的数据库操作映射，在mybatis-config进行注册。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如图所示配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/usersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mapper如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapper标签： 【namespace】： 指定dao层，绑定Dao --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wyl.mybatis.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- select sql: 绑定getUsersInfo方法，返回所有用户信息【id】： 绑定Dao中的方法名</span></span><br><span class="line"><span class="comment">【resultType】： 指定对应【类的形式】返回结果集的类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wyl.mybatis.pojo.Users&quot;</span>&gt;</span></span><br><span class="line">        select * from users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsersInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 调用MyBatisUtils.getSqlSession()方法，获取SqlSession对象</span></span><br><span class="line">       SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">       <span class="comment">// 调用获取到的SQLSession对象中的getMapper对象</span></span><br><span class="line">       <span class="comment">// 反射Dao接口，动态代理Dao接口中的方法，并将这些方法存在对象【mapper】中</span></span><br><span class="line">       UserDao mapper = sqlSession.getMapper(UserDao.class);</span><br><span class="line">       <span class="comment">// 调用mapper中对应方法，并设置对应的对象来接收其返回结果</span></span><br><span class="line">       <span class="comment">// 以下为测试方法getUsersInfo() =&gt; 获取所有Users表中信息，并用对应类接收</span></span><br><span class="line">       List&lt;Users&gt; usersInfo = mapper.getUsersInfo();</span><br><span class="line">       <span class="comment">// for循环遍历输出List集合</span></span><br><span class="line">       <span class="keyword">for</span> (Users users : usersInfo) &#123;</span><br><span class="line">           System.out.println(users);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 关闭sqlSession</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-作用域与生命周期"><a href="#3-3-作用域与生命周期" class="headerlink" title="3.3.作用域与生命周期"></a>3.3.作用域与生命周期</h2><p><img src="/images/img/blog/image-20210823173846319.png" alt="image-20210823173846319"></p><h3 id="3-3-1-SqlSessionFactoryBuilder"><a href="#3-3-1-SqlSessionFactoryBuilder" class="headerlink" title="3.3.1.SqlSessionFactoryBuilder"></a>3.3.1.SqlSessionFactoryBuilder</h3><blockquote><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是<strong>方法作用域</strong>（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p></blockquote><h3 id="3-3-2-SqlSessionFactory"><a href="#3-3-2-SqlSessionFactory" class="headerlink" title="3.3.2.SqlSessionFactory"></a>3.3.2.SqlSessionFactory</h3><blockquote><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。类似于数据库连接池。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是<strong>应用作用域</strong>。 有很多方法可以做到，最简单的就是使用<strong>单例模式</strong>或者<strong>静态单例模式</strong>。</p></blockquote><h3 id="3-3-3-SqlSession"><a href="#3-3-3-SqlSession" class="headerlink" title="3.3.3.SqlSession"></a>3.3.3.SqlSession</h3><blockquote><p><strong>每个线程</strong>都应该有它自己的 SqlSession 实例。SqlSession 的实例<strong>不是线程安全</strong>的，因此是<strong>不能被共享</strong>的，所以它的最佳的作用域是<strong>请求</strong>或<strong>方法作用域</strong>。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用<strong>一种 Web 框架</strong>，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，<strong>每次收到 HTTP 请求</strong>，就可以<strong>打开一个 SqlSession</strong>，<strong>返回</strong>一个响应后，就<strong>关闭它</strong>。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作<strong>放到 finally 块</strong>中。</p></blockquote><h3 id="3-3-4-Mapper"><a href="#3-3-4-Mapper" class="headerlink" title="3.3.4.Mapper"></a>3.3.4.Mapper</h3><blockquote><p>是一种创建的用于<strong>绑定映射语句的接口</strong>，Mapper 接口的实例是用 <strong>SqlSession 来获得的</strong>。同样，从技术上来说，最广泛的 Mapper 实例作用域像 SqlSession 一样，使用<strong>请求作用域</strong>。确切地说，在方法被调用的时候调用 Mapper 实例，然后<strong>使用后，就自动销毁掉</strong>。<strong>不需要</strong>使用明确的<strong>注销</strong>。当一个请求执行正确无误的时候，像 SqlSession 一样，你可以轻而易举地操控这一切。保持简单性，保持 Mapper 在方法体作用域内。</p></blockquote><h1 id="4-xml-配置解析"><a href="#4-xml-配置解析" class="headerlink" title="4.xml 配置解析"></a>4.xml 配置解析</h1><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置文件的根元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 属性：定义配置外在化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置：定义mybatis的一些全局性设置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 具体的参数名和参数值 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型名称：为一些类定义别名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 类型处理器：定义Java类型与数据库中的数据类型之间的转换关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对象工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插件：mybatis的插件,插件可以修改mybatis的内部运行规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 环境：配置mybatis的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 环境变量：可以配置多个环境变量，比如使用多数据源时，就需要配置多个环境变量 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 数据源 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数据库厂商标识 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 映射器：指定映射文件或者映射类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210823161021441.png" alt="image-20210823161021441"></p><p>​                                                                                                               图片来自官网</p><h2 id="4-1-属性（properties）"><a href="#4-1-属性（properties）" class="headerlink" title="4.1.属性（properties）"></a>4.1.属性（properties）</h2><p>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置.</p><p>比如第三章的配置文件我们可以如下写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- properties标签 =&gt; 读取外部properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;dataSource.properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子中的username和password将会由properties元素中设置的相应值来替换。driver和url属性将会由dataSource.properties文件中对应的值来替换。这样就为配置提供了诸多灵活选择。</p><p><img src="/images/img/blog/image-20210823162924181.png" alt="image-20210823162924181"></p><p>属性也可以被传递到SqlSessionBuilder.build()方法中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, props);</span><br><span class="line"><span class="comment">// ... or ...</span></span><br><span class="line">SqlSessionFactory factory = sqlSessionFactoryBuilder.build(reader, environment, props);</span><br></pre></td></tr></table></figure><p>但是，这也就涉及到了优先级的问题，如果属性不只在一个地方配置，那么mybatis将会按照下面的顺序来加载：<br>   1.在properties元素体内指定的属性首先被读取。</p><ol start="2"><li>然后根据properties元素中的resource属性读取类路径下属性文件或根据url属性指定的路径读取属性文件，并覆盖已读取的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。</li></ol><p><strong>通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的则是 properties 元素中指定的属性</strong></p><p>从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username:ut_user&#125;&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 如果属性 &#x27;username&#x27; 没有被配置，&#x27;username&#x27; 属性的值将为 &#x27;ut_user&#x27; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个特性默认是关闭的。要启用这个特性，需要添加一个特定的属性来开启这个特性。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span> <span class="comment">&lt;!-- 启用默认值特性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-设置（settings）"><a href="#4-2-设置（settings）" class="headerlink" title="4.2.设置（settings）"></a>4.2.设置（settings）</h2><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;multipleResultSetsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useColumnLabel&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;useGeneratedKeys&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PARTIAL&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingUnknownColumnBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;WARNING&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultExecutorType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SIMPLE&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultStatementTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;25&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultFetchSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;safeRowBoundsEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;localCacheScope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SESSION&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;jdbcTypeForNull&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OTHER&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;equals,clone,hashCode,toString&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">cacheEnabled</td><td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">lazyLoadingEnabled</td><td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">aggressiveLazyLoading</td><td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td align="left">true | false</td><td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td align="left">multipleResultSetsEnabled</td><td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useColumnLabel</td><td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useGeneratedKeys</td><td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">autoMappingBehavior</td><td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td align="left">NONE, PARTIAL, FULL</td><td align="left">PARTIAL</td></tr><tr><td align="left">autoMappingUnknownColumnBehavior</td><td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td align="left">NONE, WARNING, FAILING</td><td align="left">NONE</td></tr><tr><td align="left">defaultExecutorType</td><td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td align="left">SIMPLE REUSE BATCH</td><td align="left">SIMPLE</td></tr><tr><td align="left">defaultStatementTimeout</td><td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultFetchSize</td><td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultResultSetType</td><td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td><td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td><td align="left">未设置 (null)</td></tr><tr><td align="left">safeRowBoundsEnabled</td><td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">safeResultHandlerEnabled</td><td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">True</td></tr><tr><td align="left">mapUnderscoreToCamelCase</td><td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">localCacheScope</td><td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td align="left">SESSION | STATEMENT</td><td align="left">SESSION</td></tr><tr><td align="left">jdbcTypeForNull</td><td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td align="left">OTHER</td></tr><tr><td align="left">lazyLoadTriggerMethods</td><td align="left">指定对象的哪些方法触发一次延迟加载。</td><td align="left">用逗号分隔的方法列表。</td><td align="left">equals,clone,hashCode,toString</td></tr><tr><td align="left">defaultScriptingLanguage</td><td align="left">指定动态 SQL 生成使用的默认脚本语言。</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td align="left">defaultEnumTypeHandler</td><td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td align="left">callSettersOnNulls</td><td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">returnInstanceForEmptyRow</td><td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">logPrefix</td><td align="left">指定 MyBatis 增加到日志名称的前缀。</td><td align="left">任何字符串</td><td align="left">未设置</td></tr><tr><td align="left">logImpl</td><td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr><tr><td align="left">proxyFactory</td><td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td align="left">CGLIB | JAVASSIST</td><td align="left">JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td align="left">vfsImpl</td><td align="left">指定 VFS 的实现</td><td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td align="left">未设置</td></tr><tr><td align="left">useActualParamName</td><td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">configurationFactory</td><td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td align="left">一个类型别名或完全限定类名。</td><td align="left">未设置</td></tr><tr><td align="left">shrinkWhitespacesInSql</td><td align="left">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">defaultSqlProviderType</td><td align="left">Specifies an sql provider class that holds provider method (Since 3.5.6). This class apply to the <code>type</code>(or <code>value</code>) attribute on sql provider annotation(e.g. <code>@SelectProvider</code>), when these attribute was omitted.</td><td align="left">A type alias or fully qualified class name</td><td align="left">Not set</td></tr></tbody></table><h2 id="4-3-类型别名（typeAliases）"><a href="#4-3-类型别名（typeAliases）" class="headerlink" title="4.3.类型别名（typeAliases）"></a>4.3.类型别名（typeAliases）</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wyl.mybatis.pojo.Users&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    当这样配置时，<code>user</code> 可以用在任何使用 <code>com.wyl.mybatis.pojo.Users</code> 的地方。</p><p>在使用注解的时候也可以指定一个包名，再使用其类的时候直接小写类名即可。.比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--除非使用注解，否则不支持自定义别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wyl.mybatis.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-4-映射器（mappers）"><a href="#4-4-映射器（mappers）" class="headerlink" title="4.4.映射器（mappers）"></a>4.4.映射器（mappers）</h2><p>定义SQL映射语句，指定MyBatis寻找SQL语句。</p><ul><li><ol><li><p>使用相对于类路径的资源引用 【推荐】：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/userMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用映射器接口实现类的完全限定类名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.wyl.mybatis.dao.UsersDao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将包内的映射器接口实现全部注册为映射器(注意相对位置)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wyl.mybatis.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用完全限定资源定位符（URL） 【不推荐使用】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///var/mappers/usersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-5-环境配置（environments）"><a href="#4-5-环境配置（environments）" class="headerlink" title="4.5.环境配置（environments）"></a>4.5.环境配置（environments）</h2></li></ol></li></ul><p>MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。还有许多类似的使用场景。</p><p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p><p>所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql 配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;oracle&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--oracle 配置--&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-事务管理器（transactionManager）"><a href="#4-6-事务管理器（transactionManager）" class="headerlink" title="4.6.事务管理器（transactionManager）"></a>4.6.事务管理器（transactionManager）</h2><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><p>在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：</p><ul><li><p>JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;closeConnection&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>提示</strong> 如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。</p><p>这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以用 TransactionFactory 接口实现类的全限定名或类型别名代替它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionFactory</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties props)</span> </span>&#123; <span class="comment">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line">  <span class="function">Transaction <span class="title">newTransaction</span><span class="params">(DataSource dataSource, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在事务管理器实例化后，所有在 XML 中配置的属性将会被传递给 setProperties() 方法。你的实现还需要创建一个 Transaction 接口的实现类，这个接口也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">  <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function">Integer <span class="title">getTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这两个接口，你可以完全自定义 MyBatis 对事务的处理。</p><h2 id="4-7-数据源（dataSource）"><a href="#4-7-数据源（dataSource）" class="headerlink" title="4.7.数据源（dataSource）"></a>4.7.数据源（dataSource）</h2><ul><li><p>【官方声明】：dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p></li><li><p>【官方声明】：大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。</p></li><li><p>【官方声明】：有三种内建的数据源类型（也就是 type=”[<strong>UNPOOLED|POOLED|JNDI</strong>]”）</p><ul><li><strong>UNPOOLED</strong>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。 性能表现则依赖于使用的数据库，对某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。</li><li><strong>POOLED</strong>– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这种处理方式很流行，能使并发 Web 应用快速响应请求。</li><li><strong>JNDI</strong> – 这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用。</li></ul></li><li><p>MyBatis默认数据源类型 =&gt; 【POOLED】</p></li><li><p>数据源类型： dbcp c3p0 druid hikari</p></li></ul><h2 id="4-8-对象工厂（objectFactory）"><a href="#4-8-对象工厂（objectFactory）" class="headerlink" title="4.8.对象工厂（objectFactory）"></a>4.8.对象工厂（objectFactory）</h2><blockquote><p>MyBatis 每次创建结果对象的新实例时，它都会使用一个对象工厂（ObjectFactory）实例来完成。 默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认构造方法，要么在参数映射存在的时候通过参数构造方法来实例化。 如果想覆盖对象工厂的默认行为，则可以通过创建自己的对象工厂来实现.<br>自定义对象工厂<br>ObjectFactory是个接口类，其默认实现类是DefaultObjectFactory。在 MyBatis 中，默认的DefaultObjectFactory要做的就是实例化查询结果对应的目标类，有两种方式可以将查询结果的值映射到对应的目标类：一种是通过目标类的默认构造方法，另外一种就是通过目标类的有参构造方法。</p></blockquote><h3 id="4-8-1-自定义对象工厂"><a href="#4-8-1-自定义对象工厂" class="headerlink" title="4.8.1.自定义对象工厂"></a>4.8.1.自定义对象工厂</h3><p>MyBatis允许注册自定义的ObjectFactory，只需要实现接口 org.apache.ibatis.reflection.factory.ObjectFactory即可。但是在大部分的情况下，我们都不需要自定义ObjectFactory对象工厂，只需要继承系统已经实现好的 DefaultObjectFactory ，通过一定的改写来完成我们所需要的工作。</p><p>有时候在新建一个新对象（构造方法或者有参构造方法），在得到对象之前需要处理一些逻辑，或者在执行该类的有参构造方法时，在传入参数之前，要对参数进行一些处理，这时就可以创建自己的 ObjectFactory 来加载该类型的对象。如下所示，增加了日志打印功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObjectFactory</span> <span class="keyword">extends</span> <span class="title">DefaultObjectFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    Logger log = Logger.getLogger(MyObjectFactory.class);</span><br><span class="line">    <span class="keyword">private</span> Object temp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setProperties(properties);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T result = <span class="keyword">super</span>.create(type);</span><br><span class="line">        log.info(<span class="string">&quot;创建对象：&quot;</span> + result.toString());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">create</span><span class="params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        T result = <span class="keyword">super</span>.create(type, constructorArgTypes, constructorArgs);</span><br><span class="line">        log.info(<span class="string">&quot;创建对象：&quot;</span> + result.toString());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">isCollection</span><span class="params">(Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.isCollection(type);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后，需要在 SqlMapConfig.xml 全局配置文件中配置该自定义对象工厂即可，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">objectFactory</span> <span class="attr">type</span>=<span class="string">&quot;cn.mybatis.mydemo.MyObjectFactory&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;key&quot;</span> <span class="attr">value</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">objectFactory</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样 MyBatis 就会采用配置的 MyObjectFactory 来生成结果集对象，采用下面的代码进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisDemo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Logger log = Logger.getLogger(MyBatisDemo.class);</span><br><span class="line">        InputStream config = Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(config);</span><br><span class="line">        SqlSession session = factory .openSession();</span><br><span class="line">        UserMapper userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">        User user = userMapper.getUser(<span class="number">1L</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-9-插件"><a href="#4-9-插件" class="headerlink" title="4.9.插件"></a>4.9.插件</h2><h3 id="4-9-1-插件的分类"><a href="#4-9-1-插件的分类" class="headerlink" title="4.9.1.插件的分类"></a>4.9.1.插件的分类</h3><p>第一类：插件是对系统的一种补充，例如在分布式系统中，可以使用插件的方式，实现内存插件、磁盘插件、线性网络插件、Paxos插件等。此类插件等同于组件。</p><p>第二类：插件是对系统默认功能的自定义修改，例如mybatis里面自定义插件，它实现的拦截器的功能。此类插件等同于拦截器。</p><h3 id="4-9-2-MyBatis拦截器插件"><a href="#4-9-2-MyBatis拦截器插件" class="headerlink" title="4.9.2.MyBatis拦截器插件"></a>4.9.2.MyBatis拦截器插件</h3><p>MyBatis允许用户在已映射语句执行过程中的某一点进行拦截调用。MyBatis使用插件来拦截的方法调用，故此MyBatis插件通常称为：Mybatis拦截器。默认情况下，MyBatis允许使用插件来拦截的对象包括下面的四大金刚：</p><ul><li>Executor：MyBatis的执行器，用于执行增删改查操作</li><li>ParameterHandler：处理SQL的参数对象</li><li>ResultSetHandler：处理SQL的返回结果集</li><li>StatementHandler：数据库的处理对象，用于执行SQL语句</li></ul><p>在Java里面，我们想拦截某个对象，只需要把这个对象包装一下，用代码行话来说，就是重新生成一个代理对象。</p><h3 id="4-9-2-注解实例"><a href="#4-9-2-注解实例" class="headerlink" title="4.9.2.注解实例"></a>4.9.2.注解实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts(&#123;</span></span><br><span class="line"><span class="meta">    @Signature(</span></span><br><span class="line"><span class="meta">            type=Executor.class,</span></span><br><span class="line"><span class="meta">            method=&quot;query&quot;,</span></span><br><span class="line"><span class="meta">            args=&#123;MappedStatement.class,Object.class,RowBounds.class,ResultHandler.class&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties arg0)</span> </span>&#123;&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>@Intercepts 拦截器注解，此注解声明此类是一个插件类。其中可以声明多个 @Signature 签名信息注解，type 为拦截的方法所属的接口类型，method 为拦截的方法名称，args 是参数信息。</p><p>intercept 方法是一个对目标方法进行拦截的抽象方法，而 plugin 方法的作用是将拦截器插入目标对象。</p><p>setProperties 方法的作用是将全局配置文件中的参数注入插件类中。</p><p>MyBatis 全局配置文件中配置该插件即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.wyl.mybatis.unit.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-10-typeHandlers（类型处理器）"><a href="#4-10-typeHandlers（类型处理器）" class="headerlink" title="4.10.typeHandlers（类型处理器）"></a>4.10.typeHandlers（类型处理器）</h2><blockquote><p>在JDBC中，需要在PreparedStatement对象中设置那些已经预编译过的SQlL语句的参数。执行SQL后，会通过ResultSet对象获取得到数据库的数据，而这些在Mybatis是根据数据的类型通过typeHandler来实现的。</p></blockquote><p>在typeHandler中，分为jdbcType和javatype，其中jdbcType用于定义数据库类型，而javaType用于定义Java类型，那么typeHandler的作用就是承担jdbcTypr和javaType之间的相互转换。</p><p><img src="/images/img/blog/image-20210824103050041.png" alt="image-20210824103050041"></p><p>和别名一样，在 MyBatis 中存在系统定义 typeHandler 和自定义 typeHandler。MyBatis 会根据 javaType 和数据库的 jdbcType 来决定采用哪个 typeHandler 处理这些转换规则。系统提供的 typeHandler 能覆盖大部分场景的要求，但是有些情况下是不够的，比如我们有特殊的转换规则，枚举类就是这样。</p><h3 id="4-10-1-系统定义的typeHandler"><a href="#4-10-1-系统定义的typeHandler" class="headerlink" title="4.10.1.系统定义的typeHandler"></a>4.10.1.系统定义的typeHandler</h3><p><img src="/images/img/blog/image-20210824104446532.png" alt="image-20210824104446532"></p><p><img src="/images/img/blog/image-20210824104028080.png" alt="image-20210824104028080"></p><p>这些就是MyBatis 系统已经创建好的typeHandler。在大部分的情况下无须显式地声明jdbcType 和javaType ，或者用typeHandler 去指定对应的typeHandler 来实现数据类型转换，因为MyBatis 系统会自己探测。有时候需要修改一些转换规则，比如枚举类往往需要自己去编写规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 使用typeHandler通过PreparedStatement对象进行设置SQL参数的时候使用的具体方法。其中：ps是PreparedStatement对象；i是参数在SQL语句中的下标；jdbcType是数据库类型</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="comment">//JDBC结果集中获取数据进行转换，使用列名(columnName)或下标(columeIdex)获取数据库的数据</span></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">   <span class="comment">//存储过程专用</span></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-2-自定义TypeHandler"><a href="#4-10-2-自定义TypeHandler" class="headerlink" title="4.10.2.自定义TypeHandler"></a>4.10.2.自定义TypeHandler</h3><blockquote><p>从系统定义的typeHandler中可以知道，要实现typeHandler就需要去实现接口Typehandler，或者继承BaseTypeHandler(实际上，BaseTypehandler实现了typeHandler接口)</p></blockquote><p><strong>实现TypeHandler</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeHandler</span> <span class="keyword">implements</span> <span class="title">TypeHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"><span class="comment">//定义一个日志</span></span><br><span class="line">Logger log = Logger.getLogger(MyTypeHandler.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String result = rs.getString(columnName);</span><br><span class="line">log.info(<span class="string">&quot;读取string参数1【&quot;</span>+result+<span class="string">&quot;】&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIdex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String result = rs.getString(columnIdex);</span><br><span class="line">log.info(<span class="string">&quot;读取string参数2【&quot;</span>+result+<span class="string">&quot;】&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIdex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">String result = cs.getString(columnIdex);</span><br><span class="line">log.info(<span class="string">&quot;读取string参数3【&quot;</span>+result+<span class="string">&quot;】&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">log.info(<span class="string">&quot;设置string参数【&quot;</span>+parameter+<span class="string">&quot;】&quot;</span>);</span><br><span class="line">ps.setString(i, parameter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在代码中使用自定义typeHandler</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 类型转换器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeHandler</span> <span class="attr">handler</span>=<span class="string">&quot;com.wyl.mybatis.utils.MyTypeHandler&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;roleMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;VARCHAR&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;string&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;note&quot;</span> <span class="attr">column</span>=<span class="string">&quot;note&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;com.wyl.mybatis.utils.MyTypeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRole&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;roleMapper&quot;</span>&gt;</span></span><br><span class="line">    select id,role_name,note from t_role where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有时候配置的typeHandler太多，也可以使用包扫描的方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeHandlers</span>&gt;</span>      </span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wyl.mybatis.unit.typeHandler&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeHandlers</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span>   <span class="comment">// 表示把数据库中的varchar类型转成java的String类型时使用该转换器</span></span><br><span class="line"><span class="meta">@MappedTypes(String.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeHandler</span> <span class="keyword">implements</span> <span class="title">TypeHandler</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">     </span><br><span class="line">    Logger logger = Logger.getLogger(MyTypeHandler.class);</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String result = rs.getString(columnName);</span><br><span class="line">        logger.info(<span class="string">&quot;读取string参数1【&quot;</span> + result +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String result = rs.getString(columnIndex);</span><br><span class="line">        logger.info(<span class="string">&quot;读取string参数2【&quot;</span> + result +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String result = cs.getString(columnIndex);</span><br><span class="line">        logger.info(<span class="string">&quot;读取string参数3【&quot;</span> + result +<span class="string">&quot;】&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;设置string参数【&quot;</span> + parameter + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">        ps.setString(i, parameter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10-3-枚举TypeHandler"><a href="#4-10-3-枚举TypeHandler" class="headerlink" title="4.10.3.枚举TypeHandler"></a>4.10.3.枚举TypeHandler</h3><p>在绝大多数情况下，typeHandler 因为枚举而使用，MyBatis 已经定义了两个类作为枚举类型的支持，这两个类分别是：</p><ul><li><p>EnumOrdinalTypeHandler。使用整数下标作为参数传递的（枚举类型的默认转换类）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;passsword&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">    select id,user_name,password,sex,mobile,tel,email,note from myUser</span><br><span class="line">    where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>EnumTypeHandler。使用枚举字符串名称作为参数传递的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.mybatis.po.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;user_name&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;passsword&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;long&quot;</span>&gt;</span></span><br><span class="line">        select id,user_name,password,sex,mobile,tel,email,note from myUser</span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-10-4-BlobTypeHandler读取Blob字段"><a href="#4-10-4-BlobTypeHandler读取Blob字段" class="headerlink" title="4.10.4.BlobTypeHandler读取Blob字段"></a>4.10.4.BlobTypeHandler读取Blob字段</h3></li></ul><blockquote><p>MyBatis 对数据库的 Blob 字段也进行了支持，它提供了一个 BlobTypeHandler，为了应付更多的场景，它还提供了 ByteArrayTypeHandler，只是它不太常用.</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> file(</span><br><span class="line">    id <span class="type">int</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    content <span class="type">blob</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pojo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFile</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">byte</span>[] content;</span><br><span class="line">    <span class="comment">/** setter and getter **/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.ssm.chapter5.pojo.TestFile&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;content&quot;</span> <span class="attr">property</span>=<span class="string">&quot;content&quot;</span> <span class="attr">typeHandler</span>=<span class="string">&quot;org.apache.ibatis.type.BlobTypeHandler&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-11-数据库厂商标识（databaseIdProvider）"><a href="#4-11-数据库厂商标识（databaseIdProvider）" class="headerlink" title="4.11.数据库厂商标识（databaseIdProvider）"></a>4.11.数据库厂商标识（databaseIdProvider）</h2><blockquote><p> MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 <code>databaseId</code> 属性。 MyBatis 会加载带有匹配当前数据库 <code>databaseId</code> 属性和所有不带 <code>databaseId</code> 属性的语句。 如果同时找到带有 <code>databaseId</code> 和不带 <code>databaseId</code> 的相同语句，则后者会被舍弃。 为支持多厂商特性，只要像下面这样在 mybatis-config.xml 文件中加入 <code>databaseIdProvider</code> 即可：</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>databaseIdProvider 对应的 DB_VENDOR 实现会将 databaseId 设置为 <code>DatabaseMetaData#getDatabaseProductName()</code> 返回的字符串。 由于通常情况下这些字符串都非常长，而且相同产品的不同版本会返回不同的值，你可能想通过设置属性别名来使其变短：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">databaseIdProvider</span> <span class="attr">type</span>=<span class="string">&quot;DB_VENDOR&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;SQL Server&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlserver&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;DB2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;db2&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Oracle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oracle&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">databaseIdProvider</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在提供了属性别名时，databaseIdProvider 的 DB_VENDOR 实现会将 databaseId 设置为数据库产品名与属性中的名称第一个相匹配的值，如果没有匹配的属性，将会设置为 “null”。 在这个例子中，如果 <code>getDatabaseProductName()</code> 返回“Oracle (DataDirect)”，databaseId 将被设置为“oracle”。</p><p>你可以通过实现接口 <code>org.apache.ibatis.mapping.DatabaseIdProvider</code> 并在 mybatis-config.xml 中注册来构建自己的 DatabaseIdProvider：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DatabaseIdProvider</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties p)</span> </span>&#123; <span class="comment">// 从 3.5.2 开始，该方法为默认方法</span></span><br><span class="line">    <span class="comment">// 空实现</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">String <span class="title">getDatabaseId</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-映射器"><a href="#5-映射器" class="headerlink" title="5.映射器"></a>5.映射器</h1><h2 id="5-1-Select"><a href="#5-1-Select" class="headerlink" title="5.1.Select"></a>5.1.Select</h2><p><strong>编写接口dao</strong><br><code>User getUserById(int id);</code></p><p>编写对应的mapper中的sql语句，注意要写在对应的mapper下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id：对应的dao接口</span></span><br><span class="line"><span class="comment">resultType：sql语句执行的返回值</span></span><br><span class="line"><span class="comment">parameterType ： 参数类型</span></span><br><span class="line"><span class="comment">User:为别名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        select * from mybatis.user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserInfoById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 调用MyBatisUtils.getSqlSession()方法，获取SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用获取到的SQLSession对象中的getMapper对象</span></span><br><span class="line">        <span class="comment">// 反射Dao接口，动态代理Dao接口中的方法，并将这些方法存在对象【mapper】中</span></span><br><span class="line">        UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">        Users user = mapper.getUserInfoById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">// 关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查询所有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【select】所有用户信息</span></span><br><span class="line">   <span class="function">List&lt;Users&gt; <span class="title">getUsersInfo</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select sql: 绑定getUsersInfo方法，返回所有用户信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.camemax.com.camemax.pojo.Users&quot;</span>&gt;</span></span><br><span class="line">        select * from school.users</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsersInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 调用MyBatisUtils.getSqlSession()方法，获取SqlSession对象</span></span><br><span class="line">       SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 调用获取到的SQLSession对象中的getMapper对象</span></span><br><span class="line">       <span class="comment">// 反射Dao接口，动态代理Dao接口中的方法，并将这些方法存在对象【mapper】中</span></span><br><span class="line">       UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 调用mapper中对应方法，并设置对应的对象来接收其返回结果</span></span><br><span class="line">       <span class="comment">// 以下为测试方法getUsersInfo() =&gt; 获取所有Users表中信息，并用对应类接收</span></span><br><span class="line">       List&lt;Users&gt; usersInfo = mapper.getUsersInfo();</span><br><span class="line">       <span class="comment">// for循环遍历输出List集合</span></span><br><span class="line">       <span class="keyword">for</span> (Users users : usersInfo) &#123;</span><br><span class="line">           System.out.println(users);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 关闭sqlSession</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-insert"><a href="#5-2-insert" class="headerlink" title="5.2.insert"></a>5.2.insert</h2><p>插入单条细腻</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【insert】指定用户信息</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(Users user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- insert sql: 绑定insertUser方法，插入单个用户信息--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;user&quot;</span> &gt;</span></span><br><span class="line">       insert into users</span><br><span class="line">       values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">// 调用MyBatisUtils.getSqlSession()方法，获取SqlSession对象</span></span><br><span class="line">       SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">       <span class="comment">// 调用获取到的SQLSession对象中的getMapper对象</span></span><br><span class="line">       <span class="comment">// 反射Dao接口，动态代理Dao接口中的方法，并将这些方法存在对象【mapper】中</span></span><br><span class="line">       UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">       <span class="keyword">int</span> i = mapper.insertUser(</span><br><span class="line">               <span class="keyword">new</span> Users(<span class="number">2</span>, <span class="string">&quot;wyl&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;171@qq.com&quot;</span>, <span class="number">0</span>)         </span><br><span class="line">       );</span><br><span class="line">       <span class="comment">//提交事务</span></span><br><span class="line">       sqlSession.commit();</span><br><span class="line">       <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;Insert 成功!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 关闭sqlSession</span></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>插入多条数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【insert】 批量用户信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertManyUseList</span><span class="params">(List&lt;Users&gt; users)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- insert sql: 绑定insertManyUseMap,批量插入 --&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertManyUseList&quot;</span> &gt;</span><br><span class="line">        insert into users values</span><br><span class="line">        <span class="comment">/* foreach 标签：</span></span><br><span class="line"><span class="comment">            -【item】属性： 表示集合中每一个元素进行迭代时的别名</span></span><br><span class="line"><span class="comment">            - 【collection】属性： 参数类型是一个List的时候，collection属性值为list</span></span><br><span class="line"><span class="comment">            - 【separator】属性： 表示在每次进行迭代之间以什么符号作为分隔符。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        &lt;foreach  item=<span class="string">&quot;user&quot;</span> collection=<span class="string">&quot;list&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">            (#&#123;user.id&#125;,#&#123;user.username&#125;,#&#123;user.password&#125;,#&#123;user.email&#125;,#&#123;user.gender&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertManyUseList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       List&lt;Users&gt; users = <span class="keyword">new</span> ArrayList&lt;Users&gt;();</span><br><span class="line">       users.add(<span class="keyword">new</span> Users(<span class="number">2</span>, <span class="string">&quot;wyl&quot;</span>, <span class="string">&quot;123&quot;</span>, <span class="string">&quot;123@qq.com&quot;</span>, <span class="number">20</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> Users(<span class="number">3</span>, <span class="string">&quot;wjm&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;123456@qq.com&quot;</span>, <span class="number">30</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> Users(<span class="number">4</span>, <span class="string">&quot;王延领&quot;</span>, <span class="string">&quot;1123456&quot;</span>, <span class="string">&quot;wjm@qq.com&quot;</span>, <span class="number">41</span>));</span><br><span class="line">       users.add(<span class="keyword">new</span> Users(<span class="number">5</span>, <span class="string">&quot;王经墨&quot;</span>, <span class="string">&quot;223&quot;</span>, <span class="string">&quot;wjm@qq.com&quot;</span>, <span class="number">51</span>));</span><br><span class="line">       SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">       UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">       <span class="keyword">int</span> i = mapper.insertManyUseList(users);</span><br><span class="line">       <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )&#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;插入成功过!&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.commit();</span><br><span class="line"></span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-1-主键回填"><a href="#5-3-1-主键回填" class="headerlink" title="5.3.1.主键回填"></a>5.3.1.主键回填</h3><p>如果你的数据库支持自动生成主键的字段（比如 MySQL 和 SQL Server），那么你可以设置 useGeneratedKeys=”true”，然后再把 keyProperty 设置为目标属性就 OK 了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span>  <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">       insert into users</span><br><span class="line">       values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你的数据库还支持多行插入, 你也可以传入一个 <code>Author</code> 数组或集合，并返回自动生成的主键。</p><h3 id="5-3-2-自定义主键"><a href="#5-3-2-自定义主键" class="headerlink" title="5.3.2.自定义主键"></a>5.3.2.自定义主键</h3><p>首先会运行 selectKey 元素中的语句，并设置 Users的 id，然后才会调用插入语句。这样就实现了数据库自动生成主键类似的行为，同时保持了 Java 代码的简洁。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=<span class="string">&quot;insertUser&quot;</span> useGeneratedKeys=<span class="string">&quot;true&quot;</span>  keyProperty=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">&lt;selectKey keyProperty=<span class="string">&quot;id&quot;</span> resultType=<span class="string">&quot;int&quot;</span> order=<span class="string">&quot;BEFORE&quot;</span>&gt;</span><br><span class="line">    <span class="function">select <span class="title">if</span><span class="params">(max(id)</span></span>==<span class="keyword">null</span>,<span class="number">1</span>,max(id)+<span class="number">2</span>) from users</span><br><span class="line">  &lt;/selectKey&gt;</span><br><span class="line">        insert into users</span><br><span class="line">        values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br></pre></td></tr></table></figure><h2 id="5-3-update"><a href="#5-3-update" class="headerlink" title="5.3.update"></a>5.3.update</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【update】指定用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUseInfoById</span><span class="params">(Users user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- update sql: 绑定updateUser方法，更新指定用户信息 --&gt;</span><br><span class="line">   &lt;update id=<span class="string">&quot;updateUseInfoById&quot;</span> parameterType=<span class="string">&quot;users&quot;</span>&gt;</span><br><span class="line">       update users</span><br><span class="line">       set username = #&#123;username&#125;,</span><br><span class="line">           password = #&#123;password&#125;,</span><br><span class="line">           email = #&#123;email&#125;,</span><br><span class="line">           gender = #&#123;gender&#125;</span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   &lt;/update&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUseInfoById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession session = MyBatisUtils.getSqlSession();</span><br><span class="line">        UsersDao mapper = session.getMapper(UsersDao.class);</span><br><span class="line">        <span class="keyword">int</span> i = mapper.updateUseInfoById(<span class="keyword">new</span> Users(<span class="number">1</span>, <span class="string">&quot;王延领&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;171@qq.com&quot;</span>, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span> ( i &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            System.out.println(mapper.getUserInfoById(<span class="number">1</span>).getUsername() + <span class="string">&quot; 修改成了!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-4-delete"><a href="#5-4-delete" class="headerlink" title="5.4.delete"></a>5.4.delete</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【delete】指定用户信息</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- delete sql: 绑定deleteUserById方法，删除指定用户信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">       delete from users</span><br><span class="line">       where id = #&#123;id&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUserInfoById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">        UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">        String willDeleteUsername = mapper.getUserInfoById(<span class="number">2</span>).getUsername();</span><br><span class="line">        <span class="keyword">int</span> i = mapper.deleteUserById(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(willDeleteUsername + <span class="string">&quot; 已删除！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-模糊查询like"><a href="#5-5-模糊查询like" class="headerlink" title="5.5.模糊查询like"></a>5.5.模糊查询like</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 【select】 模糊查询</span></span><br><span class="line">    <span class="function">List&lt;Users&gt; <span class="title">getUsersInfoByPhantomSelect</span><span class="params">(String username)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- select sql: 绑定getUsersInfoByPhantomSelect,模糊查询 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersInfoByPhantomSelect&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">        select * from users where username like #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUsersInfoByPhantomSelect</span><span class="params">()</span></span>&#123;</span><br><span class="line">       SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">       UsersDao mapper = sqlSession.getMapper(UsersDao.class);</span><br><span class="line">       List&lt;Users&gt; users = mapper.getUsersInfoByPhantomSelect(<span class="string">&quot;%e%&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Users user : users) &#123;</span><br><span class="line">           System.out.println(user);</span><br><span class="line">       &#125;</span><br><span class="line">       sqlSession.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="5-6-sql"><a href="#5-6-sql" class="headerlink" title="5.6.sql"></a>5.6.sql</h2><p>这个元素可以用来定义可重用的 SQL 代码片段，以便在其它语句中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&#x27;userCols&#x27;</span>&gt;</span> user_name,pwd<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersInfoByPhantomSelect&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Users&quot;</span>&gt;</span></span><br><span class="line">       select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&#x27;userCols&#x27;</span> <span class="attr">from</span> <span class="attr">school.users</span> <span class="attr">where</span> <span class="attr">username</span> <span class="attr">like</span> #&#123;<span class="attr">username</span>&#125;</span></span><br><span class="line">   &lt;/select&gt;</span><br></pre></td></tr></table></figure><h2 id="5-7-映射结果（resultMap）"><a href="#5-7-映射结果（resultMap）" class="headerlink" title="5.7.映射结果（resultMap）"></a>5.7.映射结果（resultMap）</h2><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90%  的 JDBC <code>ResultSets</code> 数据提取代码中解放出来，并在一些情形下允许你进行一些  JDBC 不支持的操作。实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份  <code>resultMap</code> 能够代替实现同等功能的数千行代码。ResultMap的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p><h3 id="5-7-1结构"><a href="#5-7-1结构" class="headerlink" title="5.7.1结构"></a>5.7.1结构</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--元素的 type 属性表示需要的 POJO，id 属性是 resultMap 的唯一标识--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span>&gt;</span><span class="comment">&lt;!-- 类再实例化时用来注入结果到构造方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">idArg</span>/&gt;</span><span class="comment">&lt;!-- ID参数，结果为ID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arg</span>/&gt;</span><span class="comment">&lt;!-- 注入到构造方法的一个普通结果 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="comment">&lt;!-- 用于表示哪个列是主键 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span>/&gt;</span><span class="comment">&lt;!-- 注入到字段或JavaBean属性的普通结果 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="comment">&lt;!-- 用于一对一关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="comment">&lt;!-- 用于一对多、多对多关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">javaType</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="comment">&lt;!-- 使用结果值来决定使用哪个结果映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">case</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span><span class="comment">&lt;!-- 基于某些值的结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">discriminator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-7-2-使用-Map-存储结果集"><a href="#5-7-2-使用-Map-存储结果集" class="headerlink" title="5.7.2.使用 Map 存储结果集"></a>5.7.2.使用 Map 存储结果集</h3><p>任何 select 语句都可以使用 Map 存储结果，示例代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询所有用户信息存到Map中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllUserMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 查询所有用户信息存到Map中</span></span><br><span class="line">List&lt;Map&lt;String, Object&gt;&gt; lmp = userDao.selectAllUserMap();</span><br><span class="line"><span class="keyword">for</span> (Map&lt;String, Object&gt; map : lmp) &#123;</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述 Map 的 key 是 select 语句查询的字段名（必须完全一样），而 Map 的 value 是查询返回结果中字段对应的值</p><h3 id="5-7-3-使用POJO存储结果集"><a href="#5-7-3-使用POJO存储结果集" class="headerlink" title="5.7.3.使用POJO存储结果集"></a>5.7.3.使用POJO存储结果集</h3><p>Map 用起来很方便，但可读性稍差，有的开发者不太喜欢使用 Map，更多时候喜欢使用 POJO 的方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wyl.mybatis.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer m_uid;</span><br><span class="line">    <span class="keyword">private</span> String m_uname;</span><br><span class="line">    <span class="keyword">private</span> String m_usex;</span><br><span class="line">    <span class="comment">// 此处省略setter和getter方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User[uid=&quot;</span> + m_uid + <span class="string">&quot;,uname=&quot;</span> + m_uname + <span class="string">&quot;,usex=&quot;</span> + m_usex</span><br><span class="line">                + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询指定用户信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;com.wyl.mybatis.pojo.User&quot;</span> <span class="attr">type</span>=<span class="string">&quot;users&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 类属性【userId】映射为数据库中的【id】字段 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 类属性【userName】映射为数据库中的【name】字段 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 类属性【userPasswd】映射为数据库中的【password】字段 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;userPasswd&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 【resultMap】属性指向&lt;resultMap&gt;标签 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUsersInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;MyBatisAliasUsers&quot;</span> &gt;</span></span><br><span class="line">       select * from users</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// 使用resultMap映射结果集</span></span><br><span class="line">List&lt;User&gt; listResultMap = userDao.selectResultMap();</span><br><span class="line"><span class="keyword">for</span> (User myUser : listResultMap) &#123;</span><br><span class="line">    System.out.println(myUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-8-分页"><a href="#5-8-分页" class="headerlink" title="5.8.分页"></a>5.8.分页</h2><h3 id="5-8-1-使用limit分页"><a href="#5-8-1-使用limit分页" class="headerlink" title="5.8.1.使用limit分页"></a>5.8.1.使用limit分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页</span></span><br><span class="line"><span class="comment">语法：</span></span><br><span class="line"><span class="comment">SELECT * from user limit startIndex,pageSize;</span></span><br><span class="line"><span class="comment">SELECT * from user limit 3;  #[0,3)</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByLimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession=MybatisUtils.getsqlSession();</span><br><span class="line">    UserMapper mapper =sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList=mapper.getUserByLimit(map);</span><br><span class="line">    <span class="keyword">for</span> (User user: userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">     &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-2-RowBounds分页"><a href="#5-8-2-RowBounds分页" class="headerlink" title="5.8.2.RowBounds分页"></a>5.8.2.RowBounds分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserByRowBounds&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页2</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession=MybatisUtils.getsqlSession();</span><br><span class="line">    <span class="comment">//RowBounds</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.wyl.mybatis.dao.UserMapper.getUserByRowBounds&quot;</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line">    <span class="keyword">for</span> (User user: userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-8-3-使用分页插件"><a href="#5-8-3-使用分页插件" class="headerlink" title="5.8.3.使用分页插件"></a>5.8.3.使用分页插件</h3><p>官网地址：<a href="https://pagehelper.github.io/">https://pagehelper.github.io/</a></p><p><img src="/images/img/blog/image-20210824093737129.png" alt="image-20210824093737129"></p><h2 id="5-9-级联查询"><a href="#5-9-级联查询" class="headerlink" title="5.9.级联查询"></a>5.9.级联查询</h2><blockquote><p>级联关系是一个数据库实体的概念，有 3 种级联关系，分别是一对一级联、一对多级联以及多对多级联</p></blockquote><h3 id="5-9-1-一对一关联查询"><a href="#5-9-1-一对一关联查询" class="headerlink" title="5.9.1.一对一关联查询"></a>5.9.1.一对一关联查询</h3><p>在 MyBatis 中，通过 <resultMap> 元素的子元素 <association> 处理这种一对一级联关系。</p><p>在 <association> 元素中通常使用以下属性。</p><ul><li>property：指定映射到实体类的对象属性。</li><li>column：指定表中对应的字段（即查询返回的列名）。</li><li>javaType：指定映射到实体对象属性的类型。</li><li>select：指定引入嵌套查询的子 SQL 语句，该属性用于关联映射中的嵌套查询。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="keyword">private</span> Classes classes;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTname</span><span class="params">(String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Classes <span class="title">getClasses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClasses</span><span class="params">(Classes classes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher [tid=&quot;</span> + tid + <span class="string">&quot;, tname=&quot;</span> + tname + <span class="string">&quot;, classes=&quot;</span> + classes + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Classes</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String cname;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCid</span><span class="params">(<span class="keyword">int</span> cid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCname</span><span class="params">(String cname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cname = cname;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Classes [cid=&quot;</span> + cid + <span class="string">&quot;, cname=&quot;</span> + cname + <span class="string">&quot;, teacher=&quot;</span> + teacher + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;one.to.one.classesMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集</span></span><br><span class="line"><span class="comment">                 封装联表查询的数据(去除重复的数据)</span></span><br><span class="line"><span class="comment">         select * from classes c, teacher t where c.tid=t.tid and c.tid=#&#123;tid&#125;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClasses&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getClassesMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from classes c ,teacher t</span><br><span class="line">            where c.tid=t.tid and c.tid=#&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;one.to.one.Classes&quot;</span> <span class="attr">id</span>=<span class="string">&quot;getClassesMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;one.to.one.Teacher&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集</span></span><br><span class="line"><span class="comment">                 封装联表查询的数据(去除重复的数据)</span></span><br><span class="line"><span class="comment">         select * from teacher t,classes c where t.cid = c.cid and t.cid=#&#123;cid&#125;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getTeacherMap&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher t,classes c</span><br><span class="line">            where t.cid = c.cid and t.cid=#&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;one.to.one.Teacher&quot;</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherMap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;classes&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;one.to.one.Classes&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型</span></span><br><span class="line"><span class="comment">         SELECT * FROM classes WHERE cid=1;</span></span><br><span class="line"><span class="comment">         SELECT * FROM teacher WHERE tid=1   //1 是上一个查询得到的tid的值</span></span><br><span class="line"><span class="comment">         property:别名(属性名)    column：列名 --&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 把teacher的字段设置进去 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getClasses2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getClassesMap2&quot;</span>&gt;</span></span><br><span class="line">        select * from classes c where c.cid = #&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;one.to.one.Classes&quot;</span> <span class="attr">id</span>=<span class="string">&quot;getClassesMap2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;cname&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cname&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacherCollection&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherCollection&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;one.to.one.Teacher&quot;</span>&gt;</span></span><br><span class="line">        select tid tid,tname tname from teacher where tid=#&#123;tid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们这里一对一的关联操作，有两种方式：</p><p>　　　　1、使用嵌套结果映射来处理重复的联合结果的子集</p><p>　　　　2、通过执行另外一个SQL映射语句来返回预期的复杂类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一对一嵌套结果方式：根据教师id查询班级信息</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetClasses</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String statement = <span class="string">&quot;one.to.one.classesMapper.getClasses&quot;</span>;</span><br><span class="line">       Classes c = session.selectOne(statement, <span class="number">1</span>);</span><br><span class="line">       System.out.println(c);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//一对一嵌套结果方式：根据班级id查询教师信息</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTeacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String statement = <span class="string">&quot;one.to.one.classesMapper.getTeacher&quot;</span>;</span><br><span class="line">       Teacher t = session.selectOne(statement, <span class="number">1</span>);</span><br><span class="line">       System.out.println(t);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//一对一嵌套查询方式：根据教师id查询班级信息</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetClasses2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       String statement = <span class="string">&quot;one.to.one.classesMapper.getClasses2&quot;</span>;</span><br><span class="line">       Classes c = session.selectOne(statement, <span class="number">1</span>);</span><br><span class="line">       System.out.println(c);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="5-9-2-多对一查询"><a href="#5-9-2-多对一查询" class="headerlink" title="5.9.2. 多对一查询"></a>5.9.2. 多对一查询</h3><ul><li><p>SQL返回的值需要使用到类时的处理方式</p></li><li><p>模拟测试：多个学生对应一个老师</p><ol><li>MySQL测试表【Teachers】、【Students】</li><li>测试实体类【Teachers】、【Students】</li><li>dao层【TeachersMapper】、【StudentsMapper】</li><li>XML映射文件【teachersMapper.xml】、【studentsMapper.xml】</li><li>核心配置文件=&gt;【mybatis-config.xml】绑定dao接口、注册XML映射文件</li><li>输出测试</li></ol></li><li><p>整体目录结构</p><p><img src="/images/img/blog/image-20200829123326705.png" alt="image-20200829123326705"></p></li></ul><h4 id="5-9-2-1-环境搭建"><a href="#5-9-2-1-环境搭建" class="headerlink" title="5.9.2.1 环境搭建"></a>5.9.2.1 环境搭建</h4><p>MySQL创建测试数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">use school;</span><br><span class="line"></span><br><span class="line">#教师表</span><br><span class="line">DROP TABLE IF exists teachers;</span><br><span class="line">create table teachers(</span><br><span class="line">&#96;tid&#96; int(10),</span><br><span class="line">&#96;tname&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (&#96;tid&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">#学生表</span><br><span class="line">DROP TABLE IF exists students;</span><br><span class="line">create table students(</span><br><span class="line">&#96;id&#96; int(10) ,</span><br><span class="line">&#96;name&#96; varchar(20) DEFAULT NULL,</span><br><span class="line">&#96;tid&#96; int(10) DEFAULT NULL,</span><br><span class="line">PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">CONSTRAINT &#96;fktid&#96; FOREIGN KEY (&#96;tid&#96;) REFERENCES &#96;teachers&#96; (&#96;tid&#96;)</span><br><span class="line">)ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">insert into teachers (&#96;tid&#96;,&#96;tname&#96;) values (1,&#39;卡梅克斯&#39;);</span><br><span class="line"></span><br><span class="line">insert into students (&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) values (1,&#39;小红&#39;,1);</span><br><span class="line">insert into students (&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) values (2,&#39;小黄&#39;,1);</span><br><span class="line">insert into students (&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) values (3,&#39;小黑&#39;,1);</span><br><span class="line">insert into students (&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) values (4,&#39;小白&#39;,1);</span><br><span class="line">insert into students (&#96;id&#96;,&#96;name&#96;,&#96;tid&#96;) values (5,&#39;小紫&#39;,1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-9-2-2-实体类与接口"><a href="#5-9-2-2-实体类与接口" class="headerlink" title="5.9.2.2 实体类与接口"></a>5.9.2.2 实体类与接口</h4><ul><li><p>学生相关</p><ul><li><p>【Students】实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.pojo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;students&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="comment">// 添加【Teachers】类属性</span></span><br><span class="line">    <span class="keyword">private</span> Teachers teacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> sid, String sname, Teachers teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(<span class="keyword">int</span> sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSname</span><span class="params">(String sname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teachers <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teachers teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Students&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sid=&quot;</span> + sid +</span><br><span class="line">                <span class="string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, teacher=&quot;</span> + teacher +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【StudentsMapper】接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.camemax.pojo.Students;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentsMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">//查询所有学生信息，同时输出教师信息</span></span><br><span class="line">    <span class="function">List&lt;Students&gt; <span class="title">getStudentsInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>教师相关</p><ul><li><p>【Teachers】实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;teachers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teachers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teachers</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teachers</span><span class="params">(<span class="keyword">int</span> tid, String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTname</span><span class="params">(String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teachers&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&quot;, tname=&#x27;&quot;</span> + tname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>【TeachersMapper】接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeachersMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-9-2-3-Mapper映射器"><a href="#5-9-2-3-Mapper映射器" class="headerlink" title="5.9.2.3 Mapper映射器"></a>5.9.2.3 Mapper映射器</h4><ul><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.camemax.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;propDriver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;propUrl&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;propUsername&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;propPassword&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注册Mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/studentsMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/teachersMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-9-2-4-按查询嵌套处理【子查询】"><a href="#5-9-2-4-按查询嵌套处理【子查询】" class="headerlink" title="5.9.2.4. 按查询嵌套处理【子查询】"></a>5.9.2.4. 按查询嵌套处理【子查询】</h4><ul><li><p>studentsMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 按查询嵌套处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentsInfoMapBySelect&quot;</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsInfo&quot;</span>&gt;</span></span><br><span class="line">    select * from school.students</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentsInfoMapBySelect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 复杂类型： Teachers类</span></span><br><span class="line"><span class="comment">            【association】: 对象</span></span><br><span class="line"><span class="comment">                - 【property】: 设置获取到的结果集字段 =&gt; private Teachers teacher</span></span><br><span class="line"><span class="comment">                - 【column】: 设置映射对应的数据库字段 =&gt; tid</span></span><br><span class="line"><span class="comment">                - 【javaType】: 设置返回类型 =&gt; Teachers</span></span><br><span class="line"><span class="comment">                - 【select】: 子查询绑定。通过其他&lt;select&gt;标签中的值，指向其他select语句 =&gt; &lt;select id=&quot;TeachersInfo&quot;&gt;</span></span><br><span class="line"><span class="comment">            【collection】: 集合</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teachers&quot;</span> <span class="attr">select</span>=<span class="string">&quot;TeachersInfo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 查询指定教师信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;TeachersInfo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;teachers&quot;</span>&gt;</span></span><br><span class="line">    select * from school.teachers where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>teachersMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wyl.mybatis.dao.TeachersMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-9-2-5-按结果嵌套处理【关联】"><a href="#5-9-2-5-按结果嵌套处理【关联】" class="headerlink" title="5.9.2.5 按结果嵌套处理【关联】"></a>5.9.2.5 按结果嵌套处理【关联】</h4><ul><li><p>studentsMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 按结果嵌套处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudentsInfoByResult&quot;</span>&gt;</span></span><br><span class="line">    select s.id studentId,</span><br><span class="line">    s.name studentName,</span><br><span class="line">    t.tname teacherName</span><br><span class="line">    from students s,teachers t</span><br><span class="line">    where s.tid = t.tid;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsInfoByResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;studentId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;studentName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teachers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacherName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>teachersMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wyl.mybatis.dao.TeachersMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-9-3-一对多查询"><a href="#5-9-3-一对多查询" class="headerlink" title="5.9.3. 一对多查询"></a>5.9.3. 一对多查询</h3><ul><li>模拟测试：一名老师有多名学生 =&gt; 【面向教师】</li><li>本质：使用&lt;collection&gt;标签完成一对多的输出</li></ul><h4 id="5-9-3-1-基于-12-1环境搭建-12-1-环境搭建-做出的修改"><a href="#5-9-3-1-基于-12-1环境搭建-12-1-环境搭建-做出的修改" class="headerlink" title="5.9.3.1. 基于[12.1环境搭建](#12.1 环境搭建)做出的修改"></a>5.9.3.1. 基于[12.1环境搭建](#12.1 环境搭建)做出的修改</h4><ol><li><p>dao层  =&gt; 【TeachersDao】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.camemax.pojo.Students;</span><br><span class="line"><span class="keyword">import</span> com.camemax.pojo.Teachers;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeachersMapper</span> </span>&#123;</span><br><span class="line"><span class="comment">// 传入指定教师编号，返回其下学生信息</span></span><br><span class="line">    <span class="function">List&lt;Students&gt; <span class="title">getTeacherByIdHasStudents</span><span class="params">(<span class="meta">@Param(&quot;tid&quot;)</span> <span class="keyword">int</span> tid)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实现类 =&gt; 【Teachers】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;teachers&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teachers</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="comment">// 新增属性 ： 教师拥有的学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Students&gt; teacherHasStudents;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Students&gt; <span class="title">getTeacherHasStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacherHasStudents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacherHasStudents</span><span class="params">(List&lt;Students&gt; teacherHasStudents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacherHasStudents = teacherHasStudents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teachers</span><span class="params">(<span class="keyword">int</span> tid, String tname, List&lt;Students&gt; teacherHasStudents)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">        <span class="keyword">this</span>.teacherHasStudents = teacherHasStudents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teachers</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTname</span><span class="params">(String tname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teachers&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&quot;, tname=&#x27;&quot;</span> + tname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, teacherHasStudents=&quot;</span> + teacherHasStudents +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体类 =&gt; 【Students】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.camemax.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias(&quot;students&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String sname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">(<span class="keyword">int</span> sid, String sname, <span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Students&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sid=&quot;</span> + sid +</span><br><span class="line">                <span class="string">&quot;, sname=&#x27;&quot;</span> + sname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSid</span><span class="params">(<span class="keyword">int</span> sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSname</span><span class="params">(String sname)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sname = sname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试实现类 =&gt; 【DaoTest】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStudentsByTid</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyBatisUtils mybatis = <span class="keyword">new</span> MyBatisUtils();</span><br><span class="line">    SqlSession sqlSession = mybatis.getSqlSession();</span><br><span class="line">    TeachersMapper mapper = sqlSession.getMapper(TeachersDao.class);</span><br><span class="line">    </span><br><span class="line">    System.out.println(mapper.getStudentsByTid(<span class="number">1</span>));</span><br><span class="line">  sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-9-3-2-按查询嵌套处理-【子查询】"><a href="#5-9-3-2-按查询嵌套处理-【子查询】" class="headerlink" title="5.9.3.2. 按查询嵌套处理 【子查询】"></a>5.9.3.2. 按查询嵌套处理 【子查询】</h4><ol><li><p>XML映射文件 =&gt; teachersMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsByTid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getStudentsByTidMapUseSelect&quot;</span>&gt;</span></span><br><span class="line">    select * from school.teachers where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建【getStudentsByTidMapUseSelect】映射结果集，实现一对多结果返回。 </span></span><br><span class="line"><span class="comment">注意：Teachers类 使用了 @Alias(&quot;teachers&quot;) </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsByTidMapUseSelect&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teachers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Teachers类中新增List&lt;Students&gt; teacherHasStudents属性字段 </span></span><br><span class="line"><span class="comment">javaType: 指定在java中的字段类型属性</span></span><br><span class="line"><span class="comment">ofType: 指定类型所属类</span></span><br><span class="line"><span class="comment">select: 使resultMap绑定指定&lt;select&gt;标签</span></span><br><span class="line"><span class="comment">column: 使resultMap传递指定的属性字段</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teacherHasStudents&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;students&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentsByTid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 子查询：学生信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentsByTid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentsMap&quot;</span>&gt;</span></span><br><span class="line">select * from school.students where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 创建【studentsMap】，映射Students类中，与Teachers表字段不一致的属性字段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentsMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 不加会导致字段【tid】结果为0 --&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按查询嵌套处理 =&gt; 子查询 结果：</span></span><br><span class="line">[Teachers&#123;tid=<span class="number">1</span>, tname=<span class="string">&#x27;卡梅克斯&#x27;</span>, teacherHasStudents=[Students&#123;sid=<span class="number">1</span>, sname=<span class="string">&#x27;小红&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">2</span>, sname=<span class="string">&#x27;小黄&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">3</span>, sname=<span class="string">&#x27;小黑&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">4</span>, sname=<span class="string">&#x27;小白&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">5</span>, sname=<span class="string">&#x27;小紫&#x27;</span>, tid=<span class="number">1</span>&#125;]&#125;]</span><br></pre></td></tr></table></figure><h4 id="5-9-3-3-按结果嵌套处理-【关联查询】"><a href="#5-9-3-3-按结果嵌套处理-【关联查询】" class="headerlink" title="5.9.3.3. 按结果嵌套处理 【关联查询】"></a>5.9.3.3. 按结果嵌套处理 【关联查询】</h4></li><li><p>XML映射文件 =&gt; teachersMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherByIdHasStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherGetStudentsByResult&quot;</span>&gt;</span></span><br><span class="line">    select s.id studentId,s.name studentName,s.tid,t.tname teacherName,t.tid</span><br><span class="line">    from students s,teachers t</span><br><span class="line">    where s.tid = t.tid</span><br><span class="line">    and t.tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherGetStudentsByResult&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teachers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;teacherName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teacherHasStudents&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;students&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;studentId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;studentName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按结果嵌套处理 =&gt; 关联查询 结果：</span></span><br><span class="line">[Teachers&#123;tid=<span class="number">1</span>, tname=<span class="string">&#x27;卡梅克斯&#x27;</span>, teacherHasStudents=[Students&#123;sid=<span class="number">1</span>, sname=<span class="string">&#x27;小红&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">2</span>, sname=<span class="string">&#x27;小黄&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">3</span>, sname=<span class="string">&#x27;小黑&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">4</span>, sname=<span class="string">&#x27;小白&#x27;</span>, tid=<span class="number">1</span>&#125;, Students&#123;sid=<span class="number">5</span>, sname=<span class="string">&#x27;小紫&#x27;</span>, tid=<span class="number">1</span>&#125;]&#125;]</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-10-缓存"><a href="#5-10-缓存" class="headerlink" title="5.10.缓存"></a>5.10.缓存</h2><blockquote><p> 如果每次查询都连接数据库 ，耗资源！一次查询的结果，给他暂存在一个可以直接取到的地方！–&gt; 内存 ： 缓存<br>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</p></blockquote><p><strong>所以经常查询又不常改变的数据可以使用缓存</strong>，减少和数据库的交互次数，减少系统开销，提高系统效率.</p><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong>.</p><ul><li><p>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3 id="5-10-1-一级缓存"><a href="#5-10-1-一级缓存" class="headerlink" title="5.10.1.一级缓存"></a>5.10.1.一级缓存</h3><p>也叫本地缓存： SqlSession.</p><ol><li><p>一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p></li><li><p>一级缓存就是一个Map</p></li><li><p>在同一个 SqlSession 中, Mybatis 会把执行的方法和参数通过算法生成缓存的键值， 将键值和结果存放在一个 Map 中， 如果后续的键值一样， 则直接从 Map 中获取数据；</p></li><li><p>不同的 SqlSession 之间的缓存是相互隔离的；</p></li><li><p>用一个 SqlSession， 可以通过配置使得在查询前清空缓存；</p></li><li><p>任何的 UPDATE, INSERT, DELETE 语句都会清空缓存。</p></li></ol><h3 id="5-10-2-二级缓存"><a href="#5-10-2-二级缓存" class="headerlink" title="5.10.2.二级缓存"></a>5.10.2.二级缓存</h3><ol><li>级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<br>3.1.一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；<br>3.2.如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；<br>3.3.新的会话查询信息，就可以从二级缓存中获取内容；<br>3.4.不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ol><p>步骤：</p><p>开启全局缓存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--显示的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在要使用二级缓存的Mapper中开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>也可以自定义参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>  <span class="attr">eviction</span>=<span class="string">&quot;FIFO&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">&quot;60000&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">&quot;512&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>小结：</p><ul><li>只要开启了二级缓存，在同一个Mapper下就有效</li><li>所有的数据都会先放在一级缓存中；</li><li>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中</li></ul><h1 id="6-动态sql"><a href="#6-动态sql" class="headerlink" title="6.动态sql"></a>6.动态sql</h1><p>动态 SQL 是 MyBatis 的强大特性之一。</p><p>MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><ul><li>if</li><li>choose (when, otherwise)</li><li>trim (where, set)</li><li>foreach<h2 id="6-1-if"><a href="#6-1-if" class="headerlink" title="6.1.if"></a>6.1.if</h2>使用动态 SQL 最常见情景是根据条件包含 where 子句的一部分。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogWithTitleLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-choose、when、otherwise"><a href="#6-2-choose、when、otherwise" class="headerlink" title="6.2.choose、when、otherwise"></a>6.2.choose、when、otherwise</h2></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG WHERE state = ‘ACTIVE’</span><br><span class="line">  <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">      AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">      AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">      AND featured = 1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-trim、where、set"><a href="#6-3-trim、where、set" class="headerlink" title="6.3.trim、where、set"></a>6.3.trim、where、set</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findActiveBlogLike&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE</span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;state != null&quot;</span>&gt;</span></span><br><span class="line">    state = #&#123;state&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">    AND title like #&#123;title&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author != null and author.name != null&quot;</span>&gt;</span></span><br><span class="line">    AND author_name like #&#123;author.name&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-3-foreach"><a href="#6-3-foreach" class="headerlink" title="6.3.foreach"></a>6.3.foreach</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPostIn&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;domain.blog.Post&quot;</span>&gt;</span></span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-4-script"><a href="#6-4-script" class="headerlink" title="6.4.script"></a>6.4.script</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Update(&#123;&quot;<span class="tag">&lt;<span class="name">script</span>&gt;</span>&quot;,</span><br><span class="line"><span class="javascript">     <span class="string">&quot;update Author&quot;</span>,</span></span><br><span class="line"><span class="javascript">     <span class="string">&quot;  &lt;set&gt;&quot;</span>,</span></span><br><span class="line"><span class="handlebars"><span class="xml">     &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;username != null&#x27;</span>&gt;</span>username=#&#123;username&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">     &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;password != null&#x27;</span>&gt;</span>password=#&#123;password&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">     &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;email != null&#x27;</span>&gt;</span>email=#&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">     &quot;    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&#x27;bio != null&#x27;</span>&gt;</span>bio=#&#123;bio&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span>&quot;,</span></span></span><br><span class="line"><span class="javascript">     <span class="string">&quot;  &lt;/set&gt;&quot;</span>,</span></span><br><span class="line"><span class="javascript">     <span class="string">&quot;where id=#&#123;id&#125;&quot;</span>,</span></span><br><span class="line">     &quot;<span class="tag">&lt;/<span class="name">script</span>&gt;</span>&quot;&#125;)</span><br><span class="line">   void updateAuthorValues(Author author);</span><br></pre></td></tr></table></figure><h2 id="6-5-bind"><a href="#6-5-bind" class="headerlink" title="6.5.bind"></a>6.5.bind</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogsLike&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;pattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-6-trim"><a href="#6-6-trim" class="headerlink" title="6.6.trim"></a>6.6.trim</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogsByTrim&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;blogs&quot;</span>&gt;</span></span><br><span class="line">select * from test.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverride</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;titleMap != null&quot;</span>&gt;</span> AND title = #&#123;titleMap&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;authorMap != null&quot;</span>&gt;</span> OR author = #&#123;authorMap&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlogInfoByTrim&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">update test.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverride</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;titleMap != null&quot;</span>&gt;</span> title = #&#123;titleMap&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;authorMap != null&quot;</span>&gt;</span> author = #&#123;authorMap&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id = #&#123;idMap&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-7-多数据库支持"><a href="#6-7-多数据库支持" class="headerlink" title="6.7.多数据库支持"></a>6.7.多数据库支持</h2><p>如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句。比如下面的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;oracle&#x27;&quot;</span>&gt;</span></span><br><span class="line">      select seq_users.nextval from dual</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;_databaseId == &#x27;db2&#x27;&quot;</span>&gt;</span></span><br><span class="line">      select nextval for seq_users from sysibm.sysdummy1&quot;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">  insert into users values (#&#123;id&#125;, #&#123;name&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-8-动态-SQL-中的插入脚本语言"><a href="#6-8-动态-SQL-中的插入脚本语言" class="headerlink" title="6.8.动态 SQL 中的插入脚本语言"></a>6.8.动态 SQL 中的插入脚本语言</h2><p>MyBatis 从 3.2 版本开始支持插入脚本语言，这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句。</p><p>可以通过实现以下接口来插入一种语言：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LanguageDriver</span> </span>&#123;</span><br><span class="line">  <span class="function">ParameterHandler <span class="title">createParameterHandler</span><span class="params">(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql)</span></span>;</span><br><span class="line">  <span class="function">SqlSource <span class="title">createSqlSource</span><span class="params">(Configuration configuration, XNode script, Class&lt;?&gt; parameterType)</span></span>;</span><br><span class="line">  <span class="function">SqlSource <span class="title">createSqlSource</span><span class="params">(Configuration configuration, String script, Class&lt;?&gt; parameterType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现自定义语言驱动后，你就可以在 mybatis-config.xml 文件中将它设置为默认语言：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;org.sample.MyLanguageDriver&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;myLanguage&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;defaultScriptingLanguage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myLanguage&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者，你也可以使用 <code>lang</code> 属性为特定的语句指定语言：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">lang</span>=<span class="string">&quot;myLanguage&quot;</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者，在你的 mapper 接口上添加 <code>@Lang</code> 注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Lang(MyLanguageDriver.class)</span></span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM BLOG&quot;)</span></span><br><span class="line">  <span class="function">List&lt;Blog&gt; <span class="title">selectBlog</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-注解"><a href="#7-注解" class="headerlink" title="7.注解"></a>7.注解</h1><p><img src="/images/img/blog/image-20210824160741551.png" alt="image-20210824160741551"></p><p>优缺点：</p><ul><li>优点：省去复杂的mapper映射器中的sql代码相关配置</li><li>缺点：无法执行复杂的SQL，例如：存在字段异常不匹配时，使用注解执行SQL容易出现找不到值的情况（查询结果为’null’）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from school.users where id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">   <span class="function">Users <span class="title">getUserInfoById</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Insert(&quot;insert into school.users value(#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;,#&#123;email&#125;,#&#123;gender&#125;)&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">insertUserInfo</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> <span class="keyword">int</span> id</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userName&quot;)</span> String username</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userPassword&quot;)</span> String password</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userEmail&quot;)</span> String email</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userGender&quot;)</span> <span class="keyword">int</span> gender</span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Delete(&quot;delete from school.users where id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">deleteUserInfoById</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Update(&quot;update school.users set username = #&#123;userName&#125; , password = #&#123;userPassword&#125; , email = #&#123;userEmail&#125; , gender = #&#123;userGender&#125; where id = #&#123;userId&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">updateUserInfoById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="meta">@Param(&quot;userId&quot;)</span> <span class="keyword">int</span> id</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userName&quot;)</span> String username</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userPassword&quot;)</span> String password</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userEmail&quot;)</span> String email</span></span></span><br><span class="line"><span class="function"><span class="params">           ,<span class="meta">@Param(&quot;userGender&quot;)</span> <span class="keyword">int</span> gender</span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span>;</span><br></pre></td></tr></table></figure><h1 id="8-日志"><a href="#8-日志" class="headerlink" title="8.日志"></a>8.日志</h1><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li></ul><p>在mybatis-config.xml中我们已经设置了日志的默认值为<strong>STDOUT_LOGGING标准日志输出</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配日志-SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试输出</p><p><img src="/images/img/blog/image-20210824182641931.png" alt="image-20210824182641931"></p><h2 id="8-1-Log4J"><a href="#8-1-Log4J" class="headerlink" title="8.1.Log4J"></a>8.1.Log4J</h2><ul><li>Log4j是<a href="https://baike.baidu.com/item/Apache/8512995">Apache</a>的一个开源项目，通过使用Log4j，可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%8F%B0/2438626">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX">UNIX</a> <a href="https://baike.baidu.com/item/Syslog">Syslog</a><a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/966835">守护进程</a>等；</li><li>控制每一条日志的输出格式；通过定义每一条日志信息的级别，能够更加细致地控制日志的生成过程。</li><li>通过一个<a href="https://baike.baidu.com/item/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/286550">配置文件</a>来灵活地进行配置，而不需要修改应用的代码。</li></ul><ol><li><p>导入Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>映射器开启日志功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>log4j.properties</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">【%c】-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/MyBatis.txt</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">【%p】【%d&#123;yy-MM-dd&#125;】【%c】%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h2 id="8-2-日志类使用"><a href="#8-2-日志类使用" class="headerlink" title="8.2.日志类使用"></a>8.2.日志类使用</h2><p>导入Apache-Log4J包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br></pre></td></tr></table></figure><p>使用反射当前对象来创建当前Logger对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建静态变量Logger对象 =&gt; logger</span></span><br><span class="line"><span class="comment">// 使用当前类.class反射创建logger对象</span></span><br><span class="line"><span class="keyword">static</span> Logger logger = logger.getLogger(UsersDaoTest.class)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log4jTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info: 日志输出等级【Info】&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug: 日志输出等级【DEBUG】&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;error: 日志输出等级【ERROR】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/img/blog/image-20210824183517453.png" alt="image-20210824183517453"></p>]]></content>
      
      
      <categories>
          
          <category> 从net到java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从net到java </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>net 5学习笔记---依赖注入</title>
      <link href="2021/05/11/net%20core/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>2021/05/11/net%20core/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<div class="note red flat"><p>最近准备用一段时间来系统的学习总结一下net5，所以写文章会有点频繁，希望自己能从中得到内心的平静。</p></div><h1 id="小王的故事"><a href="#小王的故事" class="headerlink" title="小王的故事"></a>小王的故事</h1><div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><h2 id="小王去上班"><a href="#小王去上班" class="headerlink" title="小王去上班"></a>小王去上班</h2><p>​    小王是个程序员，每个工作日他都要去上班，诸多交通工具他最喜欢的交通工具是骑电车。在骑行的过程中放空自己使他很快。</p><p>​    突然有一天天气预报说近期有很大的雨，小王再想骑电车去上班显然是不可能了。那么他就要选择开汽车去。</p><p>但是由于小王每天过于<strong>依赖</strong>骑电动车，开汽车水平有限，那么他就要重新<strong>学习</strong>开汽车。</p><p>​    因此小王很烦恼，我就想去上个班，还要掌握不同的交通工具，这真是让人烦恼，难道我就想做一个单纯的打工族就这么难吗？小王就把这件事告诉了他的<em>老婆</em>，她老婆是个老司机，她说“这事你就不用管了，我是老司机啊，开车这事我来<strong>控制</strong>就好了，你就记得给我多买些礼物就好“。从此之后小王就安心的为了老婆的赚钱，开车这事就完全有他老婆负责。</p><h3 id="小王的日记："><a href="#小王的日记：" class="headerlink" title="小王的日记："></a>小王的日记：</h3><p>​    我曾经很享受自己去上班（自己控制），每天去上班就拿出我心爱的电动车（实例化对象），直到有一天天气预报告诉我要下大雨，再依赖自行车就会被大雨淋着，而换交通工具我发现我就要重新学习开车（高耦合），知道我老婆大人说她是老司机（ioc容器），开车这事由她来控制（控制反转），不管怎么去上班，事先告诉他用什么交通工具就行（依赖注入），从此我每个工作日只要叫上我老婆她就直接带我去上班了。</p></div><hr><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p>​    从小王的故事我们可以看到一些关键词<strong>依赖</strong>与<strong>控制</strong> 而今天要说的就是什么是依赖注入。说到依赖注入（DI）还有个概念叫控制反转(IOC)。</p><p>控制反转（IOC—Inversion of Control）不是什么技术，而是一种<strong>设计思想</strong>。它的思路是设计好的依赖类交给容器控制，而不是在对象中直接实例化控制。就是在系统运行时ioc容器动态向一个对象提供他依赖的其他对象。而他的实现就是用依赖注入来实现。</p><p>依赖注入(DI—Dependency Injection)是组件之间依赖关系由容器决定。为此我们要明白依赖和注入关系</p><p>依赖：由于应用程序需要ioc容器提供对象外部的资源所以<u>应用程序</u>依赖于<u>ioc容器</u>。</p><p>注入：某个对象所需要的外部资源（包括对象、资源、常量数据）注入到了ioc容器中。</p><hr><h2 id="net5-内置依赖注入"><a href="#net5-内置依赖注入" class="headerlink" title="net5 内置依赖注入"></a>net5 内置依赖注入</h2><p>依赖注入是net core和net5的核心概念，我们在了解完概念之后也要对我们框架中对他的实现有个清楚的认识。当然<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0">官方文档</a>是最好的了解方式。接下来我从我的角度去说一下对net 5（net core）依赖注入的理解.首先我们要知道net5依赖注入的实现由net 内置的容器和第三方的容器。我们主要说内置的实现情况。</p><h3 id="内置依赖注入"><a href="#内置依赖注入" class="headerlink" title="内置依赖注入"></a>内置依赖注入</h3><h3 id="Microsoft-Extensions-DependencyInjection"><a href="#Microsoft-Extensions-DependencyInjection" class="headerlink" title="Microsoft.Extensions.DependencyInjection"></a>Microsoft.Extensions.DependencyInjection</h3><p>net5 内置依赖注入主要用到了<code>Microsoft.Extensions.DependencyInjection</code>和<code>Microsoft.Extensions.DependencyInjection.Abstraction</code>两个引用。我们nuget引用就行。它们是<a href="https://github.com/aspnet/DependencyInjection">开源</a>的。</p><p><img src="/images/img/blog/DependencyInjectionClass.png" alt="DependencyInjectionClass"></p><p>我们可以看到DependencyInjection这个项目并不大，但却是整个net5(NET Core)的基础，因为它提供了依赖注入容器的默认实现，而依赖注入是net5（net core）的核心基础.</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a><strong>源码解析</strong></h3><p><img src="/images/img/blog/image-20210515133637360.png" alt="image-20210515133637360"></p><h4 id="IServiceCollection"><a href="#IServiceCollection" class="headerlink" title="IServiceCollection"></a><strong>IServiceCollection</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceCollection</span> : <span class="title">IServiceCollection</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//ServiceDescriptor缓存集合</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="title">List</span>&lt;<span class="title">ServiceDescriptor</span>&gt; _descriptors</span> = <span class="keyword">new</span> List&lt;ServiceDescriptor&gt;();</span><br><span class="line">     <span class="comment">//注册到当前ServiceCollection对象中的ServiceDescriptor数量</span></span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">int</span> Count =&gt; _descriptors.Count;</span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">bool</span> IsReadOnly =&gt; <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">public</span> ServiceDescriptor <span class="keyword">this</span>[<span class="built_in">int</span> index]</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">get</span></span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">return</span> _descriptors[index];</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">set</span></span><br><span class="line">         &#123;</span><br><span class="line">             _descriptors[index] = <span class="keyword">value</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//清空所有ServiceDescriptor对象</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Clear</span>(<span class="params"></span>) </span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">         _descriptors.Clear();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//查询ServiceCollection是否包含指定ServiceDescriptor对象</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Contains</span>(<span class="params">ServiceDescriptor item</span>)</span>=&gt; _descriptors.Contains(item);</span><br><span class="line">     <span class="comment">//拷贝ServiceDescriptor</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CopyTo</span>(<span class="params">ServiceDescriptor[] array, <span class="built_in">int</span> arrayIndex</span>)</span> =&gt;_descriptors.CopyTo(array, arrayIndex);</span><br><span class="line">     <span class="comment">//从ServiceCollection移除指定ServiceDescriptor</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Remove</span>(<span class="params">ServiceDescriptor item</span>)</span>=&gt;_descriptors.Remove(item);</span><br><span class="line">     <span class="comment">//获取此ServiceCollection的迭代器</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> IEnumerator&lt;ServiceDescriptor&gt; <span class="title">GetEnumerator</span>(<span class="params"></span>)</span>=&gt; _descriptors.GetEnumerator();</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">IndexOf</span>(<span class="params">ServiceDescriptor item</span>)</span> =&gt; _descriptors.IndexOf(item);</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Insert</span>(<span class="params"><span class="built_in">int</span> index, ServiceDescriptor item</span>)</span> =&gt; _descriptors.Insert(index, item);</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveAt</span>(<span class="params"><span class="built_in">int</span> index</span>)</span>=&gt; _descriptors.RemoveAt(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="IServiceCollection-amp-amp-ServiceDescriptor"><a href="#IServiceCollection-amp-amp-ServiceDescriptor" class="headerlink" title="IServiceCollection&amp;&amp;ServiceDescriptor"></a><strong>IServiceCollection&amp;&amp;ServiceDescriptor</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Microsoft.Extensions.DependencyInjection</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 指定服务描述符集合的约定</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IServiceCollection</span> : <span class="title">IList</span>&lt;<span class="title">ServiceDescriptor</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从代码中可以看到内置依赖注入，它的内置容器是ServiceProvider，我们会把我们的服务注入到ServiceProvider 中来，而IServiceCollection是ServiceProvider的list的集合。</p><h4 id="ServiceDescriptor"><a href="#ServiceDescriptor" class="headerlink" title="ServiceDescriptor"></a><strong>ServiceDescriptor</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">Add</span>(<span class="params"><span class="keyword">this</span> IServiceCollection collection,IEnumerable&lt;ServiceDescriptor&gt; descriptors</span>)</span></span><br><span class="line"><span class="function"></span>   &#123;</span><br><span class="line">       <span class="keyword">if</span> (collection == <span class="literal">null</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(collection));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (descriptors == <span class="literal">null</span>)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(descriptors));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">foreach</span> (<span class="keyword">var</span> descriptor <span class="keyword">in</span> descriptors)</span><br><span class="line">       &#123;</span><br><span class="line">           collection.Add(descriptor);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> collection;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到服务注册的时候，提供了<strong>ServiceDescriptor</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> Describes a service with its service type, implementation, and lifetime.</span></span><br><span class="line">   <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">   [<span class="meta">DebuggerDisplay(<span class="meta-string">&quot;Lifetime = &#123;Lifetime&#125;, ServiceType = &#123;ServiceType&#125;, ImplementationType = &#123;ImplementationType&#125;&quot;</span>)</span>]</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceDescriptor</span></span><br><span class="line">   &#123;&#125;</span><br></pre></td></tr></table></figure><p>它是对服务的类型、生命周期、获取服务的方式的描述。</p><p><img src="/images/img/blog/image-20210515103733823.png" alt="image-20210515103733823"></p><p><strong>类型</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册的类型的生命周期</span></span><br><span class="line"><span class="keyword">public</span> ServiceLifetime Lifetime &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="comment">//基类型</span></span><br><span class="line"><span class="keyword">public</span> Type ServiceType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="comment">//实例类型(派生类型)</span></span><br><span class="line"><span class="keyword">public</span> Type ImplementationType &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="comment">//实例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">object</span> ImplementationInstance &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="comment">//注册类型实例化对象的工厂</span></span><br><span class="line"><span class="keyword">public</span> Func&lt;IServiceProvider, <span class="built_in">object</span>&gt; ImplementationFactory &#123; <span class="keyword">get</span>; &#125;</span><br></pre></td></tr></table></figure><p><strong>构造函数</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//派生类型</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceDescriptor</span>(<span class="params">Type serviceType,<span class="built_in">object</span> instance</span>)</span></span><br><span class="line"><span class="function">     : <span class="title">this</span>(<span class="params">serviceType, ServiceLifetime.Singleton</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      Lifetime = lifetime;</span><br><span class="line">      ServiceType = serviceType;</span><br><span class="line">      ImplementationInstance = instance;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceDescriptor</span>(<span class="params">Type serviceType,Func&lt;IServiceProvider, <span class="built_in">object</span>&gt; factory,ServiceLifetime lifetime</span>)</span></span><br><span class="line"><span class="function">     : <span class="title">this</span>(<span class="params">serviceType, lifetime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      Lifetime = lifetime;</span><br><span class="line">      ServiceType = serviceType;</span><br><span class="line">      ImplementationFactory = factory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体实例对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ServiceDescriptor</span>(<span class="params">Type serviceType,Type implementationType,ServiceLifetime lifetime</span>)</span></span><br><span class="line"><span class="function">     : <span class="title">this</span>(<span class="params">serviceType, lifetime</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      Lifetime = lifetime;</span><br><span class="line">      ServiceType = serviceType;</span><br><span class="line">      ImplementationType = implementationType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span>获取当前注册类型的实例类型(内部类)</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">internal</span> Type <span class="title">GetImplementationType</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="comment">//真正实例化对象的方法,重载都是调用此类方法 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceDescriptor <span class="title">Describe</span>(<span class="params">Type serviceType, Func&lt;IServiceProvider, <span class="built_in">object</span>&gt; implementationFactory, ServiceLifetime lifetime</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceDescriptor <span class="title">Singleton</span>(<span class="params">Type serviceType,<span class="built_in">object</span> implementationInstance</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceDescriptor <span class="title">Scoped</span>(<span class="params">Type service, Func&lt;IServiceProvider, <span class="built_in">object</span>&gt; implementationFactory</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="ServiceCollectionServiceExtensions-amp-ServiceCollectionDescriptorExtensions-amp-ServiceCollectionContainerBuilderExtensions"><a href="#ServiceCollectionServiceExtensions-amp-ServiceCollectionDescriptorExtensions-amp-ServiceCollectionContainerBuilderExtensions" class="headerlink" title="ServiceCollectionServiceExtensions&amp;ServiceCollectionDescriptorExtensions&amp;ServiceCollectionContainerBuilderExtensions"></a><strong>ServiceCollectionServiceExtensions&amp;ServiceCollectionDescriptorExtensions&amp;ServiceCollectionContainerBuilderExtensions</strong></h4><p>这三个方法时ServiceCollection的三个扩展方法分别实现：我们所使用了注册方式；TryAdd和RemoveAll,Replace等操作和构造<code>ServiceProvider</code>实例。</p><p>ServiceCollectionServiceExtensions：</p><p>代码太多（不同生命周期的注册）就不贴出了，截个图算了。</p><p><img src="/images/img/blog/image-20210515121957047.png" alt="image-20210515121957047"></p><p>ServiceCollectionDescriptorExtensions：</p><p><img src="/images/img/blog/image-20210515122419417.png" alt="image-20210515122419417"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TryAdd</span>(<span class="params"><span class="keyword">this</span> IServiceCollection collection,ServiceDescriptor descriptor</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!collection.Any(d =&gt; d.ServiceType == descriptor.ServiceType))</span><br><span class="line">          collection.Add(descriptor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：Add,RemoveAll,Replace,没什么好说的，其中TryAdd，TryAddEnumerable需要注意到的是：中有服务集合中不存在才会进行过注册。</p><p><strong>ServiceCollectionContainerBuilderExtensions</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceCollectionContainerBuilderExtensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ServiceProvider <span class="title">BuildServiceProvider</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services</span>)     </span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">static</span> ServiceProvider <span class="title">BuildServiceProvider</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, <span class="built_in">bool</span> validateScopes</span>)    </span></span><br><span class="line"><span class="function">        <span class="keyword">public</span> <span class="keyword">static</span> ServiceProvider <span class="title">BuildServiceProvider</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, ServiceProviderOptions options</span>)</span></span><br><span class="line"><span class="function">        </span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure><h4 id="IServiceProvider"><a href="#IServiceProvider" class="headerlink" title="IServiceProvider"></a><strong>IServiceProvider</strong></h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">ServiceProvider</span> : <span class="title">IServiceProvider</span>, <span class="title">IDisposable</span>, <span class="title">IServiceProviderEngineCallback</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ServiceProvider的扩展接口  </span></span><br><span class="line">    <span class="comment">//使用这个接口的子类进行调用缓存各种注册服务和调用访问者对象进行获取实例对象</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">readonly</span> IServiceProviderEngine _engine;  </span><br><span class="line">     <span class="comment"><span class="doctag">///</span> 缓存类型(访问者模式)</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">readonly</span> CallSiteValidator _callSiteValidator;</span><br><span class="line">     <span class="function"><span class="keyword">internal</span> <span class="title">ServiceProvider</span>(<span class="params">IEnumerable&lt;ServiceDescriptor&gt; serviceDescriptors, ServiceProviderOptions options</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">          IServiceProviderEngineCallback callback = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">if</span> (options.ValidateScopes)</span><br><span class="line">          &#123;</span><br><span class="line">               callback = <span class="keyword">this</span>;</span><br><span class="line">               _callSiteValidator = <span class="keyword">new</span> CallSiteValidator();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//实例化工作引擎类型</span></span><br><span class="line">          <span class="keyword">switch</span> (options.Mode)</span><br><span class="line">          &#123;</span><br><span class="line">               <span class="keyword">case</span> ServiceProviderMode.Dynamic:</span><br><span class="line">                    <span class="comment">// 实例化 DynamicServiceProviderEngine</span></span><br><span class="line">                    _engine = <span class="keyword">new</span> DynamicServiceProviderEngine(serviceDescriptors, callback);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="keyword">case</span> ServiceProviderMode.Runtime:</span><br><span class="line">                    _engine = <span class="keyword">new</span> RuntimeServiceProviderEngine(serviceDescriptors, callback);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> ServiceProviderMode.ILEmit:</span><br><span class="line">                    _engine = <span class="keyword">new</span> ILEmitServiceProviderEngine(serviceDescriptors, callback);</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> ServiceProviderMode.Expressions:</span><br><span class="line">                    _engine = <span class="keyword">new</span> ExpressionsServiceProviderEngine(serviceDescriptors, callback);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">               <span class="literal">default</span>:</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NotSupportedException(<span class="keyword">nameof</span>(options.Mode));</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 获取指定类型的服务对象</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">GetService</span>(<span class="params">Type serviceType</span>)</span> =&gt; _engine.GetService(serviceType);</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span> =&gt; _engine.Dispose();</span><br><span class="line">    <span class="comment">//创建服务实例缓存</span></span><br><span class="line"><span class="keyword">void</span> IServiceProviderEngineCallback.OnCreate(ServiceCallSite callSite)</span><br><span class="line">       =&gt;_callSiteValidator.ValidateCallSite(callSite);</span><br><span class="line">    <span class="comment">//服务实例的校验</span></span><br><span class="line">     <span class="keyword">void</span> IServiceProviderEngineCallback.OnResolve(Type serviceType, IServiceScope scope)</span><br><span class="line">      =&gt;_callSiteValidator.ValidateResolution(serviceType, scope, _engine.RootScope);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到ServiceProvider用来获取服务的实例，它提供了一个扩展IServiceProviderEngine来实现其功能。x下面我们来看一下源码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ServiceProviderServiceExtensions</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//从IServiceProvider获取“T”类型的服务。  </span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetService</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IServiceProvider provider</span>)</span></span><br><span class="line"><span class="function"></span>          =&gt; (T)provider.GetService(<span class="keyword">typeof</span>(T));</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//从IServiceProvider获取“T”类型的服务。</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetRequiredService</span>(<span class="params"><span class="keyword">this</span> IServiceProvider provider, Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">          <span class="comment">// 如果当前ServiceProvider实现了 ISupportRequiredService </span></span><br><span class="line">          <span class="comment">// 则直接调用当前ServiceProvier的GetRequiredService获取服务实例</span></span><br><span class="line">          <span class="keyword">var</span> requiredServiceSupportingProvider = provider <span class="keyword">as</span> ISupportRequiredService;</span><br><span class="line">          <span class="keyword">if</span> (requiredServiceSupportingProvider != <span class="literal">null</span>)</span><br><span class="line">             <span class="keyword">return</span> requiredServiceSupportingProvider.GetRequiredService(serviceType);</span><br><span class="line">          <span class="comment">//如果当前ServiceProvider未实现ISupportRequiredService</span></span><br><span class="line">          <span class="comment">//就直接调用GetService获取服务实例,但是如果服务实例为空,则抛出异常</span></span><br><span class="line">          <span class="keyword">var</span> service = provider.GetService(serviceType);</span><br><span class="line">          <span class="keyword">if</span> (service == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> InvalidOperationException(Resources.FormatNoServiceRegistered(serviceType));</span><br><span class="line">          <span class="keyword">return</span> service;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">GetRequiredService</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IServiceProvider provider</span>)</span></span><br><span class="line"><span class="function"></span>          =&gt; (T)provider.GetRequiredService(<span class="keyword">typeof</span>(T));</span><br><span class="line">     <span class="comment">//获取指定注册类型&lt;T&gt;的所有服务实例</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">T</span>&gt; <span class="title">GetServices</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="keyword">this</span> IServiceProvider provider</span>)</span></span><br><span class="line"><span class="function"></span>          =&gt; provider.GetRequiredService&lt;IEnumerable&lt;T&gt;&gt;();</span><br><span class="line">     <span class="comment">//获取指定注册类型&lt;T&gt;的所有服务实例</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IEnumerable&lt;<span class="built_in">object</span>&gt; <span class="title">GetServices</span>(<span class="params"><span class="keyword">this</span> IServiceProvider provider, Type serviceType</span>)</span></span><br><span class="line"><span class="function"></span>     &#123;</span><br><span class="line">          <span class="comment">//制造一个serviceType类型的IEnumberable&lt;&gt;集合,serviceTypele类型作为当前集合的泛型参数</span></span><br><span class="line">          <span class="keyword">var</span> genericEnumerable = <span class="keyword">typeof</span>(IEnumerable&lt;&gt;).MakeGenericType(serviceType);</span><br><span class="line">          <span class="keyword">return</span> (IEnumerable&lt;<span class="built_in">object</span>&gt;)provider.GetRequiredService(genericEnumerable);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建一个子IServiceProvider（容器）实例</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceScope <span class="title">CreateScope</span>(<span class="params"><span class="keyword">this</span> IServiceProvider provider</span>)</span></span><br><span class="line"><span class="function"></span>          =&gt; provider.GetRequiredService&lt;IServiceScopeFactory&gt;().CreateScope();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NET-内置依赖注入实现"><a href="#NET-内置依赖注入实现" class="headerlink" title="NET 内置依赖注入实现"></a>NET 内置依赖注入实现</h2><p>我们再Startup.ConfigureServices(IServiceCollection services)进行注册下面我直接用代码来看一下实现</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserService</span> : <span class="title">IUserService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;王延领&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">GetName</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.面向接口注册</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped(<span class="keyword">typeof</span>(IUserService), <span class="keyword">typeof</span>(UserService));</span><br><span class="line">services.AddScoped&lt;IUserService, UserService&gt;();</span><br></pre></td></tr></table></figure><p>2.实现形式注册</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;UserService&gt;();</span><br><span class="line">services.AddScoped(<span class="keyword">typeof</span>(UserService));</span><br></pre></td></tr></table></figure><p>两种形式都可以，但扩展性显然是第一种好。</p><p>3.批量注入</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assembly = Assembly.GetExecutingAssembly()</span><br><span class="line">                        .DefinedTypes</span><br><span class="line">                        .Where(a =&gt; a.Name.EndsWith(<span class="string">&quot;Service&quot;</span>) &amp;&amp; !a.Name.StartsWith(<span class="string">&quot;I&quot;</span>));</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> assembly)</span><br><span class="line">&#123;</span><br><span class="line">    services.AddScoped(item.GetInterfaces().FirstOrDefault(), item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方容器（Autofact）注入"><a href="#第三方容器（Autofact）注入" class="headerlink" title="第三方容器（Autofact）注入"></a>第三方容器（Autofact）注入</h2><p>后续单独一篇文章再写吧。</p>]]></content>
      
      
      <categories>
          
          <category> net 5学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> net 5,依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7/8 一键安装 shadowsocks-libev</title>
      <link href="2021/04/05/Linux/8%20%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20shadowsocks-libev/"/>
      <url>2021/04/05/Linux/8%20%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%20shadowsocks-libev/</url>
      
        <content type="html"><![CDATA[<div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>🦋 翻墙买了Vultr,然后看了一下默认系统为Centos8 ，所以就找了一下说是安装shadowsoks-libev，用了一段时间感觉还可以所以写一篇文章记录一下。<br>提示：CentOS 7 自带内核版本为 3.10，CentOS 8 自带内核版本为 4.18。</p></div><hr><h2 id="查看内核版本命令"><a href="#查看内核版本命令" class="headerlink" title="查看内核版本命令"></a>查看内核版本命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h3 id="1、下载脚本"><a href="#1、下载脚本" class="headerlink" title="1、下载脚本"></a>1、下载脚本</h3><p>一键脚本已集成TCP优化、自动开启Google BBR（限 4.9 或更高版本内核）、自动安装 shadowsocks-libev</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;down.24kplus.com&#x2F;linux&#x2F;shadowsocks&#x2F;centos-shadowsocks-libev.sh</span><br></pre></td></tr></table></figure><h3 id="2、执行脚本进行安装"><a href="#2、执行脚本进行安装" class="headerlink" title="2、执行脚本进行安装"></a>2、执行脚本进行安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x centos-shadowsocks-libev.sh &amp;&amp; .&#x2F;centos-shadowsocks-libev.sh</span><br></pre></td></tr></table></figure><h3 id="3、根据shell脚本提示输入相关信息"><a href="#3、根据shell脚本提示输入相关信息" class="headerlink" title="3、根据shell脚本提示输入相关信息"></a>3、根据shell脚本提示输入相关信息</h3><h4 id="3-1、提示设置SS密码，"><a href="#3-1、提示设置SS密码，" class="headerlink" title="3.1、提示设置SS密码，"></a>3.1、提示设置SS密码，</h4><pre><code>输入自定义密码后按回车，也可以直接按回车使用默认密码</code></pre><p><img src="/images/img/blog/2021-04-07-14-05-41.png" alt="2021-04-07-14-05-41"></p><h4 id="3-2、接下来选择SS要使用的服务器端口"><a href="#3-2、接下来选择SS要使用的服务器端口" class="headerlink" title="3.2、接下来选择SS要使用的服务器端口"></a>3.2、接下来选择SS要使用的服务器端口</h4><pre><code>输入自己喜欢的端口， 也可以直接按回车使用默认端口 </code></pre><p><img src="/images/img/blog/2021-04-07-14-29-51.png" alt="2021-04-07-14-29-51"></p><h4 id="3-3、然后选择加密方式（仅保留相对安全的加密方式）"><a href="#3-3、然后选择加密方式（仅保留相对安全的加密方式）" class="headerlink" title="3.3、然后选择加密方式（仅保留相对安全的加密方式）"></a>3.3、然后选择加密方式（仅保留相对安全的加密方式）</h4><pre><code>选择相应的序号即可</code></pre><p><img src="/images/img/blog/2021-04-07-14-30-16.png" alt="2021-04-07-14-30-16"></p><h4 id="3-4、安装完成"><a href="#3-4、安装完成" class="headerlink" title="3.4、安装完成"></a>3.4、安装完成</h4><p><img src="/images/img/blog/2021-04-07-14-30-55.png" alt="2021-04-07-14-30-55"></p><h3 id="4、选择相关客户端就可以在客户端上使用了，我用的是Shadowsocks"><a href="#4、选择相关客户端就可以在客户端上使用了，我用的是Shadowsocks" class="headerlink" title="4、选择相关客户端就可以在客户端上使用了，我用的是Shadowsocks"></a>4、选择相关客户端就可以在客户端上使用了，我用的是Shadowsocks</h3><p><img src="/images/img/blog/2021-04-07-14-31-42.png" alt="2021-04-07-14-31-42"></p><h3 id="5、效果"><a href="#5、效果" class="headerlink" title="5、效果"></a>5、效果</h3><p><img src="/images/img/blog/2021-04-07-14-33-49.png" alt="2021-04-07-14-33-49"></p><h1 id="6-卸载方法"><a href="#6-卸载方法" class="headerlink" title="6.卸载方法"></a>6.卸载方法</h1><p>使用 root 用户登录，运行以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;shadowsocks-libev.sh uninstall</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
